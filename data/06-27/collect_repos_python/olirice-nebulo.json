{
    "repository": "olirice/nebulo",
    "stars": 89,
    "language": "python",
    "size": 7136,
    "clone_url": "https://github.com/olirice/nebulo.git",
    "timestamp": "2023-06-28T14:09:39.352361Z",
    "clone_success": true,
    "number_of_actions": 2,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_build_tools": [
        "unknown",
        "pytest"
    ],
    "actions_test_build_tools": [
        "pytest"
    ],
    "actions_run": {
        "failed": true,
        "tests": [
            {
                "classname": "src.test.app_test",
                "name": "test_app_has_route",
                "time": 0.03,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/14/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.app_test",
                "name": "test_app_serves_graphiql",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/14/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.app_test",
                "name": "test_app_serves_graphql_query_from_application_json",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/14/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.app_test",
                "name": "test_app_serves_mutation_function",
                "time": 0.009,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/14/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.cli_test",
                "name": "test_cli_version",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.cli_test",
                "name": "test_cli_schema_dump",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/14/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.condition_test",
                "name": "test_query_with_int_condition",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/14/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.condition_test",
                "name": "test_query_with_string_condition",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/14/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.create_test",
                "name": "test_create_mutation",
                "time": 0.012,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/14/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.delete_test",
                "name": "test_delete_mutation",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/14/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.exclude_column_test",
                "name": "test_reflect_function",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/14/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.exclude_fkey_test",
                "name": "test_fkey_comment_exclude_one",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/14/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.exclude_table_test",
                "name": "test_exclude_table",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/14/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.function_returns_row_test",
                "name": "test_reflect_function_returning_row",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/14/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.function_returns_row_test",
                "name": "test_integration_function",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/14/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.function_test",
                "name": "test_reflect_function",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/14/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.function_test",
                "name": "test_call_function",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/14/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.function_test",
                "name": "test_integration_function",
                "time": 0.017,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/14/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.integration_array_test",
                "name": "test_query_multiple_fields",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/14/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.integration_composite_test",
                "name": "test_query_multiple_fields",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/14/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.integration_enum_test",
                "name": "test_query_multiple_fields",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/14/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.integration_many_basic_test",
                "name": "test_query_multiple_fields",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/14/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.integration_many_basic_test",
                "name": "test_arg_first",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/14/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.integration_one_basic_test",
                "name": "test_query_one_field",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/14/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.integration_one_basic_test",
                "name": "test_query_multiple_fields",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/14/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.integration_relationship_test",
                "name": "test_query_one_to_many",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/14/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.integration_relationship_test",
                "name": "test_query_many_to_one",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/14/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.jwt_function_test",
                "name": "test_jwt_function",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/14/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.lexer_test",
                "name": "test_lexer_import",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.node_id_test",
                "name": "test_round_trip_node_id",
                "time": 0.005,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/14/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.node_id_test",
                "name": "test_invalid_node_id",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/14/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.pagination_test",
                "name": "test_get_cursor",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/14/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.pagination_test",
                "name": "test_invalid_cursor",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/14/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.pagination_test",
                "name": "test_retrieve_1_after_cursor",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/14/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.pagination_test",
                "name": "test_retrieve_1_before_cursor",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/14/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.pagination_test",
                "name": "test_first_without_after",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/14/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.pagination_test",
                "name": "test_last_without_before",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/14/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.pagination_test",
                "name": "test_pagination_order",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/14/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.pagination_test",
                "name": "test_invalid_pagination_params",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/14/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.parse_info_test",
                "name": "test_astnode_get_subfield_alias_exception",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.reflect_constraint_comment_test",
                "name": "test_reflect_fkey_comment",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/14/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.reflect_constraint_comment_test",
                "name": "test_reflect_fkey_comment_to_schema",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/14/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.reflection_test",
                "name": "test_reflect_types",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/14/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.reflection_test",
                "name": "test_reflect_gql_boolean",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/14/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.rename_column_test",
                "name": "test_reflect_column_name_directive",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/14/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.rename_table_test",
                "name": "test_reflect_table_name_directive",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/14/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.update_test",
                "name": "test_update_mutation",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/14/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.view_test",
                "name": "test_reflect_view",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/14/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "src.test.view_test",
                "name": "test_query_view",
                "time": 0.007,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n\tIs the server running on that host and accepting TCP/IP connections?\n\n(Background on this error at: https://sqlalche.me/e/14/e3q8)\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            }
        ],
        "stdout": "[b6af6951-5707-4c08-bf33-42342a826589/build] \ud83d\ude80  Start image=crawlergpt:latest\n[b6af6951-5707-4c08-bf33-42342a826589/build]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[b6af6951-5707-4c08-bf33-42342a826589/build]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[b6af6951-5707-4c08-bf33-42342a826589/build]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[b6af6951-5707-4c08-bf33-42342a826589/build]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/olirice-nebulo] user=0 workdir=\n[b6af6951-5707-4c08-bf33-42342a826589/build]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v1\n[b6af6951-5707-4c08-bf33-42342a826589/build]   \u2601  git clone 'https://github.com/codecov/codecov-action' # ref=v1\n[b6af6951-5707-4c08-bf33-42342a826589/build] \u2b50 Run Main actions/checkout@v1\n[b6af6951-5707-4c08-bf33-42342a826589/build]   \u2705  Success - Main actions/checkout@v1\n[b6af6951-5707-4c08-bf33-42342a826589/build] \u2b50 Run Main Set up Python 3.7\n[b6af6951-5707-4c08-bf33-42342a826589/build]   \ud83d\udc33  docker cp src=/tmp/act-cache/59947ae1-1d72-40e4-8eb7-922fc1b8ac53/act/actions-setup-python@v1/ dst=/var/run/act/actions/actions-setup-python@v1/\n[b6af6951-5707-4c08-bf33-42342a826589/build]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v1/] user=0 workdir=\n[b6af6951-5707-4c08-bf33-42342a826589/build]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v1/dist/index.js] user= workdir=\n[b6af6951-5707-4c08-bf33-42342a826589/build]   \ud83d\udcac  ::debug::Semantic version spec of 3.7 is 3.7\n[b6af6951-5707-4c08-bf33-42342a826589/build]   \ud83d\udcac  ::debug::isExplicit: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   \ud83d\udcac  ::debug::explicit? false\n[b6af6951-5707-4c08-bf33-42342a826589/build]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[b6af6951-5707-4c08-bf33-42342a826589/build]   \ud83d\udcac  ::debug::explicit? true\n[b6af6951-5707-4c08-bf33-42342a826589/build]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[b6af6951-5707-4c08-bf33-42342a826589/build]   \ud83d\udcac  ::debug::explicit? true\n[b6af6951-5707-4c08-bf33-42342a826589/build]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[b6af6951-5707-4c08-bf33-42342a826589/build]   \ud83d\udcac  ::debug::explicit? true\n[b6af6951-5707-4c08-bf33-42342a826589/build]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[b6af6951-5707-4c08-bf33-42342a826589/build]   \ud83d\udcac  ::debug::explicit? true\n[b6af6951-5707-4c08-bf33-42342a826589/build]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[b6af6951-5707-4c08-bf33-42342a826589/build]   \ud83d\udcac  ::debug::explicit? true\n[b6af6951-5707-4c08-bf33-42342a826589/build]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[b6af6951-5707-4c08-bf33-42342a826589/build]   \ud83d\udcac  ::debug::explicit? true\n[b6af6951-5707-4c08-bf33-42342a826589/build]   \ud83d\udcac  ::debug::evaluating 6 versions\n[b6af6951-5707-4c08-bf33-42342a826589/build]   \ud83d\udcac  ::debug::matched: 3.7.11\n[b6af6951-5707-4c08-bf33-42342a826589/build]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.7.11/x64\n[b6af6951-5707-4c08-bf33-42342a826589/build]   \ud83d\udcac  ::debug::Found tool in cache Python 3.7.11 x64\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | Successfully setup CPython (3.7.11)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   \u2753 add-matcher /run/act/actions/actions-setup-python@v1/.github/python.json\n[b6af6951-5707-4c08-bf33-42342a826589/build]   \u2705  Success - Main Set up Python 3.7\n[b6af6951-5707-4c08-bf33-42342a826589/build]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.7.11/x64\n[b6af6951-5707-4c08-bf33-42342a826589/build]   \u2699  ::set-output:: python-version=3.7.11\n[b6af6951-5707-4c08-bf33-42342a826589/build]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.7.11/x64\n[b6af6951-5707-4c08-bf33-42342a826589/build]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.7.11/x64/bin\n[b6af6951-5707-4c08-bf33-42342a826589/build] \u2b50 Run Main Install nebulo\n[b6af6951-5707-4c08-bf33-42342a826589/build]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | Reading package lists...\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | Building dependency tree...\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | Reading state information...\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | libpq-dev is already the newest version (13.4-1.pgdg20.04+1).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | 0 upgraded, 0 newly installed, 0 to remove and 20 not upgraded.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | Requirement already satisfied: pip in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (21.2.4)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | Collecting pip\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Downloading pip-23.1.2-py3-none-any.whl (2.1 MB)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | Installing collected packages: pip\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Attempting uninstall: pip\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     Found existing installation: pip 21.2.4\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     Uninstalling pip-21.2.4:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |       Successfully uninstalled pip-21.2.4\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | Successfully installed pip-23.1.2\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | Processing /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/olirice-nebulo\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Installing build dependencies: started\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Installing build dependencies: finished with status 'done'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Getting requirements to build wheel: started\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Getting requirements to build wheel: finished with status 'done'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Preparing metadata (pyproject.toml): started\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Preparing metadata (pyproject.toml): finished with status 'done'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | Collecting aiofiles==0.5.* (from nebulo==0.3.1)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Downloading aiofiles-0.5.0-py3-none-any.whl (11 kB)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | Collecting appdirs==1.4.3 (from nebulo==0.3.1)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Downloading appdirs-1.4.3-py2.py3-none-any.whl (12 kB)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | Collecting asyncpg (from nebulo==0.3.1)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Downloading asyncpg-0.27.0.tar.gz (808 kB)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 808.9/808.9 kB 8.3 MB/s eta 0:00:00\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Installing build dependencies: started\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Installing build dependencies: finished with status 'done'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Getting requirements to build wheel: started\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Getting requirements to build wheel: finished with status 'done'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Preparing metadata (pyproject.toml): started\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Preparing metadata (pyproject.toml): finished with status 'done'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | Collecting cachetools==4.0.* (from nebulo==0.3.1)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Downloading cachetools-4.0.0-py3-none-any.whl (10 kB)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | Collecting click>=8 (from nebulo==0.3.1)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Downloading click-8.1.3-py3-none-any.whl (96 kB)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 96.6/96.6 kB 2.5 MB/s eta 0:00:00\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | Collecting flupy>=1.2 (from nebulo==0.3.1)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Downloading flupy-1.2.0.tar.gz (12 kB)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Installing build dependencies: started\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Installing build dependencies: finished with status 'done'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Getting requirements to build wheel: started\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Getting requirements to build wheel: finished with status 'done'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Preparing metadata (pyproject.toml): started\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Preparing metadata (pyproject.toml): finished with status 'done'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | Collecting graphql-core==3.1.* (from nebulo==0.3.1)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Downloading graphql_core-3.1.7-py3-none-any.whl (189 kB)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 189.5/189.5 kB 6.2 MB/s eta 0:00:00\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | Collecting inflect==4.1.* (from nebulo==0.3.1)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Downloading inflect-4.1.1-py3-none-any.whl (31 kB)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | Collecting parse==1.15.* (from nebulo==0.3.1)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Downloading parse-1.15.0.tar.gz (29 kB)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Installing build dependencies: started\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Installing build dependencies: finished with status 'done'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Getting requirements to build wheel: started\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Getting requirements to build wheel: finished with status 'done'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Preparing metadata (pyproject.toml): started\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Preparing metadata (pyproject.toml): finished with status 'done'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | Collecting psycopg2-binary>2.8 (from nebulo==0.3.1)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Downloading psycopg2_binary-2.9.6-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.0 MB)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 3.0/3.0 MB 21.5 MB/s eta 0:00:00\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | Collecting pyjwt==1.7.* (from nebulo==0.3.1)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Downloading PyJWT-1.7.1-py2.py3-none-any.whl (18 kB)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | Collecting starlette==0.14.* (from nebulo==0.3.1)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Downloading starlette-0.14.2-py3-none-any.whl (60 kB)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 60.6/60.6 kB 597.0 kB/s eta 0:00:00\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | Collecting sqlalchemy<2 (from nebulo==0.3.1)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Downloading SQLAlchemy-1.4.48-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.6 MB)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 1.6/1.6 MB 31.8 MB/s eta 0:00:00\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | Collecting typing-extensions (from nebulo==0.3.1)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Downloading typing_extensions-4.6.3-py3-none-any.whl (31 kB)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | Collecting uvicorn>=0.20 (from nebulo==0.3.1)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Downloading uvicorn-0.22.0-py3-none-any.whl (58 kB)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 58.3/58.3 kB 1.1 MB/s eta 0:00:00\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | Collecting pytest (from nebulo==0.3.1)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Downloading pytest-7.4.0-py3-none-any.whl (323 kB)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 323.6/323.6 kB 11.3 MB/s eta 0:00:00\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | Collecting pytest-cov (from nebulo==0.3.1)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Downloading pytest_cov-4.1.0-py3-none-any.whl (21 kB)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | Collecting requests (from nebulo==0.3.1)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Downloading requests-2.31.0-py3-none-any.whl (62 kB)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 62.6/62.6 kB 2.1 MB/s eta 0:00:00\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | Collecting pytest-asyncio (from nebulo==0.3.1)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Downloading pytest_asyncio-0.21.0-py3-none-any.whl (13 kB)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | Collecting importlib-metadata (from inflect==4.1.*->nebulo==0.3.1)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Downloading importlib_metadata-6.7.0-py3-none-any.whl (22 kB)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | Collecting greenlet!=0.4.17 (from sqlalchemy<2->nebulo==0.3.1)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Downloading greenlet-2.0.2-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (566 kB)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 566.1/566.1 kB 11.2 MB/s eta 0:00:00\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | Collecting h11>=0.8 (from uvicorn>=0.20->nebulo==0.3.1)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Downloading h11-0.14.0-py3-none-any.whl (58 kB)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 58.3/58.3 kB 455.7 kB/s eta 0:00:00\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | Collecting iniconfig (from pytest->nebulo==0.3.1)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Downloading iniconfig-2.0.0-py3-none-any.whl (5.9 kB)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | Collecting packaging (from pytest->nebulo==0.3.1)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Downloading packaging-23.1-py3-none-any.whl (48 kB)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 48.9/48.9 kB 853.9 kB/s eta 0:00:00\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | Collecting pluggy<2.0,>=0.12 (from pytest->nebulo==0.3.1)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Downloading pluggy-1.2.0-py3-none-any.whl (17 kB)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | Collecting exceptiongroup>=1.0.0rc8 (from pytest->nebulo==0.3.1)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Downloading exceptiongroup-1.1.1-py3-none-any.whl (14 kB)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | Collecting tomli>=1.0.0 (from pytest->nebulo==0.3.1)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Downloading tomli-2.0.1-py3-none-any.whl (12 kB)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | Collecting coverage[toml]>=5.2.1 (from pytest-cov->nebulo==0.3.1)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Downloading coverage-7.2.7-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (225 kB)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 225.6/225.6 kB 3.9 MB/s eta 0:00:00\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | Collecting charset-normalizer<4,>=2 (from requests->nebulo==0.3.1)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Downloading charset_normalizer-3.1.0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (171 kB)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 171.0/171.0 kB 3.2 MB/s eta 0:00:00\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | Collecting idna<4,>=2.5 (from requests->nebulo==0.3.1)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Downloading idna-3.4-py3-none-any.whl (61 kB)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 61.5/61.5 kB 2.3 MB/s eta 0:00:00\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | Collecting urllib3<3,>=1.21.1 (from requests->nebulo==0.3.1)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Downloading urllib3-2.0.3-py3-none-any.whl (123 kB)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 123.6/123.6 kB 848.4 kB/s eta 0:00:00\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | Collecting certifi>=2017.4.17 (from requests->nebulo==0.3.1)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Downloading certifi-2023.5.7-py3-none-any.whl (156 kB)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 157.0/157.0 kB 1.7 MB/s eta 0:00:00\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | Collecting zipp>=0.5 (from importlib-metadata->inflect==4.1.*->nebulo==0.3.1)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Downloading zipp-3.15.0-py3-none-any.whl (6.8 kB)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | Building wheels for collected packages: parse, flupy, asyncpg, nebulo\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Building wheel for parse (pyproject.toml): started\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Building wheel for parse (pyproject.toml): finished with status 'done'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Created wheel for parse: filename=parse-1.15.0-py3-none-any.whl size=23701 sha256=75b2a1cfc46e2160d9422fc63e3e33f8dfca7514f04cb28b38b22324f15c7a90\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Stored in directory: /home/runneradmin/.cache/pip/wheels/d7/b3/1d/5c94c64413b2212f64a297c92f11edd45e4474d08d0220a008\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Building wheel for flupy (pyproject.toml): started\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Building wheel for flupy (pyproject.toml): finished with status 'done'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Created wheel for flupy: filename=flupy-1.2.0-py3-none-any.whl size=11021 sha256=1e432246dd7596d051759da28bbb68dbe4a49aef12707e967d64e30e9bc96cc8\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Stored in directory: /home/runneradmin/.cache/pip/wheels/ca/d4/c5/3d131adcf02a379e03aadddfa1ec5618e418b260a9be405b3f\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Building wheel for asyncpg (pyproject.toml): started\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Building wheel for asyncpg (pyproject.toml): finished with status 'done'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Created wheel for asyncpg: filename=asyncpg-0.27.0-cp37-cp37m-linux_x86_64.whl size=2888876 sha256=658a4cb72a91423de04239f809180d403498105cce7da755f083b6ed4fbd1050\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Stored in directory: /home/runneradmin/.cache/pip/wheels/ed/ca/ea/b9c732e62c9027765c25f63b69abe34e013ee35448f1cd1a45\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Building wheel for nebulo (pyproject.toml): started\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Building wheel for nebulo (pyproject.toml): finished with status 'done'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Created wheel for nebulo: filename=nebulo-0.3.1-py3-none-any.whl size=265796 sha256=2084640332f9eeed1edb821adf9c2b0f785477f0ac84238f6a672320ed1302aa\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |   Stored in directory: /home/runneradmin/.cache/pip/wheels/b0/ef/8e/02a2f7665b8c436912ac4e5866f839c239a1995a3fb01e37ad\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | Successfully built parse flupy asyncpg nebulo\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | Installing collected packages: pyjwt, parse, appdirs, aiofiles, zipp, urllib3, typing-extensions, tomli, starlette, psycopg2-binary, packaging, iniconfig, idna, greenlet, graphql-core, exceptiongroup, coverage, charset-normalizer, certifi, cachetools, requests, importlib-metadata, h11, flupy, asyncpg, sqlalchemy, pluggy, inflect, click, uvicorn, pytest, pytest-cov, pytest-asyncio, nebulo\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | Successfully installed aiofiles-0.5.0 appdirs-1.4.3 asyncpg-0.27.0 cachetools-4.0.0 certifi-2023.5.7 charset-normalizer-3.1.0 click-8.1.3 coverage-7.2.7 exceptiongroup-1.1.1 flupy-1.2.0 graphql-core-3.1.7 greenlet-2.0.2 h11-0.14.0 idna-3.4 importlib-metadata-6.7.0 inflect-4.1.1 iniconfig-2.0.0 nebulo-0.3.1 packaging-23.1 parse-1.15.0 pluggy-1.2.0 psycopg2-binary-2.9.6 pyjwt-1.7.1 pytest-7.4.0 pytest-asyncio-0.21.0 pytest-cov-4.1.0 requests-2.31.0 sqlalchemy-1.4.48 starlette-0.14.2 tomli-2.0.1 typing-extensions-4.6.3 urllib3-2.0.3 uvicorn-0.22.0 zipp-3.15.0\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | [notice] A new release of pip is available: 20.1.1 -> 23.1.2\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | [notice] To update, run: pip install --upgrade pip\n[b6af6951-5707-4c08-bf33-42342a826589/build]   \u2705  Success - Main Install nebulo\n[b6af6951-5707-4c08-bf33-42342a826589/build] \u2b50 Run Main Run Tests with Coverage\n[b6af6951-5707-4c08-bf33-42342a826589/build]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ============================= test session starts ==============================\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | platform linux -- Python 3.7.11, pytest-7.4.0, pluggy-1.2.0\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | rootdir: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/olirice-nebulo\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | configfile: pytest.ini\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | plugins: cov-4.1.0, asyncio-0.21.0\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | asyncio: mode=strict\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | collected 49 items\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/app_test.py EEEE                                                [  8%]\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/cli_test.py .E                                                  [ 12%]\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/condition_test.py EE                                            [ 16%]\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/create_test.py E                                                [ 18%]\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/delete_test.py E                                                [ 20%]\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/exclude_column_test.py E                                        [ 22%]\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/exclude_fkey_test.py E                                          [ 24%]\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/exclude_table_test.py E                                         [ 26%]\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/function_returns_row_test.py EE                                 [ 30%]\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/function_test.py EEE                                            [ 36%]\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/integration_array_test.py E                                     [ 38%]\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/integration_composite_test.py E                                 [ 40%]\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/integration_enum_test.py E                                      [ 42%]\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/integration_many_basic_test.py EE                               [ 46%]\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/integration_one_basic_test.py EE                                [ 51%]\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/integration_relationship_test.py EE                             [ 55%]\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/jwt_function_test.py E                                          [ 57%]\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/lexer_test.py .                                                 [ 59%]\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/node_id_test.py EE                                              [ 63%]\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/pagination_test.py EEEEEEEE                                     [ 79%]\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/parse_info_test.py .                                            [ 81%]\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/reflect_constraint_comment_test.py EE                           [ 85%]\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/reflection_test.py EE                                           [ 89%]\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/rename_column_test.py E                                         [ 91%]\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/rename_table_test.py E                                          [ 93%]\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/update_test.py E                                                [ 95%]\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/view_test.py EE                                                 [100%]\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ==================================== ERRORS ====================================\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _____________________ ERROR at setup of test_app_has_route _____________________\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | self = Engine(postgresql://nebulo_user:***@localhost:4442/nebulo_db)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | fn = <bound method Pool.connect of <sqlalchemy.pool.impl.QueuePool object at 0x7ffa35060110>>\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def _wrap_pool_connect(self, fn, connection):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dialect = self.dialect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         try:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >           return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | The above exception was the direct cause of the following exception:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_str = 'postgresql://nebulo_user:password@localhost:4442/nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     @pytest.fixture(scope=\"session\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def engine(connection_str: str):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\" SQLAlchemy engine \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         _engine = create_engine(connection_str, echo=False)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         # Make sure the schema is clean\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       _engine.execute(SQL_DOWN)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/conftest.py:41: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn(*args, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3261: in execute\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     connection = self.connect(close_with_result=True)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3320: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._connection_cls(self, close_with_result=close_with_result)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:96: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     else engine.raw_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3399: in raw_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._wrap_pool_connect(self.pool.connect, _connection)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3370: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     e, dialect, self\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2204: in _handle_dbapi_exception_noconnection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     sqlalchemy_exception, with_traceback=exc_info[2], from_=e\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | __________________ ERROR at setup of test_app_serves_graphiql __________________\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | self = Engine(postgresql://nebulo_user:***@localhost:4442/nebulo_db)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | fn = <bound method Pool.connect of <sqlalchemy.pool.impl.QueuePool object at 0x7ffa35060110>>\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def _wrap_pool_connect(self, fn, connection):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dialect = self.dialect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         try:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >           return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | The above exception was the direct cause of the following exception:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_str = 'postgresql://nebulo_user:password@localhost:4442/nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     @pytest.fixture(scope=\"session\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def engine(connection_str: str):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\" SQLAlchemy engine \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         _engine = create_engine(connection_str, echo=False)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         # Make sure the schema is clean\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       _engine.execute(SQL_DOWN)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/conftest.py:41: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn(*args, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3261: in execute\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     connection = self.connect(close_with_result=True)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3320: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._connection_cls(self, close_with_result=close_with_result)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:96: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     else engine.raw_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3399: in raw_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._wrap_pool_connect(self.pool.connect, _connection)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3370: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     e, dialect, self\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2204: in _handle_dbapi_exception_noconnection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     sqlalchemy_exception, with_traceback=exc_info[2], from_=e\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ____ ERROR at setup of test_app_serves_graphql_query_from_application_json _____\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | self = Engine(postgresql://nebulo_user:***@localhost:4442/nebulo_db)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | fn = <bound method Pool.connect of <sqlalchemy.pool.impl.QueuePool object at 0x7ffa35060110>>\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def _wrap_pool_connect(self, fn, connection):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dialect = self.dialect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         try:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >           return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | The above exception was the direct cause of the following exception:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_str = 'postgresql://nebulo_user:password@localhost:4442/nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     @pytest.fixture(scope=\"session\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def engine(connection_str: str):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\" SQLAlchemy engine \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         _engine = create_engine(connection_str, echo=False)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         # Make sure the schema is clean\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       _engine.execute(SQL_DOWN)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/conftest.py:41: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn(*args, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3261: in execute\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     connection = self.connect(close_with_result=True)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3320: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._connection_cls(self, close_with_result=close_with_result)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:96: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     else engine.raw_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3399: in raw_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._wrap_pool_connect(self.pool.connect, _connection)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3370: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     e, dialect, self\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2204: in _handle_dbapi_exception_noconnection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     sqlalchemy_exception, with_traceback=exc_info[2], from_=e\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _____________ ERROR at setup of test_app_serves_mutation_function ______________\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | self = Engine(postgresql://nebulo_user:***@localhost:4442/nebulo_db)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | fn = <bound method Pool.connect of <sqlalchemy.pool.impl.QueuePool object at 0x7ffa35060110>>\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def _wrap_pool_connect(self, fn, connection):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dialect = self.dialect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         try:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >           return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | The above exception was the direct cause of the following exception:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_str = 'postgresql://nebulo_user:password@localhost:4442/nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     @pytest.fixture(scope=\"session\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def engine(connection_str: str):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\" SQLAlchemy engine \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         _engine = create_engine(connection_str, echo=False)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         # Make sure the schema is clean\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       _engine.execute(SQL_DOWN)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/conftest.py:41: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn(*args, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3261: in execute\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     connection = self.connect(close_with_result=True)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3320: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._connection_cls(self, close_with_result=close_with_result)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:96: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     else engine.raw_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3399: in raw_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._wrap_pool_connect(self.pool.connect, _connection)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3370: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     e, dialect, self\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2204: in _handle_dbapi_exception_noconnection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     sqlalchemy_exception, with_traceback=exc_info[2], from_=e\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ____________________ ERROR at setup of test_cli_schema_dump ____________________\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | self = Engine(postgresql://nebulo_user:***@localhost:4442/nebulo_db)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | fn = <bound method Pool.connect of <sqlalchemy.pool.impl.QueuePool object at 0x7ffa35060110>>\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def _wrap_pool_connect(self, fn, connection):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dialect = self.dialect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         try:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >           return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | The above exception was the direct cause of the following exception:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_str = 'postgresql://nebulo_user:password@localhost:4442/nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     @pytest.fixture(scope=\"session\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def engine(connection_str: str):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\" SQLAlchemy engine \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         _engine = create_engine(connection_str, echo=False)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         # Make sure the schema is clean\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       _engine.execute(SQL_DOWN)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/conftest.py:41: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn(*args, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3261: in execute\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     connection = self.connect(close_with_result=True)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3320: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._connection_cls(self, close_with_result=close_with_result)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:96: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     else engine.raw_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3399: in raw_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._wrap_pool_connect(self.pool.connect, _connection)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3370: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     e, dialect, self\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2204: in _handle_dbapi_exception_noconnection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     sqlalchemy_exception, with_traceback=exc_info[2], from_=e\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _______________ ERROR at setup of test_query_with_int_condition ________________\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | self = Engine(postgresql://nebulo_user:***@localhost:4442/nebulo_db)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | fn = <bound method Pool.connect of <sqlalchemy.pool.impl.QueuePool object at 0x7ffa35060110>>\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def _wrap_pool_connect(self, fn, connection):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dialect = self.dialect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         try:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >           return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | The above exception was the direct cause of the following exception:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_str = 'postgresql://nebulo_user:password@localhost:4442/nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     @pytest.fixture(scope=\"session\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def engine(connection_str: str):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\" SQLAlchemy engine \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         _engine = create_engine(connection_str, echo=False)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         # Make sure the schema is clean\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       _engine.execute(SQL_DOWN)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/conftest.py:41: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn(*args, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3261: in execute\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     connection = self.connect(close_with_result=True)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3320: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._connection_cls(self, close_with_result=close_with_result)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:96: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     else engine.raw_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3399: in raw_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._wrap_pool_connect(self.pool.connect, _connection)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3370: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     e, dialect, self\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2204: in _handle_dbapi_exception_noconnection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     sqlalchemy_exception, with_traceback=exc_info[2], from_=e\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ______________ ERROR at setup of test_query_with_string_condition ______________\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | self = Engine(postgresql://nebulo_user:***@localhost:4442/nebulo_db)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | fn = <bound method Pool.connect of <sqlalchemy.pool.impl.QueuePool object at 0x7ffa35060110>>\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def _wrap_pool_connect(self, fn, connection):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dialect = self.dialect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         try:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >           return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | The above exception was the direct cause of the following exception:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_str = 'postgresql://nebulo_user:password@localhost:4442/nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     @pytest.fixture(scope=\"session\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def engine(connection_str: str):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\" SQLAlchemy engine \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         _engine = create_engine(connection_str, echo=False)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         # Make sure the schema is clean\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       _engine.execute(SQL_DOWN)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/conftest.py:41: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn(*args, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3261: in execute\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     connection = self.connect(close_with_result=True)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3320: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._connection_cls(self, close_with_result=close_with_result)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:96: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     else engine.raw_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3399: in raw_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._wrap_pool_connect(self.pool.connect, _connection)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3370: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     e, dialect, self\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2204: in _handle_dbapi_exception_noconnection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     sqlalchemy_exception, with_traceback=exc_info[2], from_=e\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ____________________ ERROR at setup of test_create_mutation ____________________\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | self = Engine(postgresql://nebulo_user:***@localhost:4442/nebulo_db)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | fn = <bound method Pool.connect of <sqlalchemy.pool.impl.QueuePool object at 0x7ffa35060110>>\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def _wrap_pool_connect(self, fn, connection):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dialect = self.dialect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         try:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >           return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | The above exception was the direct cause of the following exception:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_str = 'postgresql://nebulo_user:password@localhost:4442/nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     @pytest.fixture(scope=\"session\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def engine(connection_str: str):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\" SQLAlchemy engine \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         _engine = create_engine(connection_str, echo=False)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         # Make sure the schema is clean\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       _engine.execute(SQL_DOWN)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/conftest.py:41: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn(*args, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3261: in execute\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     connection = self.connect(close_with_result=True)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3320: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._connection_cls(self, close_with_result=close_with_result)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:96: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     else engine.raw_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3399: in raw_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._wrap_pool_connect(self.pool.connect, _connection)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3370: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     e, dialect, self\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2204: in _handle_dbapi_exception_noconnection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     sqlalchemy_exception, with_traceback=exc_info[2], from_=e\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ____________________ ERROR at setup of test_delete_mutation ____________________\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | self = Engine(postgresql://nebulo_user:***@localhost:4442/nebulo_db)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | fn = <bound method Pool.connect of <sqlalchemy.pool.impl.QueuePool object at 0x7ffa35060110>>\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def _wrap_pool_connect(self, fn, connection):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dialect = self.dialect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         try:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >           return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | The above exception was the direct cause of the following exception:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_str = 'postgresql://nebulo_user:password@localhost:4442/nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     @pytest.fixture(scope=\"session\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def engine(connection_str: str):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\" SQLAlchemy engine \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         _engine = create_engine(connection_str, echo=False)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         # Make sure the schema is clean\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       _engine.execute(SQL_DOWN)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/conftest.py:41: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn(*args, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3261: in execute\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     connection = self.connect(close_with_result=True)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3320: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._connection_cls(self, close_with_result=close_with_result)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:96: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     else engine.raw_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3399: in raw_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._wrap_pool_connect(self.pool.connect, _connection)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3370: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     e, dialect, self\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2204: in _handle_dbapi_exception_noconnection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     sqlalchemy_exception, with_traceback=exc_info[2], from_=e\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ___________________ ERROR at setup of test_reflect_function ____________________\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | self = Engine(postgresql://nebulo_user:***@localhost:4442/nebulo_db)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | fn = <bound method Pool.connect of <sqlalchemy.pool.impl.QueuePool object at 0x7ffa35060110>>\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def _wrap_pool_connect(self, fn, connection):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dialect = self.dialect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         try:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >           return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | The above exception was the direct cause of the following exception:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_str = 'postgresql://nebulo_user:password@localhost:4442/nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     @pytest.fixture(scope=\"session\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def engine(connection_str: str):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\" SQLAlchemy engine \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         _engine = create_engine(connection_str, echo=False)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         # Make sure the schema is clean\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       _engine.execute(SQL_DOWN)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/conftest.py:41: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn(*args, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3261: in execute\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     connection = self.connect(close_with_result=True)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3320: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._connection_cls(self, close_with_result=close_with_result)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:96: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     else engine.raw_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3399: in raw_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._wrap_pool_connect(self.pool.connect, _connection)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3370: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     e, dialect, self\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2204: in _handle_dbapi_exception_noconnection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     sqlalchemy_exception, with_traceback=exc_info[2], from_=e\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _______________ ERROR at setup of test_fkey_comment_exclude_one ________________\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | self = Engine(postgresql://nebulo_user:***@localhost:4442/nebulo_db)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | fn = <bound method Pool.connect of <sqlalchemy.pool.impl.QueuePool object at 0x7ffa35060110>>\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def _wrap_pool_connect(self, fn, connection):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dialect = self.dialect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         try:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >           return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | The above exception was the direct cause of the following exception:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_str = 'postgresql://nebulo_user:password@localhost:4442/nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     @pytest.fixture(scope=\"session\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def engine(connection_str: str):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\" SQLAlchemy engine \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         _engine = create_engine(connection_str, echo=False)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         # Make sure the schema is clean\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       _engine.execute(SQL_DOWN)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/conftest.py:41: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn(*args, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3261: in execute\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     connection = self.connect(close_with_result=True)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3320: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._connection_cls(self, close_with_result=close_with_result)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:96: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     else engine.raw_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3399: in raw_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._wrap_pool_connect(self.pool.connect, _connection)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3370: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     e, dialect, self\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2204: in _handle_dbapi_exception_noconnection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     sqlalchemy_exception, with_traceback=exc_info[2], from_=e\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _____________________ ERROR at setup of test_exclude_table _____________________\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | self = Engine(postgresql://nebulo_user:***@localhost:4442/nebulo_db)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | fn = <bound method Pool.connect of <sqlalchemy.pool.impl.QueuePool object at 0x7ffa35060110>>\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def _wrap_pool_connect(self, fn, connection):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dialect = self.dialect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         try:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >           return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | The above exception was the direct cause of the following exception:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_str = 'postgresql://nebulo_user:password@localhost:4442/nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     @pytest.fixture(scope=\"session\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def engine(connection_str: str):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\" SQLAlchemy engine \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         _engine = create_engine(connection_str, echo=False)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         # Make sure the schema is clean\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       _engine.execute(SQL_DOWN)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/conftest.py:41: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn(*args, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3261: in execute\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     connection = self.connect(close_with_result=True)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3320: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._connection_cls(self, close_with_result=close_with_result)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:96: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     else engine.raw_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3399: in raw_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._wrap_pool_connect(self.pool.connect, _connection)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3370: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     e, dialect, self\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2204: in _handle_dbapi_exception_noconnection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     sqlalchemy_exception, with_traceback=exc_info[2], from_=e\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ____________ ERROR at setup of test_reflect_function_returning_row _____________\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | self = Engine(postgresql://nebulo_user:***@localhost:4442/nebulo_db)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | fn = <bound method Pool.connect of <sqlalchemy.pool.impl.QueuePool object at 0x7ffa35060110>>\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def _wrap_pool_connect(self, fn, connection):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dialect = self.dialect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         try:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >           return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | The above exception was the direct cause of the following exception:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_str = 'postgresql://nebulo_user:password@localhost:4442/nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     @pytest.fixture(scope=\"session\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def engine(connection_str: str):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\" SQLAlchemy engine \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         _engine = create_engine(connection_str, echo=False)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         # Make sure the schema is clean\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       _engine.execute(SQL_DOWN)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/conftest.py:41: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn(*args, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3261: in execute\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     connection = self.connect(close_with_result=True)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3320: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._connection_cls(self, close_with_result=close_with_result)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:96: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     else engine.raw_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3399: in raw_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._wrap_pool_connect(self.pool.connect, _connection)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3370: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     e, dialect, self\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2204: in _handle_dbapi_exception_noconnection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     sqlalchemy_exception, with_traceback=exc_info[2], from_=e\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _________________ ERROR at setup of test_integration_function __________________\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | self = Engine(postgresql://nebulo_user:***@localhost:4442/nebulo_db)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | fn = <bound method Pool.connect of <sqlalchemy.pool.impl.QueuePool object at 0x7ffa35060110>>\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def _wrap_pool_connect(self, fn, connection):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dialect = self.dialect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         try:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >           return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | The above exception was the direct cause of the following exception:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_str = 'postgresql://nebulo_user:password@localhost:4442/nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     @pytest.fixture(scope=\"session\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def engine(connection_str: str):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\" SQLAlchemy engine \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         _engine = create_engine(connection_str, echo=False)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         # Make sure the schema is clean\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       _engine.execute(SQL_DOWN)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/conftest.py:41: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn(*args, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3261: in execute\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     connection = self.connect(close_with_result=True)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3320: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._connection_cls(self, close_with_result=close_with_result)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:96: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     else engine.raw_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3399: in raw_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._wrap_pool_connect(self.pool.connect, _connection)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3370: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     e, dialect, self\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2204: in _handle_dbapi_exception_noconnection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     sqlalchemy_exception, with_traceback=exc_info[2], from_=e\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ___________________ ERROR at setup of test_reflect_function ____________________\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | self = Engine(postgresql://nebulo_user:***@localhost:4442/nebulo_db)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | fn = <bound method Pool.connect of <sqlalchemy.pool.impl.QueuePool object at 0x7ffa35060110>>\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def _wrap_pool_connect(self, fn, connection):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dialect = self.dialect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         try:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >           return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | The above exception was the direct cause of the following exception:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_str = 'postgresql://nebulo_user:password@localhost:4442/nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     @pytest.fixture(scope=\"session\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def engine(connection_str: str):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\" SQLAlchemy engine \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         _engine = create_engine(connection_str, echo=False)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         # Make sure the schema is clean\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       _engine.execute(SQL_DOWN)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/conftest.py:41: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn(*args, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3261: in execute\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     connection = self.connect(close_with_result=True)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3320: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._connection_cls(self, close_with_result=close_with_result)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:96: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     else engine.raw_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3399: in raw_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._wrap_pool_connect(self.pool.connect, _connection)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3370: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     e, dialect, self\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2204: in _handle_dbapi_exception_noconnection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     sqlalchemy_exception, with_traceback=exc_info[2], from_=e\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _____________________ ERROR at setup of test_call_function _____________________\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | self = Engine(postgresql://nebulo_user:***@localhost:4442/nebulo_db)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | fn = <bound method Pool.connect of <sqlalchemy.pool.impl.QueuePool object at 0x7ffa35060110>>\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def _wrap_pool_connect(self, fn, connection):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dialect = self.dialect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         try:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >           return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | The above exception was the direct cause of the following exception:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_str = 'postgresql://nebulo_user:password@localhost:4442/nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     @pytest.fixture(scope=\"session\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def engine(connection_str: str):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\" SQLAlchemy engine \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         _engine = create_engine(connection_str, echo=False)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         # Make sure the schema is clean\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       _engine.execute(SQL_DOWN)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/conftest.py:41: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn(*args, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3261: in execute\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     connection = self.connect(close_with_result=True)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3320: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._connection_cls(self, close_with_result=close_with_result)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:96: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     else engine.raw_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3399: in raw_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._wrap_pool_connect(self.pool.connect, _connection)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3370: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     e, dialect, self\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2204: in _handle_dbapi_exception_noconnection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     sqlalchemy_exception, with_traceback=exc_info[2], from_=e\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _________________ ERROR at setup of test_integration_function __________________\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | self = Engine(postgresql://nebulo_user:***@localhost:4442/nebulo_db)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | fn = <bound method Pool.connect of <sqlalchemy.pool.impl.QueuePool object at 0x7ffa35060110>>\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def _wrap_pool_connect(self, fn, connection):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dialect = self.dialect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         try:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >           return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | The above exception was the direct cause of the following exception:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_str = 'postgresql://nebulo_user:password@localhost:4442/nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     @pytest.fixture(scope=\"session\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def engine(connection_str: str):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\" SQLAlchemy engine \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         _engine = create_engine(connection_str, echo=False)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         # Make sure the schema is clean\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       _engine.execute(SQL_DOWN)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/conftest.py:41: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn(*args, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3261: in execute\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     connection = self.connect(close_with_result=True)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3320: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._connection_cls(self, close_with_result=close_with_result)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:96: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     else engine.raw_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3399: in raw_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._wrap_pool_connect(self.pool.connect, _connection)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3370: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     e, dialect, self\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2204: in _handle_dbapi_exception_noconnection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     sqlalchemy_exception, with_traceback=exc_info[2], from_=e\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _________________ ERROR at setup of test_query_multiple_fields _________________\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | self = Engine(postgresql://nebulo_user:***@localhost:4442/nebulo_db)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | fn = <bound method Pool.connect of <sqlalchemy.pool.impl.QueuePool object at 0x7ffa35060110>>\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def _wrap_pool_connect(self, fn, connection):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dialect = self.dialect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         try:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >           return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | The above exception was the direct cause of the following exception:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_str = 'postgresql://nebulo_user:password@localhost:4442/nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     @pytest.fixture(scope=\"session\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def engine(connection_str: str):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\" SQLAlchemy engine \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         _engine = create_engine(connection_str, echo=False)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         # Make sure the schema is clean\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       _engine.execute(SQL_DOWN)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/conftest.py:41: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn(*args, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3261: in execute\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     connection = self.connect(close_with_result=True)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3320: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._connection_cls(self, close_with_result=close_with_result)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:96: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     else engine.raw_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3399: in raw_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._wrap_pool_connect(self.pool.connect, _connection)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3370: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     e, dialect, self\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2204: in _handle_dbapi_exception_noconnection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     sqlalchemy_exception, with_traceback=exc_info[2], from_=e\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _________________ ERROR at setup of test_query_multiple_fields _________________\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | self = Engine(postgresql://nebulo_user:***@localhost:4442/nebulo_db)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | fn = <bound method Pool.connect of <sqlalchemy.pool.impl.QueuePool object at 0x7ffa35060110>>\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def _wrap_pool_connect(self, fn, connection):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dialect = self.dialect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         try:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >           return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | The above exception was the direct cause of the following exception:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_str = 'postgresql://nebulo_user:password@localhost:4442/nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     @pytest.fixture(scope=\"session\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def engine(connection_str: str):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\" SQLAlchemy engine \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         _engine = create_engine(connection_str, echo=False)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         # Make sure the schema is clean\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       _engine.execute(SQL_DOWN)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/conftest.py:41: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn(*args, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3261: in execute\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     connection = self.connect(close_with_result=True)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3320: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._connection_cls(self, close_with_result=close_with_result)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:96: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     else engine.raw_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3399: in raw_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._wrap_pool_connect(self.pool.connect, _connection)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3370: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     e, dialect, self\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2204: in _handle_dbapi_exception_noconnection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     sqlalchemy_exception, with_traceback=exc_info[2], from_=e\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _________________ ERROR at setup of test_query_multiple_fields _________________\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | self = Engine(postgresql://nebulo_user:***@localhost:4442/nebulo_db)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | fn = <bound method Pool.connect of <sqlalchemy.pool.impl.QueuePool object at 0x7ffa35060110>>\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def _wrap_pool_connect(self, fn, connection):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dialect = self.dialect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         try:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >           return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | The above exception was the direct cause of the following exception:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_str = 'postgresql://nebulo_user:password@localhost:4442/nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     @pytest.fixture(scope=\"session\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def engine(connection_str: str):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\" SQLAlchemy engine \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         _engine = create_engine(connection_str, echo=False)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         # Make sure the schema is clean\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       _engine.execute(SQL_DOWN)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/conftest.py:41: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn(*args, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3261: in execute\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     connection = self.connect(close_with_result=True)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3320: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._connection_cls(self, close_with_result=close_with_result)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:96: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     else engine.raw_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3399: in raw_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._wrap_pool_connect(self.pool.connect, _connection)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3370: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     e, dialect, self\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2204: in _handle_dbapi_exception_noconnection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     sqlalchemy_exception, with_traceback=exc_info[2], from_=e\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _________________ ERROR at setup of test_query_multiple_fields _________________\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | self = Engine(postgresql://nebulo_user:***@localhost:4442/nebulo_db)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | fn = <bound method Pool.connect of <sqlalchemy.pool.impl.QueuePool object at 0x7ffa35060110>>\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def _wrap_pool_connect(self, fn, connection):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dialect = self.dialect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         try:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >           return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | The above exception was the direct cause of the following exception:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_str = 'postgresql://nebulo_user:password@localhost:4442/nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     @pytest.fixture(scope=\"session\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def engine(connection_str: str):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\" SQLAlchemy engine \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         _engine = create_engine(connection_str, echo=False)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         # Make sure the schema is clean\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       _engine.execute(SQL_DOWN)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/conftest.py:41: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn(*args, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3261: in execute\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     connection = self.connect(close_with_result=True)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3320: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._connection_cls(self, close_with_result=close_with_result)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:96: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     else engine.raw_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3399: in raw_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._wrap_pool_connect(self.pool.connect, _connection)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3370: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     e, dialect, self\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2204: in _handle_dbapi_exception_noconnection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     sqlalchemy_exception, with_traceback=exc_info[2], from_=e\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _______________________ ERROR at setup of test_arg_first _______________________\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | self = Engine(postgresql://nebulo_user:***@localhost:4442/nebulo_db)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | fn = <bound method Pool.connect of <sqlalchemy.pool.impl.QueuePool object at 0x7ffa35060110>>\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def _wrap_pool_connect(self, fn, connection):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dialect = self.dialect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         try:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >           return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | The above exception was the direct cause of the following exception:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_str = 'postgresql://nebulo_user:password@localhost:4442/nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     @pytest.fixture(scope=\"session\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def engine(connection_str: str):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\" SQLAlchemy engine \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         _engine = create_engine(connection_str, echo=False)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         # Make sure the schema is clean\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       _engine.execute(SQL_DOWN)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/conftest.py:41: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn(*args, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3261: in execute\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     connection = self.connect(close_with_result=True)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3320: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._connection_cls(self, close_with_result=close_with_result)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:96: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     else engine.raw_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3399: in raw_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._wrap_pool_connect(self.pool.connect, _connection)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3370: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     e, dialect, self\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2204: in _handle_dbapi_exception_noconnection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     sqlalchemy_exception, with_traceback=exc_info[2], from_=e\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ____________________ ERROR at setup of test_query_one_field ____________________\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | self = Engine(postgresql://nebulo_user:***@localhost:4442/nebulo_db)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | fn = <bound method Pool.connect of <sqlalchemy.pool.impl.QueuePool object at 0x7ffa35060110>>\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def _wrap_pool_connect(self, fn, connection):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dialect = self.dialect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         try:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >           return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | The above exception was the direct cause of the following exception:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_str = 'postgresql://nebulo_user:password@localhost:4442/nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     @pytest.fixture(scope=\"session\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def engine(connection_str: str):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\" SQLAlchemy engine \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         _engine = create_engine(connection_str, echo=False)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         # Make sure the schema is clean\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       _engine.execute(SQL_DOWN)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/conftest.py:41: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn(*args, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3261: in execute\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     connection = self.connect(close_with_result=True)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3320: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._connection_cls(self, close_with_result=close_with_result)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:96: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     else engine.raw_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3399: in raw_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._wrap_pool_connect(self.pool.connect, _connection)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3370: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     e, dialect, self\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2204: in _handle_dbapi_exception_noconnection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     sqlalchemy_exception, with_traceback=exc_info[2], from_=e\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _________________ ERROR at setup of test_query_multiple_fields _________________\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | self = Engine(postgresql://nebulo_user:***@localhost:4442/nebulo_db)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | fn = <bound method Pool.connect of <sqlalchemy.pool.impl.QueuePool object at 0x7ffa35060110>>\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def _wrap_pool_connect(self, fn, connection):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dialect = self.dialect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         try:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >           return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | The above exception was the direct cause of the following exception:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_str = 'postgresql://nebulo_user:password@localhost:4442/nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     @pytest.fixture(scope=\"session\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def engine(connection_str: str):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\" SQLAlchemy engine \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         _engine = create_engine(connection_str, echo=False)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         # Make sure the schema is clean\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       _engine.execute(SQL_DOWN)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/conftest.py:41: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn(*args, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3261: in execute\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     connection = self.connect(close_with_result=True)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3320: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._connection_cls(self, close_with_result=close_with_result)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:96: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     else engine.raw_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3399: in raw_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._wrap_pool_connect(self.pool.connect, _connection)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3370: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     e, dialect, self\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2204: in _handle_dbapi_exception_noconnection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     sqlalchemy_exception, with_traceback=exc_info[2], from_=e\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ___________________ ERROR at setup of test_query_one_to_many ___________________\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | self = Engine(postgresql://nebulo_user:***@localhost:4442/nebulo_db)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | fn = <bound method Pool.connect of <sqlalchemy.pool.impl.QueuePool object at 0x7ffa35060110>>\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def _wrap_pool_connect(self, fn, connection):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dialect = self.dialect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         try:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >           return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | The above exception was the direct cause of the following exception:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_str = 'postgresql://nebulo_user:password@localhost:4442/nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     @pytest.fixture(scope=\"session\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def engine(connection_str: str):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\" SQLAlchemy engine \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         _engine = create_engine(connection_str, echo=False)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         # Make sure the schema is clean\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       _engine.execute(SQL_DOWN)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/conftest.py:41: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn(*args, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3261: in execute\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     connection = self.connect(close_with_result=True)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3320: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._connection_cls(self, close_with_result=close_with_result)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:96: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     else engine.raw_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3399: in raw_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._wrap_pool_connect(self.pool.connect, _connection)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3370: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     e, dialect, self\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2204: in _handle_dbapi_exception_noconnection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     sqlalchemy_exception, with_traceback=exc_info[2], from_=e\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ___________________ ERROR at setup of test_query_many_to_one ___________________\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | self = Engine(postgresql://nebulo_user:***@localhost:4442/nebulo_db)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | fn = <bound method Pool.connect of <sqlalchemy.pool.impl.QueuePool object at 0x7ffa35060110>>\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def _wrap_pool_connect(self, fn, connection):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dialect = self.dialect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         try:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >           return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | The above exception was the direct cause of the following exception:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_str = 'postgresql://nebulo_user:password@localhost:4442/nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     @pytest.fixture(scope=\"session\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def engine(connection_str: str):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\" SQLAlchemy engine \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         _engine = create_engine(connection_str, echo=False)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         # Make sure the schema is clean\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       _engine.execute(SQL_DOWN)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/conftest.py:41: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn(*args, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3261: in execute\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     connection = self.connect(close_with_result=True)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3320: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._connection_cls(self, close_with_result=close_with_result)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:96: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     else engine.raw_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3399: in raw_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._wrap_pool_connect(self.pool.connect, _connection)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3370: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     e, dialect, self\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2204: in _handle_dbapi_exception_noconnection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     sqlalchemy_exception, with_traceback=exc_info[2], from_=e\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _____________________ ERROR at setup of test_jwt_function ______________________\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | self = Engine(postgresql://nebulo_user:***@localhost:4442/nebulo_db)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | fn = <bound method Pool.connect of <sqlalchemy.pool.impl.QueuePool object at 0x7ffa35060110>>\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def _wrap_pool_connect(self, fn, connection):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dialect = self.dialect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         try:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >           return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | The above exception was the direct cause of the following exception:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_str = 'postgresql://nebulo_user:password@localhost:4442/nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     @pytest.fixture(scope=\"session\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def engine(connection_str: str):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\" SQLAlchemy engine \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         _engine = create_engine(connection_str, echo=False)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         # Make sure the schema is clean\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       _engine.execute(SQL_DOWN)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/conftest.py:41: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn(*args, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3261: in execute\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     connection = self.connect(close_with_result=True)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3320: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._connection_cls(self, close_with_result=close_with_result)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:96: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     else engine.raw_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3399: in raw_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._wrap_pool_connect(self.pool.connect, _connection)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3370: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     e, dialect, self\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2204: in _handle_dbapi_exception_noconnection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     sqlalchemy_exception, with_traceback=exc_info[2], from_=e\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | __________________ ERROR at setup of test_round_trip_node_id ___________________\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | self = Engine(postgresql://nebulo_user:***@localhost:4442/nebulo_db)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | fn = <bound method Pool.connect of <sqlalchemy.pool.impl.QueuePool object at 0x7ffa35060110>>\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def _wrap_pool_connect(self, fn, connection):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dialect = self.dialect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         try:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >           return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | The above exception was the direct cause of the following exception:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_str = 'postgresql://nebulo_user:password@localhost:4442/nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     @pytest.fixture(scope=\"session\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def engine(connection_str: str):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\" SQLAlchemy engine \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         _engine = create_engine(connection_str, echo=False)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         # Make sure the schema is clean\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       _engine.execute(SQL_DOWN)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/conftest.py:41: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn(*args, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3261: in execute\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     connection = self.connect(close_with_result=True)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3320: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._connection_cls(self, close_with_result=close_with_result)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:96: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     else engine.raw_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3399: in raw_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._wrap_pool_connect(self.pool.connect, _connection)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3370: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     e, dialect, self\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2204: in _handle_dbapi_exception_noconnection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     sqlalchemy_exception, with_traceback=exc_info[2], from_=e\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ____________________ ERROR at setup of test_invalid_node_id ____________________\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | self = Engine(postgresql://nebulo_user:***@localhost:4442/nebulo_db)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | fn = <bound method Pool.connect of <sqlalchemy.pool.impl.QueuePool object at 0x7ffa35060110>>\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def _wrap_pool_connect(self, fn, connection):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dialect = self.dialect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         try:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >           return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | The above exception was the direct cause of the following exception:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_str = 'postgresql://nebulo_user:password@localhost:4442/nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     @pytest.fixture(scope=\"session\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def engine(connection_str: str):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\" SQLAlchemy engine \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         _engine = create_engine(connection_str, echo=False)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         # Make sure the schema is clean\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       _engine.execute(SQL_DOWN)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/conftest.py:41: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn(*args, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3261: in execute\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     connection = self.connect(close_with_result=True)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3320: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._connection_cls(self, close_with_result=close_with_result)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:96: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     else engine.raw_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3399: in raw_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._wrap_pool_connect(self.pool.connect, _connection)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3370: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     e, dialect, self\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2204: in _handle_dbapi_exception_noconnection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     sqlalchemy_exception, with_traceback=exc_info[2], from_=e\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ______________________ ERROR at setup of test_get_cursor _______________________\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | self = Engine(postgresql://nebulo_user:***@localhost:4442/nebulo_db)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | fn = <bound method Pool.connect of <sqlalchemy.pool.impl.QueuePool object at 0x7ffa35060110>>\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def _wrap_pool_connect(self, fn, connection):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dialect = self.dialect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         try:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >           return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | The above exception was the direct cause of the following exception:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_str = 'postgresql://nebulo_user:password@localhost:4442/nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     @pytest.fixture(scope=\"session\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def engine(connection_str: str):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\" SQLAlchemy engine \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         _engine = create_engine(connection_str, echo=False)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         # Make sure the schema is clean\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       _engine.execute(SQL_DOWN)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/conftest.py:41: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn(*args, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3261: in execute\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     connection = self.connect(close_with_result=True)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3320: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._connection_cls(self, close_with_result=close_with_result)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:96: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     else engine.raw_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3399: in raw_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._wrap_pool_connect(self.pool.connect, _connection)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3370: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     e, dialect, self\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2204: in _handle_dbapi_exception_noconnection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     sqlalchemy_exception, with_traceback=exc_info[2], from_=e\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ____________________ ERROR at setup of test_invalid_cursor _____________________\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | self = Engine(postgresql://nebulo_user:***@localhost:4442/nebulo_db)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | fn = <bound method Pool.connect of <sqlalchemy.pool.impl.QueuePool object at 0x7ffa35060110>>\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def _wrap_pool_connect(self, fn, connection):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dialect = self.dialect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         try:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >           return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | The above exception was the direct cause of the following exception:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_str = 'postgresql://nebulo_user:password@localhost:4442/nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     @pytest.fixture(scope=\"session\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def engine(connection_str: str):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\" SQLAlchemy engine \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         _engine = create_engine(connection_str, echo=False)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         # Make sure the schema is clean\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       _engine.execute(SQL_DOWN)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/conftest.py:41: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn(*args, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3261: in execute\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     connection = self.connect(close_with_result=True)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3320: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._connection_cls(self, close_with_result=close_with_result)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:96: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     else engine.raw_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3399: in raw_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._wrap_pool_connect(self.pool.connect, _connection)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3370: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     e, dialect, self\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2204: in _handle_dbapi_exception_noconnection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     sqlalchemy_exception, with_traceback=exc_info[2], from_=e\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ________________ ERROR at setup of test_retrieve_1_after_cursor ________________\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | self = Engine(postgresql://nebulo_user:***@localhost:4442/nebulo_db)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | fn = <bound method Pool.connect of <sqlalchemy.pool.impl.QueuePool object at 0x7ffa35060110>>\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def _wrap_pool_connect(self, fn, connection):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dialect = self.dialect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         try:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >           return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | The above exception was the direct cause of the following exception:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_str = 'postgresql://nebulo_user:password@localhost:4442/nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     @pytest.fixture(scope=\"session\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def engine(connection_str: str):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\" SQLAlchemy engine \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         _engine = create_engine(connection_str, echo=False)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         # Make sure the schema is clean\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       _engine.execute(SQL_DOWN)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/conftest.py:41: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn(*args, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3261: in execute\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     connection = self.connect(close_with_result=True)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3320: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._connection_cls(self, close_with_result=close_with_result)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:96: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     else engine.raw_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3399: in raw_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._wrap_pool_connect(self.pool.connect, _connection)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3370: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     e, dialect, self\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2204: in _handle_dbapi_exception_noconnection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     sqlalchemy_exception, with_traceback=exc_info[2], from_=e\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _______________ ERROR at setup of test_retrieve_1_before_cursor ________________\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | self = Engine(postgresql://nebulo_user:***@localhost:4442/nebulo_db)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | fn = <bound method Pool.connect of <sqlalchemy.pool.impl.QueuePool object at 0x7ffa35060110>>\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def _wrap_pool_connect(self, fn, connection):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dialect = self.dialect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         try:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >           return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | The above exception was the direct cause of the following exception:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_str = 'postgresql://nebulo_user:password@localhost:4442/nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     @pytest.fixture(scope=\"session\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def engine(connection_str: str):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\" SQLAlchemy engine \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         _engine = create_engine(connection_str, echo=False)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         # Make sure the schema is clean\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       _engine.execute(SQL_DOWN)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/conftest.py:41: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn(*args, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3261: in execute\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     connection = self.connect(close_with_result=True)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3320: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._connection_cls(self, close_with_result=close_with_result)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:96: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     else engine.raw_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3399: in raw_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._wrap_pool_connect(self.pool.connect, _connection)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3370: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     e, dialect, self\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2204: in _handle_dbapi_exception_noconnection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     sqlalchemy_exception, with_traceback=exc_info[2], from_=e\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | __________________ ERROR at setup of test_first_without_after __________________\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | self = Engine(postgresql://nebulo_user:***@localhost:4442/nebulo_db)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | fn = <bound method Pool.connect of <sqlalchemy.pool.impl.QueuePool object at 0x7ffa35060110>>\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def _wrap_pool_connect(self, fn, connection):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dialect = self.dialect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         try:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >           return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | The above exception was the direct cause of the following exception:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_str = 'postgresql://nebulo_user:password@localhost:4442/nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     @pytest.fixture(scope=\"session\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def engine(connection_str: str):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\" SQLAlchemy engine \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         _engine = create_engine(connection_str, echo=False)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         # Make sure the schema is clean\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       _engine.execute(SQL_DOWN)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/conftest.py:41: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn(*args, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3261: in execute\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     connection = self.connect(close_with_result=True)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3320: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._connection_cls(self, close_with_result=close_with_result)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:96: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     else engine.raw_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3399: in raw_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._wrap_pool_connect(self.pool.connect, _connection)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3370: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     e, dialect, self\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2204: in _handle_dbapi_exception_noconnection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     sqlalchemy_exception, with_traceback=exc_info[2], from_=e\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | __________________ ERROR at setup of test_last_without_before __________________\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | self = Engine(postgresql://nebulo_user:***@localhost:4442/nebulo_db)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | fn = <bound method Pool.connect of <sqlalchemy.pool.impl.QueuePool object at 0x7ffa35060110>>\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def _wrap_pool_connect(self, fn, connection):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dialect = self.dialect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         try:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >           return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | The above exception was the direct cause of the following exception:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_str = 'postgresql://nebulo_user:password@localhost:4442/nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     @pytest.fixture(scope=\"session\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def engine(connection_str: str):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\" SQLAlchemy engine \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         _engine = create_engine(connection_str, echo=False)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         # Make sure the schema is clean\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       _engine.execute(SQL_DOWN)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/conftest.py:41: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn(*args, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3261: in execute\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     connection = self.connect(close_with_result=True)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3320: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._connection_cls(self, close_with_result=close_with_result)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:96: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     else engine.raw_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3399: in raw_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._wrap_pool_connect(self.pool.connect, _connection)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3370: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     e, dialect, self\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2204: in _handle_dbapi_exception_noconnection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     sqlalchemy_exception, with_traceback=exc_info[2], from_=e\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ___________________ ERROR at setup of test_pagination_order ____________________\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | self = Engine(postgresql://nebulo_user:***@localhost:4442/nebulo_db)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | fn = <bound method Pool.connect of <sqlalchemy.pool.impl.QueuePool object at 0x7ffa35060110>>\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def _wrap_pool_connect(self, fn, connection):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dialect = self.dialect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         try:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >           return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | The above exception was the direct cause of the following exception:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_str = 'postgresql://nebulo_user:password@localhost:4442/nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     @pytest.fixture(scope=\"session\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def engine(connection_str: str):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\" SQLAlchemy engine \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         _engine = create_engine(connection_str, echo=False)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         # Make sure the schema is clean\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       _engine.execute(SQL_DOWN)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/conftest.py:41: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn(*args, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3261: in execute\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     connection = self.connect(close_with_result=True)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3320: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._connection_cls(self, close_with_result=close_with_result)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:96: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     else engine.raw_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3399: in raw_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._wrap_pool_connect(self.pool.connect, _connection)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3370: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     e, dialect, self\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2204: in _handle_dbapi_exception_noconnection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     sqlalchemy_exception, with_traceback=exc_info[2], from_=e\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _______________ ERROR at setup of test_invalid_pagination_params _______________\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | self = Engine(postgresql://nebulo_user:***@localhost:4442/nebulo_db)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | fn = <bound method Pool.connect of <sqlalchemy.pool.impl.QueuePool object at 0x7ffa35060110>>\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def _wrap_pool_connect(self, fn, connection):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dialect = self.dialect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         try:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >           return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | The above exception was the direct cause of the following exception:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_str = 'postgresql://nebulo_user:password@localhost:4442/nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     @pytest.fixture(scope=\"session\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def engine(connection_str: str):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\" SQLAlchemy engine \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         _engine = create_engine(connection_str, echo=False)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         # Make sure the schema is clean\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       _engine.execute(SQL_DOWN)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/conftest.py:41: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn(*args, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3261: in execute\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     connection = self.connect(close_with_result=True)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3320: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._connection_cls(self, close_with_result=close_with_result)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:96: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     else engine.raw_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3399: in raw_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._wrap_pool_connect(self.pool.connect, _connection)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3370: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     e, dialect, self\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2204: in _handle_dbapi_exception_noconnection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     sqlalchemy_exception, with_traceback=exc_info[2], from_=e\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _________________ ERROR at setup of test_reflect_fkey_comment __________________\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | self = Engine(postgresql://nebulo_user:***@localhost:4442/nebulo_db)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | fn = <bound method Pool.connect of <sqlalchemy.pool.impl.QueuePool object at 0x7ffa35060110>>\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def _wrap_pool_connect(self, fn, connection):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dialect = self.dialect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         try:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >           return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | The above exception was the direct cause of the following exception:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_str = 'postgresql://nebulo_user:password@localhost:4442/nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     @pytest.fixture(scope=\"session\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def engine(connection_str: str):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\" SQLAlchemy engine \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         _engine = create_engine(connection_str, echo=False)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         # Make sure the schema is clean\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       _engine.execute(SQL_DOWN)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/conftest.py:41: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn(*args, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3261: in execute\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     connection = self.connect(close_with_result=True)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3320: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._connection_cls(self, close_with_result=close_with_result)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:96: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     else engine.raw_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3399: in raw_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._wrap_pool_connect(self.pool.connect, _connection)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3370: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     e, dialect, self\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2204: in _handle_dbapi_exception_noconnection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     sqlalchemy_exception, with_traceback=exc_info[2], from_=e\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ____________ ERROR at setup of test_reflect_fkey_comment_to_schema _____________\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | self = Engine(postgresql://nebulo_user:***@localhost:4442/nebulo_db)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | fn = <bound method Pool.connect of <sqlalchemy.pool.impl.QueuePool object at 0x7ffa35060110>>\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def _wrap_pool_connect(self, fn, connection):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dialect = self.dialect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         try:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >           return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | The above exception was the direct cause of the following exception:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_str = 'postgresql://nebulo_user:password@localhost:4442/nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     @pytest.fixture(scope=\"session\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def engine(connection_str: str):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\" SQLAlchemy engine \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         _engine = create_engine(connection_str, echo=False)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         # Make sure the schema is clean\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       _engine.execute(SQL_DOWN)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/conftest.py:41: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn(*args, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3261: in execute\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     connection = self.connect(close_with_result=True)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3320: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._connection_cls(self, close_with_result=close_with_result)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:96: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     else engine.raw_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3399: in raw_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._wrap_pool_connect(self.pool.connect, _connection)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3370: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     e, dialect, self\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2204: in _handle_dbapi_exception_noconnection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     sqlalchemy_exception, with_traceback=exc_info[2], from_=e\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _____________________ ERROR at setup of test_reflect_types _____________________\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | self = Engine(postgresql://nebulo_user:***@localhost:4442/nebulo_db)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | fn = <bound method Pool.connect of <sqlalchemy.pool.impl.QueuePool object at 0x7ffa35060110>>\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def _wrap_pool_connect(self, fn, connection):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dialect = self.dialect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         try:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >           return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | The above exception was the direct cause of the following exception:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_str = 'postgresql://nebulo_user:password@localhost:4442/nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     @pytest.fixture(scope=\"session\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def engine(connection_str: str):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\" SQLAlchemy engine \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         _engine = create_engine(connection_str, echo=False)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         # Make sure the schema is clean\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       _engine.execute(SQL_DOWN)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/conftest.py:41: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn(*args, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3261: in execute\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     connection = self.connect(close_with_result=True)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3320: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._connection_cls(self, close_with_result=close_with_result)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:96: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     else engine.raw_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3399: in raw_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._wrap_pool_connect(self.pool.connect, _connection)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3370: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     e, dialect, self\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2204: in _handle_dbapi_exception_noconnection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     sqlalchemy_exception, with_traceback=exc_info[2], from_=e\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | __________________ ERROR at setup of test_reflect_gql_boolean __________________\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | self = Engine(postgresql://nebulo_user:***@localhost:4442/nebulo_db)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | fn = <bound method Pool.connect of <sqlalchemy.pool.impl.QueuePool object at 0x7ffa35060110>>\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def _wrap_pool_connect(self, fn, connection):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dialect = self.dialect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         try:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >           return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | The above exception was the direct cause of the following exception:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_str = 'postgresql://nebulo_user:password@localhost:4442/nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     @pytest.fixture(scope=\"session\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def engine(connection_str: str):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\" SQLAlchemy engine \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         _engine = create_engine(connection_str, echo=False)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         # Make sure the schema is clean\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       _engine.execute(SQL_DOWN)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/conftest.py:41: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn(*args, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3261: in execute\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     connection = self.connect(close_with_result=True)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3320: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._connection_cls(self, close_with_result=close_with_result)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:96: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     else engine.raw_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3399: in raw_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._wrap_pool_connect(self.pool.connect, _connection)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3370: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     e, dialect, self\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2204: in _handle_dbapi_exception_noconnection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     sqlalchemy_exception, with_traceback=exc_info[2], from_=e\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _____________ ERROR at setup of test_reflect_column_name_directive _____________\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | self = Engine(postgresql://nebulo_user:***@localhost:4442/nebulo_db)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | fn = <bound method Pool.connect of <sqlalchemy.pool.impl.QueuePool object at 0x7ffa35060110>>\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def _wrap_pool_connect(self, fn, connection):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dialect = self.dialect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         try:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >           return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | The above exception was the direct cause of the following exception:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_str = 'postgresql://nebulo_user:password@localhost:4442/nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     @pytest.fixture(scope=\"session\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def engine(connection_str: str):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\" SQLAlchemy engine \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         _engine = create_engine(connection_str, echo=False)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         # Make sure the schema is clean\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       _engine.execute(SQL_DOWN)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/conftest.py:41: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn(*args, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3261: in execute\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     connection = self.connect(close_with_result=True)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3320: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._connection_cls(self, close_with_result=close_with_result)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:96: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     else engine.raw_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3399: in raw_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._wrap_pool_connect(self.pool.connect, _connection)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3370: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     e, dialect, self\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2204: in _handle_dbapi_exception_noconnection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     sqlalchemy_exception, with_traceback=exc_info[2], from_=e\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _____________ ERROR at setup of test_reflect_table_name_directive ______________\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | self = Engine(postgresql://nebulo_user:***@localhost:4442/nebulo_db)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | fn = <bound method Pool.connect of <sqlalchemy.pool.impl.QueuePool object at 0x7ffa35060110>>\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def _wrap_pool_connect(self, fn, connection):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dialect = self.dialect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         try:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >           return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | The above exception was the direct cause of the following exception:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_str = 'postgresql://nebulo_user:password@localhost:4442/nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     @pytest.fixture(scope=\"session\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def engine(connection_str: str):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\" SQLAlchemy engine \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         _engine = create_engine(connection_str, echo=False)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         # Make sure the schema is clean\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       _engine.execute(SQL_DOWN)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/conftest.py:41: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn(*args, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3261: in execute\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     connection = self.connect(close_with_result=True)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3320: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._connection_cls(self, close_with_result=close_with_result)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:96: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     else engine.raw_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3399: in raw_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._wrap_pool_connect(self.pool.connect, _connection)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3370: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     e, dialect, self\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2204: in _handle_dbapi_exception_noconnection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     sqlalchemy_exception, with_traceback=exc_info[2], from_=e\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ____________________ ERROR at setup of test_update_mutation ____________________\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | self = Engine(postgresql://nebulo_user:***@localhost:4442/nebulo_db)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | fn = <bound method Pool.connect of <sqlalchemy.pool.impl.QueuePool object at 0x7ffa35060110>>\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def _wrap_pool_connect(self, fn, connection):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dialect = self.dialect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         try:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >           return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | The above exception was the direct cause of the following exception:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_str = 'postgresql://nebulo_user:password@localhost:4442/nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     @pytest.fixture(scope=\"session\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def engine(connection_str: str):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\" SQLAlchemy engine \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         _engine = create_engine(connection_str, echo=False)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         # Make sure the schema is clean\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       _engine.execute(SQL_DOWN)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/conftest.py:41: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn(*args, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3261: in execute\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     connection = self.connect(close_with_result=True)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3320: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._connection_cls(self, close_with_result=close_with_result)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:96: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     else engine.raw_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3399: in raw_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._wrap_pool_connect(self.pool.connect, _connection)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3370: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     e, dialect, self\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2204: in _handle_dbapi_exception_noconnection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     sqlalchemy_exception, with_traceback=exc_info[2], from_=e\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _____________________ ERROR at setup of test_reflect_view ______________________\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | self = Engine(postgresql://nebulo_user:***@localhost:4442/nebulo_db)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | fn = <bound method Pool.connect of <sqlalchemy.pool.impl.QueuePool object at 0x7ffa35060110>>\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def _wrap_pool_connect(self, fn, connection):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dialect = self.dialect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         try:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >           return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | The above exception was the direct cause of the following exception:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_str = 'postgresql://nebulo_user:password@localhost:4442/nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     @pytest.fixture(scope=\"session\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def engine(connection_str: str):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\" SQLAlchemy engine \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         _engine = create_engine(connection_str, echo=False)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         # Make sure the schema is clean\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       _engine.execute(SQL_DOWN)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/conftest.py:41: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn(*args, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3261: in execute\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     connection = self.connect(close_with_result=True)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3320: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._connection_cls(self, close_with_result=close_with_result)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:96: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     else engine.raw_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3399: in raw_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._wrap_pool_connect(self.pool.connect, _connection)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3370: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     e, dialect, self\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2204: in _handle_dbapi_exception_noconnection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     sqlalchemy_exception, with_traceback=exc_info[2], from_=e\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ______________________ ERROR at setup of test_query_view _______________________\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | self = Engine(postgresql://nebulo_user:***@localhost:4442/nebulo_db)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | fn = <bound method Pool.connect of <sqlalchemy.pool.impl.QueuePool object at 0x7ffa35060110>>\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def _wrap_pool_connect(self, fn, connection):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dialect = self.dialect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         try:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >           return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       psycopg2.OperationalError: connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | The above exception was the direct cause of the following exception:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_str = 'postgresql://nebulo_user:password@localhost:4442/nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     @pytest.fixture(scope=\"session\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def engine(connection_str: str):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\" SQLAlchemy engine \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         _engine = create_engine(connection_str, echo=False)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         # Make sure the schema is clean\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       _engine.execute(SQL_DOWN)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | src/test/conftest.py:41: \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/deprecations.py:468: in warned\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn(*args, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3261: in execute\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     connection = self.connect(close_with_result=True)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3320: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._connection_cls(self, close_with_result=close_with_result)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:96: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     else engine.raw_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3399: in raw_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._wrap_pool_connect(self.pool.connect, _connection)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3370: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     e, dialect, self\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:2204: in _handle_dbapi_exception_noconnection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     sqlalchemy_exception, with_traceback=exc_info[2], from_=e\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/base.py:3366: in _wrap_pool_connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return fn()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:327: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionFairy._checkout(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:894: in _checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     fairy = _ConnectionRecord.checkout(pool)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:493: in checkout\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     rec = pool._do_get()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:146: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self._dec_overflow()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/impl.py:143: in _do_get\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self._create_connection()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:273: in _create_connection\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return _ConnectionRecord(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:388: in __init__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.__connect()\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:691: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     pool.logger.debug(\"Error on connect(): %s\", e)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/langhelpers.py:72: in __exit__\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     with_traceback=exc_tb,\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/util/compat.py:211: in raise_\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     raise exception\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/pool/base.py:686: in __connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     self.dbapi_connection = connection = pool._invoke_creator(self)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/create.py:574: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return dialect.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/sqlalchemy/engine/default.py:598: in connect\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     return self.dbapi.connect(*cargs, **cparams)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | dsn = 'host=localhost user=nebulo_user password=password port=4442 dbname=nebulo_db'\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | connection_factory = None, cursor_factory = None\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwargs = {'database': 'nebulo_db', 'host': 'localhost', 'password': 'password', 'port': 4442, ...}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Create a new database connection.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         The connection parameters can be specified as a string:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(\"dbname=test user=postgres password=secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         or using a set of keyword arguments:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             conn = psycopg2.connect(database=\"test\", user=\"postgres\", password=\"secret\")\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Or as a mix of both. The basic connection parameters are:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *dbname*: the database name\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *database*: the database name (only as keyword argument)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *user*: user name used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *password*: password used to authenticate\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *host*: database host address (defaults to UNIX socket if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         - *port*: connection port number (defaults to 5432 if not provided)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *connection_factory* parameter a different class or connections\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         factory can be specified. It should be a callable object taking a dsn\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         argument.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using the *cursor_factory* parameter, a new default cursor factory will be\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         used by cursor().\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Using *async*=True an asynchronous connection will be created. *async_* is\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         a valid alias (for Python versions where ``async`` is a keyword).\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         Any other keyword parameter will be passed to the underlying client\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         library: the list of supported parameters depends on the library version.\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         \"\"\"\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         kwasync = {}\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async'] = kwargs.pop('async')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         if 'async_' in kwargs:\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |             kwasync['async_'] = kwargs.pop('async_')\n[b6af6951-5707-4c08-bf33-42342a826589/build]   |     \n[b6af6951-5707-4c08-bf33-42342a826589/build]   |         dsn = _ext.make_dsn(dsn, **kwargs)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | >       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | E       (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/psycopg2/__init__.py:122: OperationalError\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | - generated xml file: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/olirice-nebulo/report.xml -\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ---------- coverage: platform linux, python 3.7.11-final-0 -----------\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | Coverage XML written to file coverage.xml\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | =========================== short test summary info ============================\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ERROR src/test/app_test.py::test_app_has_route - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ERROR src/test/app_test.py::test_app_serves_graphiql - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ERROR src/test/app_test.py::test_app_serves_graphql_query_from_application_json - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ERROR src/test/app_test.py::test_app_serves_mutation_function - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ERROR src/test/cli_test.py::test_cli_schema_dump - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ERROR src/test/condition_test.py::test_query_with_int_condition - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ERROR src/test/condition_test.py::test_query_with_string_condition - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ERROR src/test/create_test.py::test_create_mutation - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ERROR src/test/delete_test.py::test_delete_mutation - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ERROR src/test/exclude_column_test.py::test_reflect_function - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ERROR src/test/exclude_fkey_test.py::test_fkey_comment_exclude_one - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ERROR src/test/exclude_table_test.py::test_exclude_table - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ERROR src/test/function_returns_row_test.py::test_reflect_function_returning_row - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ERROR src/test/function_returns_row_test.py::test_integration_function - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ERROR src/test/function_test.py::test_reflect_function - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ERROR src/test/function_test.py::test_call_function - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ERROR src/test/function_test.py::test_integration_function - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ERROR src/test/integration_array_test.py::test_query_multiple_fields - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ERROR src/test/integration_composite_test.py::test_query_multiple_fields - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ERROR src/test/integration_enum_test.py::test_query_multiple_fields - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ERROR src/test/integration_many_basic_test.py::test_query_multiple_fields - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ERROR src/test/integration_many_basic_test.py::test_arg_first - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ERROR src/test/integration_one_basic_test.py::test_query_one_field - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ERROR src/test/integration_one_basic_test.py::test_query_multiple_fields - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ERROR src/test/integration_relationship_test.py::test_query_one_to_many - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ERROR src/test/integration_relationship_test.py::test_query_many_to_one - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ERROR src/test/jwt_function_test.py::test_jwt_function - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ERROR src/test/node_id_test.py::test_round_trip_node_id - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ERROR src/test/node_id_test.py::test_invalid_node_id - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ERROR src/test/pagination_test.py::test_get_cursor - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ERROR src/test/pagination_test.py::test_invalid_cursor - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ERROR src/test/pagination_test.py::test_retrieve_1_after_cursor - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ERROR src/test/pagination_test.py::test_retrieve_1_before_cursor - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ERROR src/test/pagination_test.py::test_first_without_after - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ERROR src/test/pagination_test.py::test_last_without_before - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ERROR src/test/pagination_test.py::test_pagination_order - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ERROR src/test/pagination_test.py::test_invalid_pagination_params - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ERROR src/test/reflect_constraint_comment_test.py::test_reflect_fkey_comment - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ERROR src/test/reflect_constraint_comment_test.py::test_reflect_fkey_comment_to_schema - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ERROR src/test/reflection_test.py::test_reflect_types - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ERROR src/test/reflection_test.py::test_reflect_gql_boolean - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ERROR src/test/rename_column_test.py::test_reflect_column_name_directive - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ERROR src/test/rename_table_test.py::test_reflect_table_name_directive - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ERROR src/test/update_test.py::test_update_mutation - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ERROR src/test/view_test.py::test_reflect_view - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ERROR src/test/view_test.py::test_query_view - sqlalchemy.exc.OperationalError: (psycopg2.OperationalError) connection to server at \"localhost\" (127.0.0.1), port 4442 failed: Connection refused\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \tIs the server running on that host and accepting TCP/IP connections?\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | \n[b6af6951-5707-4c08-bf33-42342a826589/build]   | (Background on this error at: https://sqlalche.me/e/14/e3q8)\n[b6af6951-5707-4c08-bf33-42342a826589/build]   | ======================== 3 passed, 46 errors in 40.91s =========================\n[b6af6951-5707-4c08-bf33-42342a826589/build]   \u274c  Failure - Main Run Tests with Coverage\n[b6af6951-5707-4c08-bf33-42342a826589/build] exitcode '1': failure\n[b6af6951-5707-4c08-bf33-42342a826589/build] \ud83c\udfc1  Job failed\n",
        "stderr": "Error: Job 'build' failed\n",
        "workflow": "/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/olirice-nebulo/.github/workflows/test-crawler.yml",
        "build_tool": "pytest",
        "elapsed_time": 321.84745931625366
    }
}