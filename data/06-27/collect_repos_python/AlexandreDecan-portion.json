{
    "repository": "AlexandreDecan/portion",
    "stars": 394,
    "language": "python",
    "size": 407,
    "clone_url": "https://github.com/AlexandreDecan/portion.git",
    "timestamp": "2023-06-28T12:46:06.612956Z",
    "clone_success": true,
    "number_of_actions": 2,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_build_tools": [
        "pytest",
        "unknown"
    ],
    "actions_test_build_tools": [
        "pytest"
    ],
    "actions_run": {
        "failed": true,
        "tests": [
            {
                "classname": "tests.test_const.TestBounds",
                "name": "test_comparisons",
                "time": 0.018,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_const.TestBounds",
                "name": "test_non_Boolean",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_const.TestBounds",
                "name": "test_value",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_const.TestInfinities",
                "name": "test_pinf_is_greater",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_const.TestInfinities",
                "name": "test_ninf_is_lower",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_const.TestInfinities",
                "name": "test_equalities",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_const.TestInfinities",
                "name": "test_infinities_are_singletons",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_const.TestInfinities",
                "name": "test_infinities_are_hashable",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dict.TestIntervalDict",
                "name": "test_with_single_values",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dict.TestIntervalDict",
                "name": "test_with_intervals",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dict.TestIntervalDict",
                "name": "test_set",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dict.TestIntervalDict",
                "name": "test_delete_value",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dict.TestIntervalDict",
                "name": "test_delete_missing_value",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dict.TestIntervalDict",
                "name": "test_delete_interval",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dict.TestIntervalDict",
                "name": "test_delete_interval_out_of_bound",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dict.TestIntervalDict",
                "name": "test_delete_empty_interval",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dict.TestIntervalDict",
                "name": "test_setdefault_with_values",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dict.TestIntervalDict",
                "name": "test_setdefault_with_intervals",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dict.TestIntervalDict",
                "name": "test_iterators",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dict.TestIntervalDict",
                "name": "test_iterators_on_empty",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dict.TestIntervalDict",
                "name": "test_views",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dict.TestIntervalDict",
                "name": "test_issue_39",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dict.TestIntervalDict",
                "name": "test_combine_empty",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dict.TestIntervalDict",
                "name": "test_combine_nonempty",
                "time": 0.051,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dict.TestIntervalDict",
                "name": "test_containment",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dict.TestIntervalDict",
                "name": "test_or_ior",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dict.TestIntervalDict",
                "name": "test_repr",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dict.TestIntervalDict",
                "name": "test_pop_value",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dict.TestIntervalDict",
                "name": "test_pop_missing_value",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dict.TestIntervalDict",
                "name": "test_pop_interval",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dict.TestIntervalDict",
                "name": "test_popitem",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dict.TestIntervalDict",
                "name": "test_popitem_with_empty",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dict.TestIntervalDict",
                "name": "test_clear",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dict.TestIntervalDict",
                "name": "test_find",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dict.TestIntervalDict",
                "name": "test_find_on_unions",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dict.TestIntervalDict",
                "name": "test_copy",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dict.TestIntervalDict",
                "name": "test_copy_and_update",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dict.TestIntervalDict",
                "name": "test_update_with_intervaldict",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dict.TestIntervalDict",
                "name": "test_update_with_mapping",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dict.TestIntervalDict",
                "name": "test_update_with_iterable",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_dict.TestIntervalDict",
                "name": "test_as_dict",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_discrete.TestCreateAPI",
                "name": "test_type",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_discrete.TestCreateAPI",
                "name": "test_helper_types",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_discrete.TestCreateAPI",
                "name": "test_io",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_discrete.TestCreateAPI",
                "name": "test_dict_type",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_discrete.TestIntInterval",
                "name": "test_empty_and_singletons",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_discrete.TestIntInterval",
                "name": "test_merge",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_discrete.TestIntInterval",
                "name": "test_adjacent",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_discrete.TestCharInterval",
                "name": "test_empty_and_singletons",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_discrete.TestCharInterval",
                "name": "test_merge",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_doc",
                "name": "test_readme",
                "time": 0.049,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_func.TestIterate",
                "name": "test_default_parameters",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_func.TestIterate",
                "name": "test_empty_intervals",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_func.TestIterate",
                "name": "test_open_intervals",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_func.TestIterate",
                "name": "test_with_gaps",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_func.TestIterate",
                "name": "test_with_step",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_func.TestIterate",
                "name": "test_with_base",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_func.TestIterate",
                "name": "test_reversed_iteration",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_func.TestIterate",
                "name": "test_reversed_iteration_with_open_intervals",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestHelpers",
                "name": "test_bounds",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestHelpers",
                "name": "test_with_infinities",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestHelpers",
                "name": "test_empty",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestRepr",
                "name": "test_simple",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestRepr",
                "name": "test_infinities",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestRepr",
                "name": "test_empty",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestRepr",
                "name": "test_singleton",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestRepr",
                "name": "test_union",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestInterval",
                "name": "test_creation",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestInterval",
                "name": "test_creation_issue_19",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestInterval",
                "name": "test_bounds",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestInterval",
                "name": "test_bounds_on_empty",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestInterval",
                "name": "test_bounds_on_union",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestInterval",
                "name": "test_is_empty",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestInterval",
                "name": "test_hash_with_hashable",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestInterval",
                "name": "test_hash_with_unhashable",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestInterval",
                "name": "test_enclosure",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalReplace",
                "name": "test_replace_bounds",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalReplace",
                "name": "test_replace_values",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalReplace",
                "name": "test_replace_values_on_infinities",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalReplace",
                "name": "test_replace_with_union",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalReplace",
                "name": "test_replace_with_empty",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalApply",
                "name": "test_apply",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalApply",
                "name": "test_apply_on_unions",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalApply",
                "name": "test_apply_on_empty",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalApply",
                "name": "test_apply_with_incorrect_types",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalAdjacent",
                "name": "test_adjacent",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalAdjacent",
                "name": "test_reversed_adjacent",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalAdjacent",
                "name": "test_non_adjacent",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalAdjacent",
                "name": "test_overlapping",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalAdjacent",
                "name": "test_contained",
                "time": 0.007,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalAdjacent",
                "name": "test_same_bounds",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalAdjacent",
                "name": "test_empty",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalAdjacent",
                "name": "test_nonatomic_interval",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalOverlaps",
                "name": "test_overlaps",
                "time": 0.011,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalOverlaps",
                "name": "test_overlaps_with_nonoverlaping",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalOverlaps",
                "name": "test_overlaps_with_edge_cases",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalOverlaps",
                "name": "test_overlaps_with_empty",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalOverlaps",
                "name": "test_overlaps_with_itself",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalOverlaps",
                "name": "test_overlaps_with_incompatible_types",
                "time": 0.014,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalComparison",
                "name": "test_equalities[i10-i20-i30]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalComparison",
                "name": "test_equalities[i11-i21-i31]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalComparison",
                "name": "test_inequalities[i10-i20-i30]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalComparison",
                "name": "test_inequalities[i11-i21-i31]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalComparison",
                "name": "test_with_intervals",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalComparison",
                "name": "test_with_empty",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalComparison",
                "name": "test_with_empty_and_infinities",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalComparison",
                "name": "test_edge_cases",
                "time": 0.01,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalComparison",
                "name": "test_with_values",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalContainment",
                "name": "test_with_values",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalContainment",
                "name": "test_with_infinities",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalContainment",
                "name": "test_with_empty",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalContainment",
                "name": "test_with_intervals",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalContainment",
                "name": "test_with_unions",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalContainment",
                "name": "test_with_empty_intervals",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalContainment",
                "name": "test_proxy_method",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalContainment",
                "name": "test_issue_41",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalIntersection",
                "name": "test_with_itself",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalIntersection",
                "name": "test_with_adjacent",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalIntersection",
                "name": "test_with_containment",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalIntersection",
                "name": "test_with_overlap",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalIntersection",
                "name": "test_with_union",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalIntersection",
                "name": "test_empty",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalIntersection",
                "name": "test_proxy_method",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalIntersection",
                "name": "test_with_invalid_type",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalUnion",
                "name": "test_atomic",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalUnion",
                "name": "test_with_itself",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalUnion",
                "name": "test_with_containment",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalUnion",
                "name": "test_with_overlap",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalUnion",
                "name": "test_with_adjacent",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalUnion",
                "name": "test_with_disjoint",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalUnion",
                "name": "test_with_empty",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalUnion",
                "name": "test_issue_12",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalUnion",
                "name": "test_issue_13",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalUnion",
                "name": "test_issue_38",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalUnion",
                "name": "test_proxy_method",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalUnion",
                "name": "test_with_invalid_type",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalComplement",
                "name": "test_singleton",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalComplement",
                "name": "test_nonempty",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalComplement",
                "name": "test_union",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalComplement",
                "name": "test_identity[i0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalComplement",
                "name": "test_identity[i1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalComplement",
                "name": "test_identity[i2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalComplement",
                "name": "test_identity[i3]",
                "time": 0.016,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalComplement",
                "name": "test_empty",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalComplement",
                "name": "test_proxy_method",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalDifference",
                "name": "test_with_itself[i0]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalDifference",
                "name": "test_with_itself[i1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalDifference",
                "name": "test_with_itself[i2]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalDifference",
                "name": "test_with_itself[i3]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalDifference",
                "name": "test_with_itself[i4]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalDifference",
                "name": "test_with_itself[i5]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalDifference",
                "name": "test_with_disjoint",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalDifference",
                "name": "test_with_smaller",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalDifference",
                "name": "test_with_larger",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalDifference",
                "name": "test_with_overlap",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalDifference",
                "name": "test_proxy_method",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalDifference",
                "name": "test_with_invalid_type",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalIteration",
                "name": "test_length",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalIteration",
                "name": "test_containment",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalIteration",
                "name": "test_order",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalIteration",
                "name": "test_indexes",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalIteration",
                "name": "test_slices",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalIteration",
                "name": "test_missing_index",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_interval.TestIntervalIteration",
                "name": "test_empty",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_io.TestToString",
                "name": "test_bounds",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_io.TestToString",
                "name": "test_singleton",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_io.TestToString",
                "name": "test_empty",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_io.TestToString",
                "name": "test_infinities",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_io.TestToString",
                "name": "test_unions",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_io.TestToString",
                "name": "test_bound_types",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_io.TestToString",
                "name": "test_parameters",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_io.TestFromString",
                "name": "test_bounds",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_io.TestFromString",
                "name": "test_singleton",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_io.TestFromString",
                "name": "test_empty",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_io.TestFromString",
                "name": "test_infinities",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_io.TestFromString",
                "name": "test_unions",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_io.TestFromString",
                "name": "test_conv_is_required",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_io.TestFromString",
                "name": "test_parameters",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_io.TestFromString",
                "name": "test_invalid_strings[ ]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_io.TestFromString",
                "name": "test_invalid_strings[1]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_io.TestFromString",
                "name": "test_invalid_strings[[1]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_io.TestFromString",
                "name": "test_invalid_strings[1)]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_io.TestFromString",
                "name": "test_invalid_strings[)1,2]]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_io.TestFromString",
                "name": "test_invalid_strings[|]",
                "time": 0.016,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_io.TestFromString",
                "name": "test_invalid_strings[[0,1] | ]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_io.TestFromString",
                "name": "test_invalid_strings[[0,1] | 1]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_io.TestFromString",
                "name": "test_invalid_strings[1 | [0,1]]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_io.TestFromString",
                "name": "test_invalid_strings[[0,1] | 1 | [2,3]]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_io.TestFromString",
                "name": "test_invalid_strings[[0,1] || [2,3]]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_io.TestStringIdentity",
                "name": "test_identity",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_io.TestToData",
                "name": "test_bounds",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_io.TestToData",
                "name": "test_values",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_io.TestToData",
                "name": "test_singleton",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_io.TestToData",
                "name": "test_open_intervals",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_io.TestToData",
                "name": "test_empty_interval",
                "time": 0.027,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_io.TestToData",
                "name": "test_unions",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_io.TestToData",
                "name": "test_parameters",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_io.TestFromData",
                "name": "test_bounds",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_io.TestFromData",
                "name": "test_values",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_io.TestFromData",
                "name": "test_singleton",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_io.TestFromData",
                "name": "test_open_intervals",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_io.TestFromData",
                "name": "test_empty_interval",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_io.TestFromData",
                "name": "test_unions",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_io.TestFromData",
                "name": "test_parameters",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_io.TestDataIdentity",
                "name": "test_identity",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            }
        ],
        "stdout": "[4f842c49-ed31-43d9-a60f-c930821d1858/test] \ud83d\ude80  Start image=crawlergpt:latest\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/AlexandreDecan-portion] user=0 workdir=\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v4\n[4f842c49-ed31-43d9-a60f-c930821d1858/test] \ud83e\uddea  Matrix: map[python-version:3.7]\n[4f842c49-ed31-43d9-a60f-c930821d1858/test] \u2b50 Run Main actions/checkout@v3\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   \u2705  Success - Main actions/checkout@v3\n[4f842c49-ed31-43d9-a60f-c930821d1858/test] \u2b50 Run Main Set up Python\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   \ud83d\udc33  docker cp src=/tmp/act-cache/4c093dfa-66b6-420c-9132-2f8961835860/act/actions-setup-python@v4/ dst=/var/run/act/actions/actions-setup-python@v4/\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v4/] user=0 workdir=\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/setup/index.js] user= workdir=\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   \ud83d\udcac  ::debug::Python is expected to be installed into /opt/hostedtoolcache\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   \u2753  ::group::Installed versions\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   \ud83d\udcac  ::debug::Semantic version spec of 3.7 is 3.7\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   \ud83d\udcac  ::debug::isExplicit: \n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   \ud83d\udcac  ::debug::explicit? false\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   \ud83d\udcac  ::debug::explicit? true\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   \ud83d\udcac  ::debug::explicit? true\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   \ud83d\udcac  ::debug::explicit? true\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   \ud83d\udcac  ::debug::explicit? true\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   \ud83d\udcac  ::debug::explicit? true\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   \ud83d\udcac  ::debug::explicit? true\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   \ud83d\udcac  ::debug::evaluating 6 versions\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   \ud83d\udcac  ::debug::matched: 3.7.11\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.7.11/x64\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   \ud83d\udcac  ::debug::Found tool in cache Python 3.7.11 x64\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | Successfully set up CPython (3.7.11)\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   \u2753  ::endgroup::\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   \u2753 add-matcher /run/act/actions/actions-setup-python@v4/.github/python.json\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   \u2705  Success - Main Set up Python\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   \u2699  ::set-env:: Python_ROOT_DIR=/opt/hostedtoolcache/Python/3.7.11/x64\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   \u2699  ::set-env:: Python2_ROOT_DIR=/opt/hostedtoolcache/Python/3.7.11/x64\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   \u2699  ::set-env:: Python3_ROOT_DIR=/opt/hostedtoolcache/Python/3.7.11/x64\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.7.11/x64/lib\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.7.11/x64\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   \u2699  ::set-env:: PKG_CONFIG_PATH=/opt/hostedtoolcache/Python/3.7.11/x64/lib/pkgconfig\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   \u2699  ::set-output:: python-version=3.7.11\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   \u2699  ::set-output:: python-path=/opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.7.11/x64\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.7.11/x64/bin\n[4f842c49-ed31-43d9-a60f-c930821d1858/test] \u2b50 Run Main Install dependencies\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | Requirement already satisfied: pip in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (21.2.4)\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | Collecting pip\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Downloading pip-23.1.2-py3-none-any.whl (2.1 MB)\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | Installing collected packages: pip\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Attempting uninstall: pip\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |     Found existing installation: pip 21.2.4\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |     Uninstalling pip-21.2.4:\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |       Successfully uninstalled pip-21.2.4\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | Successfully installed pip-23.1.2\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | Processing /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/AlexandreDecan-portion\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Installing build dependencies: started\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Installing build dependencies: finished with status 'done'\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Getting requirements to build wheel: started\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Getting requirements to build wheel: finished with status 'done'\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Preparing metadata (pyproject.toml): started\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Preparing metadata (pyproject.toml): finished with status 'done'\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | Collecting sortedcontainers~=2.2 (from portion==2.4.0)\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Downloading sortedcontainers-2.4.0-py2.py3-none-any.whl (29 kB)\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | Building wheels for collected packages: portion\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Building wheel for portion (pyproject.toml): started\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Building wheel for portion (pyproject.toml): finished with status 'done'\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Created wheel for portion: filename=portion-2.4.0-py3-none-any.whl size=27716 sha256=7c021a2fdce0e0bb72f82bb462bd2b05b9b36f4083883403d5d4c1cb5c415181\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Stored in directory: /home/runneradmin/.cache/pip/wheels/aa/12/66/9175f976c2c727063909005ee638bca717c4675fad232b5b94\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | Successfully built portion\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | Installing collected packages: sortedcontainers, portion\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | Successfully installed portion-2.4.0 sortedcontainers-2.4.0\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | \n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | [notice] A new release of pip is available: 20.1.1 -> 23.1.2\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | [notice] To update, run: pip install --upgrade pip\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   \u2705  Success - Main Install dependencies\n[4f842c49-ed31-43d9-a60f-c930821d1858/test] \u2b50 Run Main Install test dependencies\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | Processing /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/AlexandreDecan-portion\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Installing build dependencies: started\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Installing build dependencies: finished with status 'done'\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Getting requirements to build wheel: started\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Getting requirements to build wheel: finished with status 'done'\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Preparing metadata (pyproject.toml): started\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Preparing metadata (pyproject.toml): finished with status 'done'\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | Requirement already satisfied: sortedcontainers~=2.2 in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (from portion==2.4.0) (2.4.0)\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | Collecting pytest~=7.0 (from portion==2.4.0)\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Downloading pytest-7.4.0-py3-none-any.whl (323 kB)\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 323.6/323.6 kB 5.9 MB/s eta 0:00:00\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | Collecting coverage~=6.0 (from portion==2.4.0)\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Downloading coverage-6.5.0-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (210 kB)\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 210.1/210.1 kB 5.0 MB/s eta 0:00:00\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | Collecting black>=21.8b (from portion==2.4.0)\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Downloading black-23.3.0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.6 MB)\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 1.6/1.6 MB 22.4 MB/s eta 0:00:00\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | Collecting click>=8.0.0 (from black>=21.8b->portion==2.4.0)\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Downloading click-8.1.3-py3-none-any.whl (96 kB)\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 96.6/96.6 kB 2.6 MB/s eta 0:00:00\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | Collecting mypy-extensions>=0.4.3 (from black>=21.8b->portion==2.4.0)\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Downloading mypy_extensions-1.0.0-py3-none-any.whl (4.7 kB)\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | Collecting packaging>=22.0 (from black>=21.8b->portion==2.4.0)\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Downloading packaging-23.1-py3-none-any.whl (48 kB)\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 48.9/48.9 kB 924.6 kB/s eta 0:00:00\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | Collecting pathspec>=0.9.0 (from black>=21.8b->portion==2.4.0)\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Downloading pathspec-0.11.1-py3-none-any.whl (29 kB)\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | Collecting platformdirs>=2 (from black>=21.8b->portion==2.4.0)\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Downloading platformdirs-3.8.0-py3-none-any.whl (16 kB)\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | Collecting tomli>=1.1.0 (from black>=21.8b->portion==2.4.0)\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Downloading tomli-2.0.1-py3-none-any.whl (12 kB)\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | Collecting typed-ast>=1.4.2 (from black>=21.8b->portion==2.4.0)\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Downloading typed_ast-1.5.4-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (843 kB)\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 843.7/843.7 kB 9.1 MB/s eta 0:00:00\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | Collecting typing-extensions>=3.10.0.0 (from black>=21.8b->portion==2.4.0)\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Downloading typing_extensions-4.6.3-py3-none-any.whl (31 kB)\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | Collecting iniconfig (from pytest~=7.0->portion==2.4.0)\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Downloading iniconfig-2.0.0-py3-none-any.whl (5.9 kB)\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | Collecting pluggy<2.0,>=0.12 (from pytest~=7.0->portion==2.4.0)\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Downloading pluggy-1.2.0-py3-none-any.whl (17 kB)\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | Collecting exceptiongroup>=1.0.0rc8 (from pytest~=7.0->portion==2.4.0)\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Downloading exceptiongroup-1.1.1-py3-none-any.whl (14 kB)\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | Collecting importlib-metadata>=0.12 (from pytest~=7.0->portion==2.4.0)\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Downloading importlib_metadata-6.7.0-py3-none-any.whl (22 kB)\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | Collecting zipp>=0.5 (from importlib-metadata>=0.12->pytest~=7.0->portion==2.4.0)\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Downloading zipp-3.15.0-py3-none-any.whl (6.8 kB)\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | Building wheels for collected packages: portion\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Building wheel for portion (pyproject.toml): started\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Building wheel for portion (pyproject.toml): finished with status 'done'\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Created wheel for portion: filename=portion-2.4.0-py3-none-any.whl size=27716 sha256=a539c1a56a8ec9c81d0797223f4cdd42391d697f974c7745a5710e5c07403bb1\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Stored in directory: /home/runneradmin/.cache/pip/wheels/aa/12/66/9175f976c2c727063909005ee638bca717c4675fad232b5b94\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | Successfully built portion\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | Installing collected packages: zipp, typing-extensions, typed-ast, tomli, portion, pathspec, packaging, mypy-extensions, iniconfig, exceptiongroup, coverage, platformdirs, importlib-metadata, pluggy, click, pytest, black\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Attempting uninstall: portion\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |     Found existing installation: portion 2.4.0\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |     Uninstalling portion-2.4.0:\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |       Successfully uninstalled portion-2.4.0\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | Successfully installed black-23.3.0 click-8.1.3 coverage-6.5.0 exceptiongroup-1.1.1 importlib-metadata-6.7.0 iniconfig-2.0.0 mypy-extensions-1.0.0 packaging-23.1 pathspec-0.11.1 platformdirs-3.8.0 pluggy-1.2.0 portion-2.4.0 pytest-7.4.0 tomli-2.0.1 typed-ast-1.5.4 typing-extensions-4.6.3 zipp-3.15.0\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | \n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | [notice] A new release of pip is available: 20.1.1 -> 23.1.2\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | [notice] To update, run: pip install --upgrade pip\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   \u2705  Success - Main Install test dependencies\n[4f842c49-ed31-43d9-a60f-c930821d1858/test] \u2b50 Run Main Check code style\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4] user= workdir=\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | All done! \u2728 \ud83c\udf70 \u2728\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | 7 files would be left unchanged.\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   \u2705  Success - Main Check code style\n[4f842c49-ed31-43d9-a60f-c930821d1858/test] \u2b50 Run Main Execute tests\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/5] user= workdir=\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | ============================= test session starts ==============================\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | platform linux -- Python 3.7.11, pytest-7.4.0, pluggy-1.2.0\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | rootdir: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/AlexandreDecan-portion\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | collected 205 items\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | \n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | tests/test_const.py ........                                             [  3%]\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | tests/test_dict.py .................................                     [ 20%]\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | tests/test_discrete.py .........                                         [ 24%]\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | tests/test_doc.py .                                                      [ 24%]\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | tests/test_func.py ........                                              [ 28%]\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | tests/test_interval.py ................................................. [ 52%]\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | ........................................................                 [ 80%]\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | tests/test_io.py .........................................               [100%]\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | \n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | - generated xml file: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/AlexandreDecan-portion/report.xml -\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | ============================= 205 passed in 3.45s ==============================\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   \u2705  Success - Main Execute tests\n[4f842c49-ed31-43d9-a60f-c930821d1858/test] \u2b50 Run Main Upload coverage\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/6] user= workdir=\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | Collecting coveralls\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Downloading coveralls-3.3.1-py2.py3-none-any.whl (14 kB)\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | Requirement already satisfied: coverage!=6.0.*,!=6.1,!=6.1.1,<7.0,>=4.1 in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (from coveralls) (6.5.0)\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | Collecting docopt>=0.6.1 (from coveralls)\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Downloading docopt-0.6.2.tar.gz (25 kB)\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Installing build dependencies: started\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Installing build dependencies: finished with status 'done'\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Getting requirements to build wheel: started\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Getting requirements to build wheel: finished with status 'done'\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Preparing metadata (pyproject.toml): started\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Preparing metadata (pyproject.toml): finished with status 'done'\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | Collecting requests>=1.0.0 (from coveralls)\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Downloading requests-2.31.0-py3-none-any.whl (62 kB)\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 62.6/62.6 kB 534.6 kB/s eta 0:00:00\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | Collecting charset-normalizer<4,>=2 (from requests>=1.0.0->coveralls)\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Downloading charset_normalizer-3.1.0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (171 kB)\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 171.0/171.0 kB 6.6 MB/s eta 0:00:00\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | Collecting idna<4,>=2.5 (from requests>=1.0.0->coveralls)\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Downloading idna-3.4-py3-none-any.whl (61 kB)\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 61.5/61.5 kB 8.5 MB/s eta 0:00:00\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | Collecting urllib3<3,>=1.21.1 (from requests>=1.0.0->coveralls)\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Downloading urllib3-2.0.3-py3-none-any.whl (123 kB)\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 123.6/123.6 kB 3.0 MB/s eta 0:00:00\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | Collecting certifi>=2017.4.17 (from requests>=1.0.0->coveralls)\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Downloading certifi-2023.5.7-py3-none-any.whl (156 kB)\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 157.0/157.0 kB 3.6 MB/s eta 0:00:00\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | Building wheels for collected packages: docopt\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Building wheel for docopt (pyproject.toml): started\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Building wheel for docopt (pyproject.toml): finished with status 'done'\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Created wheel for docopt: filename=docopt-0.6.2-py2.py3-none-any.whl size=13707 sha256=f004d150b02270402ceb3e2199a9fc6ea89d9f648056d2d03e29c4ce79124e82\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   Stored in directory: /home/runneradmin/.cache/pip/wheels/72/b0/3f/1d95f96ff986c7dfffe46ce2be4062f38ebd04b506c77c81b9\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | Successfully built docopt\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | Installing collected packages: docopt, urllib3, idna, charset-normalizer, certifi, requests, coveralls\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | Successfully installed certifi-2023.5.7 charset-normalizer-3.1.0 coveralls-3.3.1 docopt-0.6.2 idna-3.4 requests-2.31.0 urllib3-2.0.3\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | \n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | [notice] A new release of pip is available: 20.1.1 -> 23.1.2\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | [notice] To update, run: pip install --upgrade pip\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | Submitting coverage to coveralls.io...\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | resubmitting with id None\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | Could not submit coverage: 422 Client Error: Unprocessable Entity for url: https://coveralls.io/api/v1/jobs\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | Traceback (most recent call last):\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/coveralls/api.py\", line 290, in submit_report\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |     response.raise_for_status()\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py\", line 1021, in raise_for_status\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |     raise HTTPError(http_error_msg, response=self)\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | requests.exceptions.HTTPError: 422 Client Error: Unprocessable Entity for url: https://coveralls.io/api/v1/jobs\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | \n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | The above exception was the direct cause of the following exception:\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | \n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | Traceback (most recent call last):\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/coveralls/cli.py\", line 95, in main\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |     result = coverallz.wear()\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/coveralls/api.py\", line 257, in wear\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |     return self.submit_report(json_string)\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |   File \"/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/coveralls/api.py\", line 294, in submit_report\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   |     'Could not submit coverage: {}'.format(e)) from e\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   | coveralls.exception.CoverallsException: Could not submit coverage: 422 Client Error: Unprocessable Entity for url: https://coveralls.io/api/v1/jobs\n[4f842c49-ed31-43d9-a60f-c930821d1858/test]   \u274c  Failure - Main Upload coverage\n[4f842c49-ed31-43d9-a60f-c930821d1858/test] exitcode '1': failure\n[4f842c49-ed31-43d9-a60f-c930821d1858/test] \ud83c\udfc1  Job failed\n",
        "stderr": "Error: Job 'test' failed\n",
        "workflow": "/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/AlexandreDecan-portion/.github/workflows/test-crawler.yaml",
        "build_tool": "pytest",
        "elapsed_time": 330.3257963657379
    }
}