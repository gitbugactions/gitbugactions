{
    "repository": "python-rt/python-rt",
    "stars": 54,
    "language": "python",
    "size": 264,
    "clone_url": "https://github.com/python-rt/python-rt.git",
    "timestamp": "2023-07-01T11:24:14.943345Z",
    "clone_success": true,
    "number_of_actions": 3,
    "number_of_test_actions": 1,
    "actions_successful": true,
    "actions_build_tools": [
        "unknown",
        "pytest",
        "unknown"
    ],
    "actions_test_build_tools": [
        "pytest"
    ],
    "actions_run": {
        "failed": false,
        "tests": [
            {
                "classname": "tests.test_basic",
                "name": "test_get_user",
                "time": 0.007,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionError: [Errno Connection error] HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/2.0/user/root (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f50694d6880>: Failed to establish a new connection: [Errno 111] Connection refused'))",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_basic",
                "name": "test_invalid_api_url",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_basic",
                "name": "test_ticket_operations",
                "time": 0.006,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionError: [Errno Connection error] HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/2.0/tickets?query=%28Subject%3D%27Testing+issue+UFaFcGmAxoxALua%27%29&fields=Owner%2CStatus%2CCreated%2CSubject%2CQueue%2CCustomFields%2CRequestor%2CCc%2CAdminCc%2CStarted%2CCreated%2CTimeEstimated%2CDue%2CType%2CInitialPriority%2CPriority%2CTimeLeft%2CLastUpdated&fields%5BQueue%5D=Name&page=1&per_page=20 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5068dcff70>: Failed to establish a new connection: [Errno 111] Connection refused'))",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_basic",
                "name": "test_attachments_create",
                "time": 0.005,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionError: [Errno Connection error] HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/2.0/ticket (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5068f48880>: Failed to establish a new connection: [Errno 111] Connection refused'))",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_basic",
                "name": "test_attachments_comment",
                "time": 0.003,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionError: [Errno Connection error] HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/2.0/ticket (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5068e90610>: Failed to establish a new connection: [Errno 111] Connection refused'))",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_basic",
                "name": "test_attachments_reply",
                "time": 0.025,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionError: [Errno Connection error] HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/2.0/ticket (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5068f48e80>: Failed to establish a new connection: [Errno 111] Connection refused'))",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_basic",
                "name": "test_ticket_operations_admincc_cc",
                "time": 0.003,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionError: [Errno Connection error] HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/2.0/ticket (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5068f8f700>: Failed to establish a new connection: [Errno 111] Connection refused'))",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_basic",
                "name": "test_users",
                "time": 0.007,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionError: [Errno Connection error] HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/2.0/user/tester1@example.com (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5068d30400>: Failed to establish a new connection: [Errno 111] Connection refused'))",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_basic",
                "name": "test_queues",
                "time": 0.003,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionError: [Errno Connection error] HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/2.0/queue/General (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5069261610>: Failed to establish a new connection: [Errno 111] Connection refused'))",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_rest1.RtTestCase",
                "name": "test_login_and_logout",
                "time": 0.004,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionError: [Errno Connection error] HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/1.0/ (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f50692071c0>: Failed to establish a new connection: [Errno 111] Connection refused'))",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_rest1.RtTestCase",
                "name": "test_ticket_operations",
                "time": 0.017,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionError: [Errno Connection error] HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/1.0/ (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5068cac490>: Failed to establish a new connection: [Errno 111] Connection refused'))",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_rest1.RtTestCase",
                "name": "test_ticket_operations_admincc_cc",
                "time": 0.006,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionError: [Errno Connection error] HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/1.0/ (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5068f41d90>: Failed to establish a new connection: [Errno 111] Connection refused'))",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tickets",
                "name": "test_ticket_attachments",
                "time": 0.003,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionError: [Errno Connection error] HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/2.0/ticket (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5068cadc70>: Failed to establish a new connection: [Errno 111] Connection refused'))",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.test_tickets",
                "name": "test_ticket_take",
                "time": 0.005,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionError: [Errno Connection error] HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/2.0/ticket (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f50691dcc40>: Failed to establish a new connection: [Errno 111] Connection refused'))",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            }
        ],
        "stdout": "[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ] \ud83d\ude80  Start image=crawlergpt:latest\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python] \ud83d\ude80  Start image=crawlergpt:latest\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/558156d8-17ed-11ee-8a50-bb14de238602/python-rt-python-rt] user=0 workdir=\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/558156d8-17ed-11ee-8a50-bb14de238602/python-rt-python-rt] user=0 workdir=\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v3\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v3\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python] \u2b50 Run Main actions/checkout@v3\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   \u2705  Success - Main actions/checkout@v3\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   \u2601  git clone 'https://github.com/actions/upload-artifact' # ref=v3\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python] \u2b50 Run Main actions/setup-python@v3\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   \ud83d\udc33  docker cp src=/tmp/act-cache/63131839-94b3-4308-96aa-6f4ea5fead18/act/actions-setup-python@v3/ dst=/var/run/act/actions/actions-setup-python@v3/\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v3/] user=0 workdir=\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ] \ud83e\uddea  Matrix: map[python-version:3.8]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ] \u2b50 Run Main actions/checkout@v3\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   \u2705  Success - Main actions/checkout@v3\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ] \u2b50 Run Main Set up Python 3.8\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   \ud83d\udc33  docker cp src=/tmp/act-cache/63131839-94b3-4308-96aa-6f4ea5fead18/act/actions-setup-python@v3/ dst=/var/run/act/actions/actions-setup-python@v3/\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v3/] user=0 workdir=\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v3/dist/setup/index.js] user= workdir=\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v3/dist/setup/index.js] user= workdir=\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   \u2753 add-matcher /run/act/actions/actions-setup-python@v3/.github/python.json\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   \u2705  Success - Main actions/setup-python@v3\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   \ud83d\udcac  ::debug::Semantic version spec of 3.8 is 3.8\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   \ud83d\udcac  ::debug::isExplicit: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   \ud83d\udcac  ::debug::explicit? false\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   \ud83d\udcac  ::debug::explicit? true\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   \ud83d\udcac  ::debug::explicit? true\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   \ud83d\udcac  ::debug::explicit? true\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   \ud83d\udcac  ::debug::explicit? true\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   \ud83d\udcac  ::debug::explicit? true\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   \ud83d\udcac  ::debug::explicit? true\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   \ud83d\udcac  ::debug::evaluating 6 versions\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   \ud83d\udcac  ::debug::matched: 3.8.11\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.8.11/x64\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   \ud83d\udcac  ::debug::Found tool in cache Python 3.8.11 x64\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | Successfully setup CPython (3.8.11)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   \u2753 add-matcher /run/act/actions/actions-setup-python@v3/.github/python.json\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   \u2705  Success - Main Set up Python 3.8\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.8.11/x64\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.8.11/x64/lib\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python] \u2b50 Run Main python -m pip install --upgrade pip wheel\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   \u2699  ::set-output:: python-version=3.8.11\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.8.11/x64\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.8.11/x64/bin\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ] \u2b50 Run Main Install dependencies\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | Requirement already satisfied: pip in /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages (21.2.4)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | Collecting pip\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |   Downloading pip-23.1.2-py3-none-any.whl (2.1 MB)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | Installing collected packages: pip\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |   Attempting uninstall: pip\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     Found existing installation: pip 21.2.4\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     Uninstalling pip-21.2.4:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   | Collecting pip\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Downloading pip-23.1.2-py3-none-any.whl (2.1 MB)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |       Successfully uninstalled pip-21.2.4\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   | Collecting wheel\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Downloading wheel-0.40.0-py3-none-any.whl (64 kB)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   | Installing collected packages: pip, wheel\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | Successfully installed pip-23.1.2\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   WARNING: The scripts pip, pip3, pip3.10 and pip3.8 are installed in '/home/runneradmin/.local/bin' which is not on PATH.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   WARNING: The script wheel is installed in '/home/runneradmin/.local/bin' which is not on PATH.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   | Successfully installed pip-23.1.2 wheel-0.40.0\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   \u2705  Success - Main python -m pip install --upgrade pip wheel\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python] \u2b50 Run Main python -m pip install -e .[dev]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | Obtaining file:///tmp/558156d8-17ed-11ee-8a50-bb14de238602/python-rt-python-rt\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |   Installing build dependencies: started\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |   Installing build dependencies: finished with status 'done'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |   Checking if build backend supports build_editable: started\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |   Checking if build backend supports build_editable: finished with status 'done'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |   Getting requirements to build editable: started\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |   Getting requirements to build editable: finished with status 'done'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |   Installing backend dependencies: started\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |   Installing backend dependencies: finished with status 'done'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |   Preparing editable metadata (pyproject.toml): started\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |   Preparing editable metadata (pyproject.toml): finished with status 'done'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | Collecting requests (from rt==3.0.7.dev2+g955054b)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |   Downloading requests-2.31.0-py3-none-any.whl (62 kB)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 62.6/62.6 kB 495.9 kB/s eta 0:00:00\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | Collecting requests-toolbelt (from rt==3.0.7.dev2+g955054b)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |   Downloading requests_toolbelt-1.0.0-py2.py3-none-any.whl (54 kB)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 54.5/54.5 kB 1.8 MB/s eta 0:00:00\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | Collecting pytest (from rt==3.0.7.dev2+g955054b)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |   Downloading pytest-7.4.0-py3-none-any.whl (323 kB)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 323.6/323.6 kB 5.1 MB/s eta 0:00:00\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   | Defaulting to user installation because normal site-packages is not writeable\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   | Obtaining file:///tmp/558156d8-17ed-11ee-8a50-bb14de238602/python-rt-python-rt\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Installing build dependencies: started\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | Collecting coverage (from rt==3.0.7.dev2+g955054b)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |   Downloading coverage-7.2.7-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (229 kB)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 229.9/229.9 kB 4.7 MB/s eta 0:00:00\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | Collecting iniconfig (from pytest->rt==3.0.7.dev2+g955054b)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |   Downloading iniconfig-2.0.0-py3-none-any.whl (5.9 kB)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | Collecting packaging (from pytest->rt==3.0.7.dev2+g955054b)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |   Using cached packaging-23.1-py3-none-any.whl (48 kB)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | Collecting pluggy<2.0,>=0.12 (from pytest->rt==3.0.7.dev2+g955054b)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |   Downloading pluggy-1.2.0-py3-none-any.whl (17 kB)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | Collecting exceptiongroup>=1.0.0rc8 (from pytest->rt==3.0.7.dev2+g955054b)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |   Downloading exceptiongroup-1.1.1-py3-none-any.whl (14 kB)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | Collecting tomli>=1.0.0 (from pytest->rt==3.0.7.dev2+g955054b)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |   Using cached tomli-2.0.1-py3-none-any.whl (12 kB)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | Collecting charset-normalizer<4,>=2 (from requests->rt==3.0.7.dev2+g955054b)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |   Downloading charset_normalizer-3.1.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (195 kB)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 195.9/195.9 kB 7.1 MB/s eta 0:00:00\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | Collecting idna<4,>=2.5 (from requests->rt==3.0.7.dev2+g955054b)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |   Downloading idna-3.4-py3-none-any.whl (61 kB)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 61.5/61.5 kB 1.2 MB/s eta 0:00:00\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | Collecting urllib3<3,>=1.21.1 (from requests->rt==3.0.7.dev2+g955054b)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |   Downloading urllib3-2.0.3-py3-none-any.whl (123 kB)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 123.6/123.6 kB 4.0 MB/s eta 0:00:00\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | Collecting certifi>=2017.4.17 (from requests->rt==3.0.7.dev2+g955054b)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |   Downloading certifi-2023.5.7-py3-none-any.whl (156 kB)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 157.0/157.0 kB 8.2 MB/s eta 0:00:00\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | Building wheels for collected packages: rt\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |   Building editable for rt (pyproject.toml): started\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |   Building editable for rt (pyproject.toml): finished with status 'done'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |   Created wheel for rt: filename=rt-3.0.7.dev2+g955054b-0.editable-py3-none-any.whl size=17573 sha256=58fe959beb8a4630a15fd2d3c1104e0689da8d3365f85b40ac7c64b83e1c353d\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |   Stored in directory: /tmp/pip-ephem-wheel-cache-vd4cdk8r/wheels/e7/2d/af/4e374b4ae79a150b89768ac2ca3a920182874c57cf0a9f9ac6\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | Successfully built rt\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | Installing collected packages: urllib3, tomli, pluggy, packaging, iniconfig, idna, exceptiongroup, coverage, charset-normalizer, certifi, requests, pytest, requests-toolbelt, rt\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Installing build dependencies: finished with status 'done'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Checking if build backend supports build_editable: started\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Checking if build backend supports build_editable: finished with status 'done'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Getting requirements to build editable: started\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Getting requirements to build editable: finished with status 'done'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Installing backend dependencies: started\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | Successfully installed certifi-2023.5.7 charset-normalizer-3.1.0 coverage-7.2.7 exceptiongroup-1.1.1 idna-3.4 iniconfig-2.0.0 packaging-23.1 pluggy-1.2.0 pytest-7.4.0 requests-2.31.0 requests-toolbelt-1.0.0 rt-3.0.7.dev2+g955054b tomli-2.0.1 urllib3-2.0.3\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | [notice] A new release of pip is available: 21.1.1 -> 23.1.2\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | [notice] To update, run: pip install --upgrade pip\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   \u2705  Success - Main Install dependencies\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Installing backend dependencies: finished with status 'done'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Preparing editable metadata (pyproject.toml): started\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ] \u2b50 Run Main Test with pytest\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Preparing editable metadata (pyproject.toml): finished with status 'done'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   | Requirement already satisfied: requests in /usr/lib/python3/dist-packages (from rt==3.0.7.dev2+g955054b) (2.22.0)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   | Collecting requests-toolbelt (from rt==3.0.7.dev2+g955054b)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Downloading requests_toolbelt-1.0.0-py2.py3-none-any.whl (54 kB)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 54.5/54.5 kB 451.9 kB/s eta 0:00:00\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   | Collecting pycodestyle (from rt==3.0.7.dev2+g955054b)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Downloading pycodestyle-2.10.0-py2.py3-none-any.whl (41 kB)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 41.3/41.3 kB 2.6 MB/s eta 0:00:00\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   | Collecting pylint (from rt==3.0.7.dev2+g955054b)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Downloading pylint-2.17.4-py3-none-any.whl (536 kB)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 536.6/536.6 kB 10.1 MB/s eta 0:00:00\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   | Collecting mypy (from rt==3.0.7.dev2+g955054b)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Downloading mypy-1.4.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (11.9 MB)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 11.9/11.9 MB 23.5 MB/s eta 0:00:00\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   | Collecting flake8 (from rt==3.0.7.dev2+g955054b)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Downloading flake8-6.0.0-py2.py3-none-any.whl (57 kB)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 57.8/57.8 kB 3.6 MB/s eta 0:00:00\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   | Collecting flake8-bandit (from rt==3.0.7.dev2+g955054b)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Downloading flake8_bandit-4.1.1-py3-none-any.whl (4.8 kB)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   | Collecting flake8-comprehensions (from rt==3.0.7.dev2+g955054b)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Downloading flake8_comprehensions-3.13.0-py3-none-any.whl (8.1 kB)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | ============================= test session starts ==============================\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | platform linux -- Python 3.8.11, pytest-7.4.0, pluggy-1.2.0 -- /opt/hostedtoolcache/Python/3.8.11/x64/bin/python\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | cachedir: .pytest_cache\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | rootdir: /tmp/558156d8-17ed-11ee-8a50-bb14de238602/python-rt-python-rt\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | configfile: pyproject.toml\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   | Collecting flake8-docstrings (from rt==3.0.7.dev2+g955054b)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Downloading flake8_docstrings-1.7.0-py2.py3-none-any.whl (5.0 kB)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   | Collecting pep8-naming (from rt==3.0.7.dev2+g955054b)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Downloading pep8_naming-0.13.3-py3-none-any.whl (8.5 kB)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | collecting ... collected 14 items\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   | Collecting types-requests (from rt==3.0.7.dev2+g955054b)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Downloading types_requests-2.31.0.1-py3-none-any.whl (14 kB)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   | Collecting codespell (from rt==3.0.7.dev2+g955054b)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Downloading codespell-2.2.5-py3-none-any.whl (242 kB)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 242.7/242.7 kB 4.9 MB/s eta 0:00:00\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   | Collecting mccabe<0.8.0,>=0.7.0 (from flake8->rt==3.0.7.dev2+g955054b)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Downloading mccabe-0.7.0-py2.py3-none-any.whl (7.3 kB)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   | Collecting pyflakes<3.1.0,>=3.0.0 (from flake8->rt==3.0.7.dev2+g955054b)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Downloading pyflakes-3.0.1-py2.py3-none-any.whl (62 kB)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 62.8/62.8 kB 1.8 MB/s eta 0:00:00\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | tests/test_basic.py::test_get_user FAILED                                [  7%]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | tests/test_basic.py::test_invalid_api_url PASSED                         [ 14%]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   | Collecting bandit>=1.7.3 (from flake8-bandit->rt==3.0.7.dev2+g955054b)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Downloading bandit-1.7.5-py3-none-any.whl (123 kB)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 123.3/123.3 kB 799.8 kB/s eta 0:00:00\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | tests/test_basic.py::test_ticket_operations FAILED                       [ 21%]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   | Collecting pydocstyle>=2.1 (from flake8-docstrings->rt==3.0.7.dev2+g955054b)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Downloading pydocstyle-6.3.0-py3-none-any.whl (38 kB)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | tests/test_basic.py::test_attachments_create FAILED                      [ 28%]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   | Collecting typing-extensions>=4.1.0 (from mypy->rt==3.0.7.dev2+g955054b)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Using cached typing_extensions-4.7.0-py3-none-any.whl (33 kB)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   | Collecting mypy-extensions>=1.0.0 (from mypy->rt==3.0.7.dev2+g955054b)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Downloading mypy_extensions-1.0.0-py3-none-any.whl (4.7 kB)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | tests/test_basic.py::test_attachments_comment FAILED                     [ 35%]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   | Collecting tomli>=1.1.0 (from mypy->rt==3.0.7.dev2+g955054b)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Using cached tomli-2.0.1-py3-none-any.whl (12 kB)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | tests/test_basic.py::test_attachments_reply FAILED                       [ 42%]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   | Collecting platformdirs>=2.2.0 (from pylint->rt==3.0.7.dev2+g955054b)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Downloading platformdirs-3.8.0-py3-none-any.whl (16 kB)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | tests/test_basic.py::test_ticket_operations_admincc_cc FAILED            [ 50%]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   | Collecting astroid<=2.17.0-dev0,>=2.15.4 (from pylint->rt==3.0.7.dev2+g955054b)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Downloading astroid-2.15.5-py3-none-any.whl (278 kB)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 278.1/278.1 kB 13.3 MB/s eta 0:00:00\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | tests/test_basic.py::test_users FAILED                                   [ 57%]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   | Collecting isort<6,>=4.2.5 (from pylint->rt==3.0.7.dev2+g955054b)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Downloading isort-5.12.0-py3-none-any.whl (91 kB)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 91.2/91.2 kB 1.1 MB/s eta 0:00:00\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | tests/test_basic.py::test_queues FAILED                                  [ 64%]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   | Collecting tomlkit>=0.10.1 (from pylint->rt==3.0.7.dev2+g955054b)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Downloading tomlkit-0.11.8-py3-none-any.whl (35 kB)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   | Collecting dill>=0.2 (from pylint->rt==3.0.7.dev2+g955054b)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Downloading dill-0.3.6-py3-none-any.whl (110 kB)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | tests/test_rest1.py::RtTestCase::test_login_and_logout FAILED            [ 71%]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 110.5/110.5 kB 1.9 MB/s eta 0:00:00\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   | Collecting types-urllib3 (from types-requests->rt==3.0.7.dev2+g955054b)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Downloading types_urllib3-1.26.25.13-py3-none-any.whl (15 kB)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | tests/test_rest1.py::RtTestCase::test_ticket_operations FAILED           [ 78%]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   | Collecting lazy-object-proxy>=1.4.0 (from astroid<=2.17.0-dev0,>=2.15.4->pylint->rt==3.0.7.dev2+g955054b)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Downloading lazy_object_proxy-1.9.0-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (61 kB)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 61.4/61.4 kB 573.0 kB/s eta 0:00:00\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | tests/test_rest1.py::RtTestCase::test_ticket_operations_admincc_cc FAILED [ 85%]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   | Collecting wrapt<2,>=1.11 (from astroid<=2.17.0-dev0,>=2.15.4->pylint->rt==3.0.7.dev2+g955054b)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Downloading wrapt-1.15.0-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (81 kB)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 81.5/81.5 kB 10.9 MB/s eta 0:00:00\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | tests/test_tickets.py::test_ticket_attachments FAILED                    [ 92%]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   | Collecting GitPython>=1.0.1 (from bandit>=1.7.3->flake8-bandit->rt==3.0.7.dev2+g955054b)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Downloading GitPython-3.1.31-py3-none-any.whl (184 kB)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 184.3/184.3 kB 6.9 MB/s eta 0:00:00\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   | Requirement already satisfied: PyYAML>=5.3.1 in /usr/lib/python3/dist-packages (from bandit>=1.7.3->flake8-bandit->rt==3.0.7.dev2+g955054b) (5.3.1)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   | Collecting stevedore>=1.20.0 (from bandit>=1.7.3->flake8-bandit->rt==3.0.7.dev2+g955054b)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Downloading stevedore-5.1.0-py3-none-any.whl (49 kB)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | tests/test_tickets.py::test_ticket_take FAILED                           [100%]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | =================================== FAILURES ===================================\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | ________________________________ test_get_user _________________________________\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <urllib3.connection.HTTPConnection object at 0x7f50694d6880>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def _new_conn(self) -> socket.socket:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :return: New socket connection.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           sock = connection.create_connection(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 (self._dns_host, self.port),\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 self.timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 source_address=self.source_address,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 socket_options=self.socket_options,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:200: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/connection.py:85: in create_connection\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     raise err\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | address = ('localhost', 8080), timeout = None, source_address = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | socket_options = [(6, 1, 1)]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def create_connection(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         address: tuple[str, int],\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         source_address: tuple[str, int] | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         socket_options: _TYPE_SOCKET_OPTIONS | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ) -> socket.socket:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Connect to *address* and return the socket object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         Convenience function.  Connect to *address* (a 2-tuple ``(host,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         port)``) and return the socket object.  Passing the optional\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         *timeout* parameter will set the timeout on the socket instance\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         before attempting to connect.  If no *timeout* is supplied, the\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         global default timeout setting returned by :func:`socket.getdefaulttimeout`\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         is used.  If *source_address* is set it must be a tuple of (host, port)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         for the socket to bind as a source address before making the connection.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         An host of '' or port 0 tells the OS to use the default.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         host, port = address\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if host.startswith(\"[\"):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             host = host.strip(\"[]\")\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         err = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # The original create_connection function always returns all records.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         family = allowed_gai_family()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             host.encode(\"idna\")\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except UnicodeError:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise LocationParseError(f\"'{host}', label empty or too long\") from None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             af, socktype, proto, canonname, sa = res\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             sock = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 sock = socket.socket(af, socktype, proto)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 # If provided, set socket level options before connecting.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 _set_socket_options(sock, socket_options)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if timeout is not _DEFAULT_TIMEOUT:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     sock.settimeout(timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if source_address:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     sock.bind(source_address)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >               sock.connect(sa)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E               ConnectionRefusedError: [Errno 111] Connection refused\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | The above exception was the direct cause of the following exception:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f50693ab970>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | method = 'GET', url = '/REST/2.0/user/root', body = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | headers = {'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Authorization': 'Basic cm9vdDpwYXNzd29yZA=='}\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | redirect = False, assert_same_host = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | timeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | decode_content = False, response_kw = {}\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/REST/2.0/user/root', query=None, fragment=None)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | destination_scheme = None, conn = None, release_this_conn = True\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | http_tunnel_required = False, err = None, clean_exit = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def urlopen(  # type: ignore[override]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         method: str,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         url: str,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         body: _TYPE_BODY | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         headers: typing.Mapping[str, str] | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         retries: Retry | bool | int | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         redirect: bool = True,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         assert_same_host: bool = True,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         pool_timeout: int | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         release_conn: bool | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         chunked: bool = False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         preload_content: bool = True,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         decode_content: bool = True,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         **response_kw: typing.Any,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ) -> BaseHTTPResponse:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         Get a connection from the pool and perform an HTTP request. This is the\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         lowest level call for making a request, so you'll need to specify all\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         the raw details.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         .. note::\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            More commonly, it's appropriate to use a convenience method\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            such as :meth:`request`.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         .. note::\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            `release_conn` will only behave as expected if\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            `preload_content=False` because we want to make\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            `preload_content=False` the default behaviour someday soon without\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            breaking backwards compatibility.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param method:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param url:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             The URL to perform the request on.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param body:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param headers:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Dictionary of custom headers to send, such as User-Agent,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             these headers completely replace any pool-specific headers.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param retries:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Configure the number of retries to allow before raising a\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Pass ``None`` to retry until you receive a response. Pass a\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             over different types of retries.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Pass an integer number to retry connection errors that many times,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             but no other types of errors. Pass zero to never retry.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If ``False``, then retries are disabled and any exception is raised\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             the redirect response will be returned.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param redirect:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If True, automatically handle redirects (status codes 301, 302,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             will disable redirect, too.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param assert_same_host:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If ``True``, will make sure that the host of the pool requests is\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             consistent else will raise HostChangedError. When ``False``, you can\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             use the pool on an HTTP proxy and request foreign hosts.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param timeout:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If specified, overrides the default timeout for this one\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             request. It may be a float (in seconds) or an instance of\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             :class:`urllib3.util.Timeout`.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param pool_timeout:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If set and the pool is set to block=True, then this method will\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             connection is available within the time period.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param bool preload_content:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If True, the response's body will be preloaded into memory.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param bool decode_content:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If True, will attempt to decode the body based on the\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             'content-encoding' header.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param release_conn:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If False, then the urlopen call will not release the connection\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             back into the pool once a response is received (but will release if\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             you read the entire contents of the response such as when\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             `preload_content=True`). This is useful if you're not preloading\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             the response's content immediately. You will need to call\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             back into the pool. If None, it takes the value of ``preload_content``\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             which defaults to ``True``.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param bool chunked:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If True, urllib3 will send the body using chunked transfer\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             content-length form. Defaults to False.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param int body_pos:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Position to seek to in file-like body in the event of a retry or\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             redirect. Typically this won't need to be set because urllib3 will\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             auto-populate the value when needed.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         parsed_url = parse_url(url)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         destination_scheme = parsed_url.scheme\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if headers is None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             headers = self.headers\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if not isinstance(retries, Retry):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if release_conn is None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             release_conn = preload_content\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Check host\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if assert_same_host and not self.is_same_host(url):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise HostChangedError(self, url, retries)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Ensure that the URL we're connecting to is properly encoded\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if url.startswith(\"/\"):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             url = to_str(_encode_target(url))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             url = to_str(parsed_url.url)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         conn = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Track whether `conn` needs to be released before\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # returning/raising/recursing. Update this variable if necessary, and\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # leave `release_conn` constant throughout the function. That way, if\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # the function recurses, the original value of `release_conn` will be\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # passed down into the recursive call, and its value will be respected.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         #\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # See issue #651 [1] for details.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         #\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         release_this_conn = release_conn\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         http_tunnel_required = connection_requires_http_tunnel(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             self.proxy, self.proxy_config, destination_scheme\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # have to copy the headers dict so we can safely change it without those\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # changes being reflected in anyone else's copy.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if not http_tunnel_required:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Must keep the exception bound to a separate variable or else Python 3\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # complains about UnboundLocalError.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         err = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Keep track of whether we cleanly exited the except block. This\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # ensures we do proper cleanup in finally.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         clean_exit = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Rewind body position, if needed. Record current position\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # for future rewinds in the event of a redirect/retry.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         body_pos = set_file_position(body, body_pos)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Request a connection from the queue.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout_obj = self._get_timeout(timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             conn = self._get_conn(timeout=pool_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     self._prepare_proxy(conn)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     self._raise_timeout(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     raise\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # If we're going to release the connection in ``finally:``, then\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # the response doesn't need to know about the connection. Otherwise\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # it will also try to release it and we'll have a double-release\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # mess.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             response_conn = conn if not release_conn else None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Make the request on the HTTPConnection object\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           response = self._make_request(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 conn,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 method,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 url,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout=timeout_obj,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 body=body,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 headers=headers,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 chunked=chunked,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 retries=retries,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 response_conn=response_conn,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 preload_content=preload_content,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 decode_content=decode_content,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 **response_kw,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     conn.request(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.endheaders()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.send(msg)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.connect()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:236: in connect\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.sock = self._new_conn()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <urllib3.connection.HTTPConnection object at 0x7f50694d6880>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def _new_conn(self) -> socket.socket:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :return: New socket connection.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             sock = connection.create_connection(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 (self._dns_host, self.port),\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 self.timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 source_address=self.source_address,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 socket_options=self.socket_options,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except socket.gaierror as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise NameResolutionError(self.host, self, e) from e\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except SocketTimeout as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise ConnectTimeoutError(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 f\"Connection to {self.host} timed out. (connect timeout={self.timeout})\",\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             ) from e\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except OSError as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           raise NewConnectionError(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 self, f\"Failed to establish a new connection: {e}\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             ) from e\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E           urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x7f50694d6880>: Failed to establish a new connection: [Errno 111] Connection refused\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:215: NewConnectionError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | The above exception was the direct cause of the following exception:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <requests.adapters.HTTPAdapter object at 0x7f50693abdf0>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | request = <PreparedRequest [GET]>, stream = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | cert = None, proxies = OrderedDict()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def send(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param stream: (optional) Whether to stream the request content.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param timeout: (optional) How long to wait for the server to send\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             read timeout) <timeouts>` tuple.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :type timeout: float or tuple or urllib3 Timeout object\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             we verify the server's TLS certificate, or a string, in which case it\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             must be a path to a CA bundle to use\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :rtype: requests.Response\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             conn = self.get_connection(request.url, proxies)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except LocationValueError as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise InvalidURL(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self.cert_verify(conn, request.url, verify, cert)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         url = self.request_url(request, proxies)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self.add_headers(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             request,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             stream=stream,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout=timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             verify=verify,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             cert=cert,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             proxies=proxies,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if isinstance(timeout, tuple):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 connect, read = timeout\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             except ValueError:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise ValueError(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     f\"or a single float to set both timeouts to the same value.\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif isinstance(timeout, TimeoutSauce):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             pass\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           resp = conn.urlopen(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 method=request.method,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 url=url,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 body=request.body,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 headers=request.headers,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 redirect=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 assert_same_host=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 preload_content=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 decode_content=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 retries=self.max_retries,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout=timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 chunked=chunked,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     retries = retries.increment(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | method = 'GET', url = '/REST/2.0/user/root', response = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | error = NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f50694d6880>: Failed to establish a new connection: [Errno 111] Connection refused')\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _pool = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f50693ab970>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _stacktrace = <traceback object at 0x7f506a3d3600>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def increment(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         method: str | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         url: str | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         response: BaseHTTPResponse | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         error: Exception | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         _pool: ConnectionPool | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         _stacktrace: TracebackType | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ) -> Retry:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param response: A response object, or None, if the server did not\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             return a response.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :type response: :class:`~urllib3.response.BaseHTTPResponse`\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param Exception error: An error encountered during the request, or\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             None if the response was received successfully.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :return: A new ``Retry`` object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if self.total is False and error:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Disabled, indicate to re-raise the error.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise reraise(type(error), error, _stacktrace)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         total = self.total\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if total is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             total -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         connect = self.connect\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         read = self.read\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         redirect = self.redirect\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         status_count = self.status\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         other = self.other\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         cause = \"unknown\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         status = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         redirect_location = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if error and self._is_connection_error(error):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Connect retry?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if connect is False:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise reraise(type(error), error, _stacktrace)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             elif connect is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 connect -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif error and self._is_read_error(error):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Read retry?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if read is False or method is None or not self._is_method_retryable(method):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise reraise(type(error), error, _stacktrace)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             elif read is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 read -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif error:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Other retry?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if other is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 other -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif response and response.get_redirect_location():\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Redirect retry?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if redirect is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 redirect -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             cause = \"too many redirects\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             response_redirect_location = response.get_redirect_location()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if response_redirect_location:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 redirect_location = response_redirect_location\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             status = response.status\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Incrementing because of a server error like a 500 in\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # status_forcelist and the given method is in the allowed_methods\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             cause = ResponseError.GENERIC_ERROR\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if response and response.status:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if status_count is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     status_count -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 status = response.status\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         history = self.history + (\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             RequestHistory(method, url, error, status, redirect_location),\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         new_retry = self.new(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             total=total,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             connect=connect,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             read=read,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             redirect=redirect,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             status=status_count,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             other=other,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             history=history,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if new_retry.is_exhausted():\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             reason = error or ResponseError(cause)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/2.0/user/root (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f50694d6880>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:515: MaxRetryError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | During handling of the above exception, another exception occurred:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <rt.rest2.Rt object at 0x7f50693ab640>, selector = 'user/root'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | get_params = None, json_data = None, post_data = None, attachments = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def __request(self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   selector: str,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   get_params: typing.Optional[typing.Dict[str, typing.Any]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   json_data: typing.Optional[typing.Union[typing.Dict[str, typing.Any], typing.List[typing.Any]]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   post_data: typing.Optional[typing.Dict[str, typing.Any]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   attachments: typing.Optional[typing.Sequence[Attachment]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   ) -> typing.Union[typing.Dict[str, typing.Any], typing.List[str]]:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\" General request for :term:`API`.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param selector: End part of URL which completes self.url parameter\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                            set during class initialization.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                            E.g.: ``ticket/123456/show``\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param get_params: Parameters to add for a GET request.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param json_data: JSON request to send to the API.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param post_data: Dictionary with POST method fields\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param attachments: Optional list of :py:class:`~rt.rest2.Attachment` objects\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :returns: dict or list depending on request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :raises AuthorizationError: In case that request is called without previous\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                                     login or login attempt failed.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :raises ConnectionError: In case of connection error.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             url = str(urljoin(self.url, selector))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if not attachments:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if json_data:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     response = self.session.post(url, json=json_data, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 elif post_data:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     response = self.session.post(url, data=post_data, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >                   response = self.session.get(url, params=get_params, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | rt/rest2.py:186: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     return self.request(\"GET\", url, **kwargs)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     resp = self.send(prep, **send_kwargs)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     r = adapter.send(request, **kwargs)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <requests.adapters.HTTPAdapter object at 0x7f50693abdf0>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | request = <PreparedRequest [GET]>, stream = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | cert = None, proxies = OrderedDict()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def send(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param stream: (optional) Whether to stream the request content.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param timeout: (optional) How long to wait for the server to send\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             read timeout) <timeouts>` tuple.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :type timeout: float or tuple or urllib3 Timeout object\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             we verify the server's TLS certificate, or a string, in which case it\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             must be a path to a CA bundle to use\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :rtype: requests.Response\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             conn = self.get_connection(request.url, proxies)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except LocationValueError as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise InvalidURL(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self.cert_verify(conn, request.url, verify, cert)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         url = self.request_url(request, proxies)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self.add_headers(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             request,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             stream=stream,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout=timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             verify=verify,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             cert=cert,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             proxies=proxies,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if isinstance(timeout, tuple):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 connect, read = timeout\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             except ValueError:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise ValueError(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     f\"or a single float to set both timeouts to the same value.\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif isinstance(timeout, TimeoutSauce):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             pass\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             resp = conn.urlopen(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 method=request.method,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 url=url,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 body=request.body,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 headers=request.headers,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 redirect=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 assert_same_host=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 preload_content=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 decode_content=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 retries=self.max_retries,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout=timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 chunked=chunked,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except (ProtocolError, OSError) as err:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise ConnectionError(err, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except MaxRetryError as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if isinstance(e.reason, ConnectTimeoutError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 # TODO: Remove this in 3.0.0: see #2811\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if not isinstance(e.reason, NewConnectionError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     raise ConnectTimeout(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if isinstance(e.reason, ResponseError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise RetryError(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if isinstance(e.reason, _ProxyError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise ProxyError(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if isinstance(e.reason, _SSLError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 # This branch is for urllib3 v1.22 and later.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise SSLError(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           raise ConnectionError(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E           requests.exceptions.ConnectionError: HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/2.0/user/root (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f50694d6880>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:519: ConnectionError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | The above exception was the direct cause of the following exception:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | rt_connection = <rt.rest2.Rt object at 0x7f50693ab640>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def test_get_user(rt_connection: rt.rest2.Rt):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >       user = rt_connection.get_user(RT_USER)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | tests/test_basic.py:44: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | rt/rest2.py:940: in get_user\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     res = self.__request(f'user/{user_id}')\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <rt.rest2.Rt object at 0x7f50693ab640>, selector = 'user/root'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | get_params = None, json_data = None, post_data = None, attachments = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def __request(self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   selector: str,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   get_params: typing.Optional[typing.Dict[str, typing.Any]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   json_data: typing.Optional[typing.Union[typing.Dict[str, typing.Any], typing.List[typing.Any]]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   post_data: typing.Optional[typing.Dict[str, typing.Any]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   attachments: typing.Optional[typing.Sequence[Attachment]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   ) -> typing.Union[typing.Dict[str, typing.Any], typing.List[str]]:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\" General request for :term:`API`.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param selector: End part of URL which completes self.url parameter\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                            set during class initialization.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                            E.g.: ``ticket/123456/show``\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param get_params: Parameters to add for a GET request.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param json_data: JSON request to send to the API.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param post_data: Dictionary with POST method fields\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param attachments: Optional list of :py:class:`~rt.rest2.Attachment` objects\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :returns: dict or list depending on request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :raises AuthorizationError: In case that request is called without previous\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                                     login or login attempt failed.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :raises ConnectionError: In case of connection error.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             url = str(urljoin(self.url, selector))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if not attachments:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if json_data:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     response = self.session.post(url, json=json_data, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 elif post_data:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     response = self.session.post(url, data=post_data, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     response = self.session.get(url, params=get_params, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 fields: typing.List[typing.Tuple[str, typing.Any]] = [('Attachments', attachment.multipart_form_element()) for attachment in attachments]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 fields.append(('JSON', json.dumps(json_data)))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 multipart_data = requests_toolbelt.MultipartEncoder(fields=fields)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 _headers = dict(self.session.headers)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 _headers['content-type'] = multipart_data.content_type\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 response = self.session.post(url, data=multipart_data, headers=_headers, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             self.__debug_response(response)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             self.__check_response(response)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 result = response.json()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             except LookupError as exc:  # pragma: no cover\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise UnexpectedResponseError(f'Unknown response encoding: {response.encoding}.') from exc\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             except UnicodeError as exc:  # pragma: no cover\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise UnexpectedResponseError(f'''Unknown response encoding (UTF-8 does not work) - \"{response.content.decode('utf-8', 'replace')}\".''') from exc\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             return result\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except requests.exceptions.ConnectionError as exc:  # pragma: no cover\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           raise ConnectionError(\"Connection error\", exc) from exc\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E           ConnectionError: [Errno Connection error] HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/2.0/user/root (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f50694d6880>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | rt/rest2.py:210: ConnectionError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | ____________________________ test_ticket_operations ____________________________\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <urllib3.connection.HTTPConnection object at 0x7f5068dcff70>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def _new_conn(self) -> socket.socket:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :return: New socket connection.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           sock = connection.create_connection(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 (self._dns_host, self.port),\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 self.timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 source_address=self.source_address,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 socket_options=self.socket_options,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:200: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/connection.py:85: in create_connection\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     raise err\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | address = ('localhost', 8080), timeout = None, source_address = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | socket_options = [(6, 1, 1)]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def create_connection(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         address: tuple[str, int],\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         source_address: tuple[str, int] | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         socket_options: _TYPE_SOCKET_OPTIONS | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ) -> socket.socket:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Connect to *address* and return the socket object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         Convenience function.  Connect to *address* (a 2-tuple ``(host,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         port)``) and return the socket object.  Passing the optional\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         *timeout* parameter will set the timeout on the socket instance\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         before attempting to connect.  If no *timeout* is supplied, the\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         global default timeout setting returned by :func:`socket.getdefaulttimeout`\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         is used.  If *source_address* is set it must be a tuple of (host, port)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         for the socket to bind as a source address before making the connection.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         An host of '' or port 0 tells the OS to use the default.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         host, port = address\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if host.startswith(\"[\"):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             host = host.strip(\"[]\")\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         err = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # The original create_connection function always returns all records.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         family = allowed_gai_family()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             host.encode(\"idna\")\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except UnicodeError:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise LocationParseError(f\"'{host}', label empty or too long\") from None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             af, socktype, proto, canonname, sa = res\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             sock = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 sock = socket.socket(af, socktype, proto)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 # If provided, set socket level options before connecting.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 _set_socket_options(sock, socket_options)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if timeout is not _DEFAULT_TIMEOUT:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     sock.settimeout(timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if source_address:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     sock.bind(source_address)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >               sock.connect(sa)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E               ConnectionRefusedError: [Errno 111] Connection refused\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | The above exception was the direct cause of the following exception:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f50693ab970>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | method = 'GET'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | url = '/REST/2.0/tickets?query=%28Subject%3D%27Testing+issue+UFaFcGmAxoxALua%27%29&fields=Owner%2CStatus%2CCreated%2CSubject...Estimated%2CDue%2CType%2CInitialPriority%2CPriority%2CTimeLeft%2CLastUpdated&fields%5BQueue%5D=Name&page=1&per_page=20'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | body = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | headers = {'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Authorization': 'Basic cm9vdDpwYXNzd29yZA=='}\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | redirect = False, assert_same_host = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | timeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | decode_content = False, response_kw = {}\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/REST/2.0/tickets', query='query=%28Subject%3D%27Testing+issue...2CType%2CInitialPriority%2CPriority%2CTimeLeft%2CLastUpdated&fields%5BQueue%5D=Name&page=1&per_page=20', fragment=None)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | destination_scheme = None, conn = None, release_this_conn = True\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | http_tunnel_required = False, err = None, clean_exit = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def urlopen(  # type: ignore[override]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         method: str,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         url: str,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         body: _TYPE_BODY | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         headers: typing.Mapping[str, str] | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         retries: Retry | bool | int | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         redirect: bool = True,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         assert_same_host: bool = True,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         pool_timeout: int | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         release_conn: bool | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         chunked: bool = False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         preload_content: bool = True,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         decode_content: bool = True,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         **response_kw: typing.Any,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ) -> BaseHTTPResponse:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         Get a connection from the pool and perform an HTTP request. This is the\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         lowest level call for making a request, so you'll need to specify all\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         the raw details.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         .. note::\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            More commonly, it's appropriate to use a convenience method\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            such as :meth:`request`.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         .. note::\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            `release_conn` will only behave as expected if\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            `preload_content=False` because we want to make\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            `preload_content=False` the default behaviour someday soon without\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            breaking backwards compatibility.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param method:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param url:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             The URL to perform the request on.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param body:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param headers:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Dictionary of custom headers to send, such as User-Agent,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             these headers completely replace any pool-specific headers.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param retries:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Configure the number of retries to allow before raising a\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Pass ``None`` to retry until you receive a response. Pass a\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             over different types of retries.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Pass an integer number to retry connection errors that many times,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             but no other types of errors. Pass zero to never retry.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If ``False``, then retries are disabled and any exception is raised\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             the redirect response will be returned.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param redirect:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If True, automatically handle redirects (status codes 301, 302,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             will disable redirect, too.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param assert_same_host:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If ``True``, will make sure that the host of the pool requests is\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             consistent else will raise HostChangedError. When ``False``, you can\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             use the pool on an HTTP proxy and request foreign hosts.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param timeout:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If specified, overrides the default timeout for this one\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             request. It may be a float (in seconds) or an instance of\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             :class:`urllib3.util.Timeout`.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param pool_timeout:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If set and the pool is set to block=True, then this method will\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             connection is available within the time period.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param bool preload_content:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If True, the response's body will be preloaded into memory.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param bool decode_content:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If True, will attempt to decode the body based on the\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             'content-encoding' header.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param release_conn:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If False, then the urlopen call will not release the connection\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             back into the pool once a response is received (but will release if\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             you read the entire contents of the response such as when\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             `preload_content=True`). This is useful if you're not preloading\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             the response's content immediately. You will need to call\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             back into the pool. If None, it takes the value of ``preload_content``\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             which defaults to ``True``.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param bool chunked:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If True, urllib3 will send the body using chunked transfer\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             content-length form. Defaults to False.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param int body_pos:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Position to seek to in file-like body in the event of a retry or\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             redirect. Typically this won't need to be set because urllib3 will\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             auto-populate the value when needed.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         parsed_url = parse_url(url)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         destination_scheme = parsed_url.scheme\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if headers is None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             headers = self.headers\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if not isinstance(retries, Retry):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if release_conn is None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             release_conn = preload_content\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Check host\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if assert_same_host and not self.is_same_host(url):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise HostChangedError(self, url, retries)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Ensure that the URL we're connecting to is properly encoded\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if url.startswith(\"/\"):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             url = to_str(_encode_target(url))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             url = to_str(parsed_url.url)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         conn = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Track whether `conn` needs to be released before\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # returning/raising/recursing. Update this variable if necessary, and\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # leave `release_conn` constant throughout the function. That way, if\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # the function recurses, the original value of `release_conn` will be\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # passed down into the recursive call, and its value will be respected.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         #\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # See issue #651 [1] for details.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         #\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         release_this_conn = release_conn\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         http_tunnel_required = connection_requires_http_tunnel(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             self.proxy, self.proxy_config, destination_scheme\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # have to copy the headers dict so we can safely change it without those\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # changes being reflected in anyone else's copy.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if not http_tunnel_required:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Must keep the exception bound to a separate variable or else Python 3\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # complains about UnboundLocalError.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         err = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Keep track of whether we cleanly exited the except block. This\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # ensures we do proper cleanup in finally.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         clean_exit = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Rewind body position, if needed. Record current position\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # for future rewinds in the event of a redirect/retry.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         body_pos = set_file_position(body, body_pos)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Request a connection from the queue.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout_obj = self._get_timeout(timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             conn = self._get_conn(timeout=pool_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     self._prepare_proxy(conn)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     self._raise_timeout(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     raise\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # If we're going to release the connection in ``finally:``, then\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # the response doesn't need to know about the connection. Otherwise\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # it will also try to release it and we'll have a double-release\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # mess.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             response_conn = conn if not release_conn else None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Make the request on the HTTPConnection object\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           response = self._make_request(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 conn,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 method,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 url,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout=timeout_obj,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 body=body,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 headers=headers,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 chunked=chunked,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 retries=retries,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 response_conn=response_conn,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 preload_content=preload_content,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 decode_content=decode_content,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 **response_kw,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     conn.request(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.endheaders()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.send(msg)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.connect()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:236: in connect\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.sock = self._new_conn()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <urllib3.connection.HTTPConnection object at 0x7f5068dcff70>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def _new_conn(self) -> socket.socket:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :return: New socket connection.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             sock = connection.create_connection(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 (self._dns_host, self.port),\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 self.timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 source_address=self.source_address,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 socket_options=self.socket_options,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except socket.gaierror as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise NameResolutionError(self.host, self, e) from e\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except SocketTimeout as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise ConnectTimeoutError(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 f\"Connection to {self.host} timed out. (connect timeout={self.timeout})\",\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             ) from e\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except OSError as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           raise NewConnectionError(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 self, f\"Failed to establish a new connection: {e}\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             ) from e\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E           urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x7f5068dcff70>: Failed to establish a new connection: [Errno 111] Connection refused\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:215: NewConnectionError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | The above exception was the direct cause of the following exception:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <requests.adapters.HTTPAdapter object at 0x7f50693abdf0>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | request = <PreparedRequest [GET]>, stream = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | cert = None, proxies = OrderedDict()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def send(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param stream: (optional) Whether to stream the request content.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param timeout: (optional) How long to wait for the server to send\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             read timeout) <timeouts>` tuple.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :type timeout: float or tuple or urllib3 Timeout object\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             we verify the server's TLS certificate, or a string, in which case it\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             must be a path to a CA bundle to use\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :rtype: requests.Response\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             conn = self.get_connection(request.url, proxies)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except LocationValueError as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise InvalidURL(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self.cert_verify(conn, request.url, verify, cert)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         url = self.request_url(request, proxies)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self.add_headers(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             request,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             stream=stream,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout=timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             verify=verify,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             cert=cert,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             proxies=proxies,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if isinstance(timeout, tuple):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 connect, read = timeout\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             except ValueError:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise ValueError(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     f\"or a single float to set both timeouts to the same value.\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif isinstance(timeout, TimeoutSauce):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             pass\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           resp = conn.urlopen(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 method=request.method,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 url=url,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 body=request.body,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 headers=request.headers,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 redirect=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 assert_same_host=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 preload_content=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 decode_content=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 retries=self.max_retries,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout=timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 chunked=chunked,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     retries = retries.increment(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | method = 'GET'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | url = '/REST/2.0/tickets?query=%28Subject%3D%27Testing+issue+UFaFcGmAxoxALua%27%29&fields=Owner%2CStatus%2CCreated%2CSubject...Estimated%2CDue%2CType%2CInitialPriority%2CPriority%2CTimeLeft%2CLastUpdated&fields%5BQueue%5D=Name&page=1&per_page=20'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | response = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | error = NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5068dcff70>: Failed to establish a new connection: [Errno 111] Connection refused')\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _pool = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f50693ab970>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _stacktrace = <traceback object at 0x7f50690a4a80>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def increment(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         method: str | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         url: str | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         response: BaseHTTPResponse | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         error: Exception | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         _pool: ConnectionPool | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         _stacktrace: TracebackType | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ) -> Retry:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param response: A response object, or None, if the server did not\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             return a response.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :type response: :class:`~urllib3.response.BaseHTTPResponse`\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param Exception error: An error encountered during the request, or\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             None if the response was received successfully.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :return: A new ``Retry`` object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if self.total is False and error:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Disabled, indicate to re-raise the error.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise reraise(type(error), error, _stacktrace)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         total = self.total\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if total is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             total -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         connect = self.connect\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         read = self.read\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         redirect = self.redirect\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         status_count = self.status\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         other = self.other\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         cause = \"unknown\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         status = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         redirect_location = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if error and self._is_connection_error(error):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Connect retry?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if connect is False:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise reraise(type(error), error, _stacktrace)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             elif connect is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 connect -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif error and self._is_read_error(error):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Read retry?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if read is False or method is None or not self._is_method_retryable(method):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise reraise(type(error), error, _stacktrace)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             elif read is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 read -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif error:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Other retry?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if other is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 other -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif response and response.get_redirect_location():\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Redirect retry?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if redirect is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 redirect -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             cause = \"too many redirects\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             response_redirect_location = response.get_redirect_location()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if response_redirect_location:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 redirect_location = response_redirect_location\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             status = response.status\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Incrementing because of a server error like a 500 in\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # status_forcelist and the given method is in the allowed_methods\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             cause = ResponseError.GENERIC_ERROR\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if response and response.status:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if status_count is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     status_count -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 status = response.status\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         history = self.history + (\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             RequestHistory(method, url, error, status, redirect_location),\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         new_retry = self.new(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             total=total,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             connect=connect,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             read=read,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             redirect=redirect,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             status=status_count,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             other=other,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             history=history,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if new_retry.is_exhausted():\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             reason = error or ResponseError(cause)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/2.0/tickets?query=%28Subject%3D%27Testing+issue+UFaFcGmAxoxALua%27%29&fields=Owner%2CStatus%2CCreated%2CSubject%2CQueue%2CCustomFields%2CRequestor%2CCc%2CAdminCc%2CStarted%2CCreated%2CTimeEstimated%2CDue%2CType%2CInitialPriority%2CPriority%2CTimeLeft%2CLastUpdated&fields%5BQueue%5D=Name&page=1&per_page=20 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5068dcff70>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:515: MaxRetryError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | During handling of the above exception, another exception occurred:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <rt.rest2.Rt object at 0x7f50693ab640>, selector = 'tickets'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | json_data = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | params = {'fields': 'Owner,Status,Created,Subject,Queue,CustomFields,Requestor,Cc,AdminCc,Started,Created,TimeEstimated,Due,Type,InitialPriority,Priority,TimeLeft,LastUpdated', 'fields[Queue]': 'Name', 'page': 1, 'per_page': 20, ...}\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | page = 1, per_page = 20, recurse = True\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def __paged_request(self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                         selector: str,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                         json_data: typing.Optional[typing.Union[typing.List[typing.Dict[str, typing.Any]], typing.Dict[str, typing.Any]]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                         params: typing.Optional[typing.Dict[str, typing.Any]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                         page: int = 1,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                         per_page: int = 20,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                         recurse: bool = True\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                         ) -> typing.Iterator[typing.Dict[str, typing.Any]]:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\" Request using pagination for :term:`API`.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param selector: End part of URL which completes self.url parameter\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                            set during class initialization.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                            E.g.: ``ticket/123456/show``\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param json_data: JSON request to send to the API.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param page: The page number to get.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param per_page: Number of results per page to get.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param recurse: Set on the initial call in order to retrieve all pages recursively.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :returns: dict\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :raises AuthorizationError: In case that request is called without previous\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                                     login or login attempt failed.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :raises ConnectionError: In case of connection error.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if params:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             params['page'] = page\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             params['per_page'] = per_page\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             params = {'page': page, 'per_page': per_page}\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             url = str(urljoin(self.url, selector))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             method = 'get'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if json_data is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 method = 'post'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           response = self.session.request(method, url, json=json_data, params=params, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | rt/rest2.py:319: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     resp = self.send(prep, **send_kwargs)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     r = adapter.send(request, **kwargs)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <requests.adapters.HTTPAdapter object at 0x7f50693abdf0>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | request = <PreparedRequest [GET]>, stream = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | cert = None, proxies = OrderedDict()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def send(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param stream: (optional) Whether to stream the request content.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param timeout: (optional) How long to wait for the server to send\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             read timeout) <timeouts>` tuple.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :type timeout: float or tuple or urllib3 Timeout object\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             we verify the server's TLS certificate, or a string, in which case it\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             must be a path to a CA bundle to use\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :rtype: requests.Response\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             conn = self.get_connection(request.url, proxies)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except LocationValueError as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise InvalidURL(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self.cert_verify(conn, request.url, verify, cert)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         url = self.request_url(request, proxies)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self.add_headers(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             request,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             stream=stream,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout=timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             verify=verify,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             cert=cert,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             proxies=proxies,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if isinstance(timeout, tuple):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 connect, read = timeout\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             except ValueError:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise ValueError(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     f\"or a single float to set both timeouts to the same value.\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif isinstance(timeout, TimeoutSauce):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             pass\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             resp = conn.urlopen(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 method=request.method,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 url=url,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 body=request.body,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 headers=request.headers,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 redirect=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 assert_same_host=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 preload_content=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 decode_content=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 retries=self.max_retries,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout=timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 chunked=chunked,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except (ProtocolError, OSError) as err:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise ConnectionError(err, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except MaxRetryError as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if isinstance(e.reason, ConnectTimeoutError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 # TODO: Remove this in 3.0.0: see #2811\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if not isinstance(e.reason, NewConnectionError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     raise ConnectTimeout(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if isinstance(e.reason, ResponseError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise RetryError(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if isinstance(e.reason, _ProxyError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise ProxyError(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if isinstance(e.reason, _SSLError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 # This branch is for urllib3 v1.22 and later.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise SSLError(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           raise ConnectionError(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E           requests.exceptions.ConnectionError: HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/2.0/tickets?query=%28Subject%3D%27Testing+issue+UFaFcGmAxoxALua%27%29&fields=Owner%2CStatus%2CCreated%2CSubject%2CQueue%2CCustomFields%2CRequestor%2CCc%2CAdminCc%2CStarted%2CCreated%2CTimeEstimated%2CDue%2CType%2CInitialPriority%2CPriority%2CTimeLeft%2CLastUpdated&fields%5BQueue%5D=Name&page=1&per_page=20 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5068dcff70>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:519: ConnectionError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | The above exception was the direct cause of the following exception:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | rt_connection = <rt.rest2.Rt object at 0x7f50693ab640>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def test_ticket_operations(rt_connection: rt.rest2.Rt):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         ticket_subject = f'Testing issue {random_string()}'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         ticket_text = 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # empty search result\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >       search_result = list(rt_connection.search(Subject=ticket_subject))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | tests/test_basic.py:60: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | rt/rest2.py:525: in search\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     yield from self.__paged_request(url, params=get_params)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <rt.rest2.Rt object at 0x7f50693ab640>, selector = 'tickets'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | json_data = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | params = {'fields': 'Owner,Status,Created,Subject,Queue,CustomFields,Requestor,Cc,AdminCc,Started,Created,TimeEstimated,Due,Type,InitialPriority,Priority,TimeLeft,LastUpdated', 'fields[Queue]': 'Name', 'page': 1, 'per_page': 20, ...}\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | page = 1, per_page = 20, recurse = True\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def __paged_request(self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                         selector: str,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                         json_data: typing.Optional[typing.Union[typing.List[typing.Dict[str, typing.Any]], typing.Dict[str, typing.Any]]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                         params: typing.Optional[typing.Dict[str, typing.Any]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                         page: int = 1,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                         per_page: int = 20,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                         recurse: bool = True\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                         ) -> typing.Iterator[typing.Dict[str, typing.Any]]:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\" Request using pagination for :term:`API`.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param selector: End part of URL which completes self.url parameter\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                            set during class initialization.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                            E.g.: ``ticket/123456/show``\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param json_data: JSON request to send to the API.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param page: The page number to get.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param per_page: Number of results per page to get.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param recurse: Set on the initial call in order to retrieve all pages recursively.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :returns: dict\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :raises AuthorizationError: In case that request is called without previous\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                                     login or login attempt failed.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :raises ConnectionError: In case of connection error.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if params:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             params['page'] = page\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             params['per_page'] = per_page\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             params = {'page': page, 'per_page': per_page}\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             url = str(urljoin(self.url, selector))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             method = 'get'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if json_data is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 method = 'post'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             response = self.session.request(method, url, json=json_data, params=params, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             self.__check_response(response)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 result = response.json()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             except LookupError as exc:  # pragma: no cover\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise UnexpectedResponseError(f'Unknown response encoding: {response.encoding}.') from exc\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             except UnicodeError:  # pragma: no cover\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 # replace errors - we need decoded content just to check for error codes in __check_response\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 result = response.content.decode('utf-8', 'replace')\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if not isinstance(result, dict) and 'items' in result:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise UnexpectedResponseError('Server returned an unexpected result')\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             yield from result['items']\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if recurse and result['pages'] > result['page']:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 for _page in range(2, result['pages'] + 1):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     yield from self.__paged_request(selector, json_data=json_data, page=_page,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                                                     per_page=result['per_page'], params=params, recurse=False)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except requests.exceptions.ConnectionError as exc:  # pragma: no cover\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           raise ConnectionError(\"Connection error\", exc) from exc\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E           ConnectionError: [Errno Connection error] HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/2.0/tickets?query=%28Subject%3D%27Testing+issue+UFaFcGmAxoxALua%27%29&fields=Owner%2CStatus%2CCreated%2CSubject%2CQueue%2CCustomFields%2CRequestor%2CCc%2CAdminCc%2CStarted%2CCreated%2CTimeEstimated%2CDue%2CType%2CInitialPriority%2CPriority%2CTimeLeft%2CLastUpdated&fields%5BQueue%5D=Name&page=1&per_page=20 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5068dcff70>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | rt/rest2.py:342: ConnectionError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | ___________________________ test_attachments_create ____________________________\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <urllib3.connection.HTTPConnection object at 0x7f5068f48880>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def _new_conn(self) -> socket.socket:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :return: New socket connection.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           sock = connection.create_connection(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 (self._dns_host, self.port),\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 self.timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 source_address=self.source_address,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 socket_options=self.socket_options,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:200: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/connection.py:85: in create_connection\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     raise err\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | address = ('localhost', 8080), timeout = None, source_address = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | socket_options = [(6, 1, 1)]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def create_connection(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         address: tuple[str, int],\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         source_address: tuple[str, int] | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         socket_options: _TYPE_SOCKET_OPTIONS | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ) -> socket.socket:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Connect to *address* and return the socket object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         Convenience function.  Connect to *address* (a 2-tuple ``(host,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         port)``) and return the socket object.  Passing the optional\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         *timeout* parameter will set the timeout on the socket instance\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         before attempting to connect.  If no *timeout* is supplied, the\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         global default timeout setting returned by :func:`socket.getdefaulttimeout`\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         is used.  If *source_address* is set it must be a tuple of (host, port)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         for the socket to bind as a source address before making the connection.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         An host of '' or port 0 tells the OS to use the default.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         host, port = address\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if host.startswith(\"[\"):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             host = host.strip(\"[]\")\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         err = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # The original create_connection function always returns all records.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         family = allowed_gai_family()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             host.encode(\"idna\")\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except UnicodeError:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise LocationParseError(f\"'{host}', label empty or too long\") from None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             af, socktype, proto, canonname, sa = res\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             sock = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 sock = socket.socket(af, socktype, proto)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 # If provided, set socket level options before connecting.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 _set_socket_options(sock, socket_options)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if timeout is not _DEFAULT_TIMEOUT:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     sock.settimeout(timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if source_address:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     sock.bind(source_address)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >               sock.connect(sa)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E               ConnectionRefusedError: [Errno 111] Connection refused\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | The above exception was the direct cause of the following exception:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f50693ab970>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | method = 'POST', url = '/REST/2.0/ticket'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | body = <MultipartEncoder: [('Attachments', ('attachment-OquQjwAkNB.txt', b'qTcUBAdkoQqBWHMLXoFfYfFMBDPlExaPGTuLDAGiorgFrYlGij...adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\", \"ContentType\": \"text/plain\"}')]>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | headers = {'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-aliv...a; boundary=91279dd36bfb447f8b3b8f102f9d8090', 'Content-Length': '2147', 'Authorization': 'Basic cm9vdDpwYXNzd29yZA=='}\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | redirect = False, assert_same_host = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | timeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | decode_content = False, response_kw = {}\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/REST/2.0/ticket', query=None, fragment=None)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | destination_scheme = None, conn = None, release_this_conn = True\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | http_tunnel_required = False, err = None, clean_exit = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def urlopen(  # type: ignore[override]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         method: str,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         url: str,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         body: _TYPE_BODY | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         headers: typing.Mapping[str, str] | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         retries: Retry | bool | int | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         redirect: bool = True,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         assert_same_host: bool = True,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         pool_timeout: int | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         release_conn: bool | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         chunked: bool = False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         preload_content: bool = True,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         decode_content: bool = True,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         **response_kw: typing.Any,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ) -> BaseHTTPResponse:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         Get a connection from the pool and perform an HTTP request. This is the\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         lowest level call for making a request, so you'll need to specify all\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         the raw details.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         .. note::\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            More commonly, it's appropriate to use a convenience method\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            such as :meth:`request`.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         .. note::\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            `release_conn` will only behave as expected if\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            `preload_content=False` because we want to make\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            `preload_content=False` the default behaviour someday soon without\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            breaking backwards compatibility.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param method:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param url:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             The URL to perform the request on.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param body:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param headers:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Dictionary of custom headers to send, such as User-Agent,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             these headers completely replace any pool-specific headers.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param retries:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Configure the number of retries to allow before raising a\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Pass ``None`` to retry until you receive a response. Pass a\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             over different types of retries.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Pass an integer number to retry connection errors that many times,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             but no other types of errors. Pass zero to never retry.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If ``False``, then retries are disabled and any exception is raised\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             the redirect response will be returned.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param redirect:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If True, automatically handle redirects (status codes 301, 302,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             will disable redirect, too.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param assert_same_host:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If ``True``, will make sure that the host of the pool requests is\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             consistent else will raise HostChangedError. When ``False``, you can\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             use the pool on an HTTP proxy and request foreign hosts.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param timeout:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If specified, overrides the default timeout for this one\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             request. It may be a float (in seconds) or an instance of\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             :class:`urllib3.util.Timeout`.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param pool_timeout:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If set and the pool is set to block=True, then this method will\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             connection is available within the time period.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param bool preload_content:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If True, the response's body will be preloaded into memory.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param bool decode_content:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If True, will attempt to decode the body based on the\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             'content-encoding' header.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param release_conn:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If False, then the urlopen call will not release the connection\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             back into the pool once a response is received (but will release if\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             you read the entire contents of the response such as when\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             `preload_content=True`). This is useful if you're not preloading\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             the response's content immediately. You will need to call\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             back into the pool. If None, it takes the value of ``preload_content``\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             which defaults to ``True``.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param bool chunked:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If True, urllib3 will send the body using chunked transfer\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             content-length form. Defaults to False.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param int body_pos:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Position to seek to in file-like body in the event of a retry or\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             redirect. Typically this won't need to be set because urllib3 will\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             auto-populate the value when needed.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         parsed_url = parse_url(url)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         destination_scheme = parsed_url.scheme\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if headers is None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             headers = self.headers\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if not isinstance(retries, Retry):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if release_conn is None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             release_conn = preload_content\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Check host\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if assert_same_host and not self.is_same_host(url):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 49.6/49.6 kB 854.2 kB/s eta 0:00:00\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise HostChangedError(self, url, retries)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Ensure that the URL we're connecting to is properly encoded\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if url.startswith(\"/\"):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             url = to_str(_encode_target(url))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             url = to_str(parsed_url.url)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         conn = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Track whether `conn` needs to be released before\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # returning/raising/recursing. Update this variable if necessary, and\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # leave `release_conn` constant throughout the function. That way, if\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # the function recurses, the original value of `release_conn` will be\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # passed down into the recursive call, and its value will be respected.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         #\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # See issue #651 [1] for details.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         #\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         release_this_conn = release_conn\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         http_tunnel_required = connection_requires_http_tunnel(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             self.proxy, self.proxy_config, destination_scheme\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # have to copy the headers dict so we can safely change it without those\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # changes being reflected in anyone else's copy.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if not http_tunnel_required:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Must keep the exception bound to a separate variable or else Python 3\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # complains about UnboundLocalError.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         err = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Keep track of whether we cleanly exited the except block. This\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # ensures we do proper cleanup in finally.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         clean_exit = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Rewind body position, if needed. Record current position\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # for future rewinds in the event of a redirect/retry.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         body_pos = set_file_position(body, body_pos)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Request a connection from the queue.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout_obj = self._get_timeout(timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             conn = self._get_conn(timeout=pool_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     self._prepare_proxy(conn)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     self._raise_timeout(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     raise\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # If we're going to release the connection in ``finally:``, then\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # the response doesn't need to know about the connection. Otherwise\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # it will also try to release it and we'll have a double-release\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # mess.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             response_conn = conn if not release_conn else None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Make the request on the HTTPConnection object\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           response = self._make_request(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 conn,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 method,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 url,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout=timeout_obj,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 body=body,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 headers=headers,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 chunked=chunked,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 retries=retries,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 response_conn=response_conn,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 preload_content=preload_content,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 decode_content=decode_content,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 **response_kw,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     conn.request(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.endheaders()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.send(msg)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.connect()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:236: in connect\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.sock = self._new_conn()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <urllib3.connection.HTTPConnection object at 0x7f5068f48880>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def _new_conn(self) -> socket.socket:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :return: New socket connection.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             sock = connection.create_connection(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 (self._dns_host, self.port),\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 self.timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 source_address=self.source_address,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 socket_options=self.socket_options,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except socket.gaierror as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise NameResolutionError(self.host, self, e) from e\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except SocketTimeout as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise ConnectTimeoutError(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 f\"Connection to {self.host} timed out. (connect timeout={self.timeout})\",\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             ) from e\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except OSError as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           raise NewConnectionError(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 self, f\"Failed to establish a new connection: {e}\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             ) from e\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E           urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x7f5068f48880>: Failed to establish a new connection: [Errno 111] Connection refused\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:215: NewConnectionError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | The above exception was the direct cause of the following exception:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <requests.adapters.HTTPAdapter object at 0x7f50693abdf0>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | request = <PreparedRequest [POST]>, stream = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | cert = None, proxies = OrderedDict()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def send(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param stream: (optional) Whether to stream the request content.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param timeout: (optional) How long to wait for the server to send\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             read timeout) <timeouts>` tuple.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :type timeout: float or tuple or urllib3 Timeout object\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             we verify the server's TLS certificate, or a string, in which case it\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             must be a path to a CA bundle to use\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :rtype: requests.Response\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             conn = self.get_connection(request.url, proxies)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except LocationValueError as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise InvalidURL(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self.cert_verify(conn, request.url, verify, cert)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         url = self.request_url(request, proxies)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self.add_headers(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             request,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             stream=stream,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout=timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             verify=verify,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             cert=cert,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             proxies=proxies,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if isinstance(timeout, tuple):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 connect, read = timeout\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             except ValueError:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise ValueError(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     f\"or a single float to set both timeouts to the same value.\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif isinstance(timeout, TimeoutSauce):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             pass\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           resp = conn.urlopen(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 method=request.method,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 url=url,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 body=request.body,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 headers=request.headers,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 redirect=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 assert_same_host=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 preload_content=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 decode_content=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 retries=self.max_retries,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout=timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 chunked=chunked,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     retries = retries.increment(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | method = 'POST', url = '/REST/2.0/ticket', response = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | error = NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5068f48880>: Failed to establish a new connection: [Errno 111] Connection refused')\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _pool = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f50693ab970>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _stacktrace = <traceback object at 0x7f5069251600>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def increment(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         method: str | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         url: str | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         response: BaseHTTPResponse | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         error: Exception | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         _pool: ConnectionPool | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         _stacktrace: TracebackType | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ) -> Retry:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param response: A response object, or None, if the server did not\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             return a response.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :type response: :class:`~urllib3.response.BaseHTTPResponse`\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param Exception error: An error encountered during the request, or\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             None if the response was received successfully.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :return: A new ``Retry`` object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if self.total is False and error:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Disabled, indicate to re-raise the error.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise reraise(type(error), error, _stacktrace)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         total = self.total\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if total is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             total -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         connect = self.connect\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         read = self.read\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         redirect = self.redirect\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         status_count = self.status\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         other = self.other\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         cause = \"unknown\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         status = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         redirect_location = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if error and self._is_connection_error(error):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Connect retry?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if connect is False:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise reraise(type(error), error, _stacktrace)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             elif connect is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 connect -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif error and self._is_read_error(error):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Read retry?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if read is False or method is None or not self._is_method_retryable(method):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise reraise(type(error), error, _stacktrace)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             elif read is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 read -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif error:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Other retry?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if other is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 other -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif response and response.get_redirect_location():\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Redirect retry?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if redirect is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 redirect -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             cause = \"too many redirects\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             response_redirect_location = response.get_redirect_location()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if response_redirect_location:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 redirect_location = response_redirect_location\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             status = response.status\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Incrementing because of a server error like a 500 in\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # status_forcelist and the given method is in the allowed_methods\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             cause = ResponseError.GENERIC_ERROR\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if response and response.status:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if status_count is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     status_count -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 status = response.status\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         history = self.history + (\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             RequestHistory(method, url, error, status, redirect_location),\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         new_retry = self.new(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             total=total,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             connect=connect,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             read=read,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             redirect=redirect,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             status=status_count,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             other=other,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             history=history,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if new_retry.is_exhausted():\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             reason = error or ResponseError(cause)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/2.0/ticket (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5068f48880>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:515: MaxRetryError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | During handling of the above exception, another exception occurred:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <rt.rest2.Rt object at 0x7f50693ab640>, selector = 'ticket'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | get_params = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | json_data = {'Content': 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.', 'ContentType': 'text/plain', 'Queue': 'General', 'Subject': 'Testing issue eeyIVrJcMgYTypQ'}\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | post_data = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | attachments = [Attachment(file_name='attachment-OquQjwAkNB.txt', file_type='text/plain', file_content=b'qTcUBAdkoQqBWHMLXoFfYfFMBDPl..._content=b'CvhmkTFaxUPTZWgpDhNqHZQbbSNyPFJDzKkeupzifxUzCuArXbFjjwtnMMkeOeVfjlGMWxyTEDgIWpCqyWSQgcLlILDFBbLrUpZw'), ...]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def __request(self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   selector: str,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   get_params: typing.Optional[typing.Dict[str, typing.Any]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   json_data: typing.Optional[typing.Union[typing.Dict[str, typing.Any], typing.List[typing.Any]]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   post_data: typing.Optional[typing.Dict[str, typing.Any]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   attachments: typing.Optional[typing.Sequence[Attachment]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   ) -> typing.Union[typing.Dict[str, typing.Any], typing.List[str]]:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\" General request for :term:`API`.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param selector: End part of URL which completes self.url parameter\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                            set during class initialization.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                            E.g.: ``ticket/123456/show``\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param get_params: Parameters to add for a GET request.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param json_data: JSON request to send to the API.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param post_data: Dictionary with POST method fields\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param attachments: Optional list of :py:class:`~rt.rest2.Attachment` objects\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :returns: dict or list depending on request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :raises AuthorizationError: In case that request is called without previous\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                                     login or login attempt failed.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :raises ConnectionError: In case of connection error.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             url = str(urljoin(self.url, selector))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if not attachments:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if json_data:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     response = self.session.post(url, json=json_data, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 elif post_data:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     response = self.session.post(url, data=post_data, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     response = self.session.get(url, params=get_params, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 fields: typing.List[typing.Tuple[str, typing.Any]] = [('Attachments', attachment.multipart_form_element()) for attachment in attachments]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 fields.append(('JSON', json.dumps(json_data)))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 multipart_data = requests_toolbelt.MultipartEncoder(fields=fields)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 _headers = dict(self.session.headers)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 _headers['content-type'] = multipart_data.content_type\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >               response = self.session.post(url, data=multipart_data, headers=_headers, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | rt/rest2.py:196: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:637: in post\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     return self.request(\"POST\", url, data=data, json=json, **kwargs)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     resp = self.send(prep, **send_kwargs)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     r = adapter.send(request, **kwargs)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <requests.adapters.HTTPAdapter object at 0x7f50693abdf0>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | request = <PreparedRequest [POST]>, stream = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | cert = None, proxies = OrderedDict()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def send(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param stream: (optional) Whether to stream the request content.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param timeout: (optional) How long to wait for the server to send\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             read timeout) <timeouts>` tuple.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :type timeout: float or tuple or urllib3 Timeout object\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             we verify the server's TLS certificate, or a string, in which case it\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             must be a path to a CA bundle to use\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :rtype: requests.Response\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             conn = self.get_connection(request.url, proxies)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except LocationValueError as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise InvalidURL(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self.cert_verify(conn, request.url, verify, cert)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         url = self.request_url(request, proxies)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self.add_headers(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             request,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             stream=stream,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout=timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             verify=verify,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             cert=cert,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             proxies=proxies,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if isinstance(timeout, tuple):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 connect, read = timeout\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             except ValueError:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise ValueError(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     f\"or a single float to set both timeouts to the same value.\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif isinstance(timeout, TimeoutSauce):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             pass\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             resp = conn.urlopen(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 method=request.method,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 url=url,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 body=request.body,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 headers=request.headers,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 redirect=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 assert_same_host=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 preload_content=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 decode_content=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 retries=self.max_retries,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout=timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 chunked=chunked,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except (ProtocolError, OSError) as err:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise ConnectionError(err, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except MaxRetryError as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if isinstance(e.reason, ConnectTimeoutError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 # TODO: Remove this in 3.0.0: see #2811\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if not isinstance(e.reason, NewConnectionError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     raise ConnectTimeout(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if isinstance(e.reason, ResponseError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise RetryError(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if isinstance(e.reason, _ProxyError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise ProxyError(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if isinstance(e.reason, _SSLError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 # This branch is for urllib3 v1.22 and later.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise SSLError(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           raise ConnectionError(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E           requests.exceptions.ConnectionError: HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/2.0/ticket (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5068f48880>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:519: ConnectionError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | The above exception was the direct cause of the following exception:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | rt_connection = <rt.rest2.Rt object at 0x7f50693ab640>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def test_attachments_create(rt_connection: rt.rest2.Rt):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Create a ticket with a random (>= 2) number of attachments and verify that they have been successfully added to the ticket.\"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         ticket_subject = f'Testing issue {random_string()}'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         ticket_text = 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         attachment_count = random.randint(2, 10)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         attachments = []\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         for i in range(attachment_count):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             attachment_content = random_string(length=100).encode()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             attachment_name = f'attachment-{random_string(length=10)}.txt'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             attachments.append(rt.rest2.Attachment(attachment_name, 'text/plain', attachment_content))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # create\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >       ticket_id = rt_connection.create_ticket(subject=ticket_subject, content=ticket_text, queue=RT_QUEUE, attachments=attachments)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | tests/test_basic.py:213: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | rt/rest2.py:617: in create_ticket\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     res = self.__request('ticket', json_data=ticket_data, attachments=attachments)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <rt.rest2.Rt object at 0x7f50693ab640>, selector = 'ticket'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | get_params = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | json_data = {'Content': 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.', 'ContentType': 'text/plain', 'Queue': 'General', 'Subject': 'Testing issue eeyIVrJcMgYTypQ'}\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | post_data = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | attachments = [Attachment(file_name='attachment-OquQjwAkNB.txt', file_type='text/plain', file_content=b'qTcUBAdkoQqBWHMLXoFfYfFMBDPl..._content=b'CvhmkTFaxUPTZWgpDhNqHZQbbSNyPFJDzKkeupzifxUzCuArXbFjjwtnMMkeOeVfjlGMWxyTEDgIWpCqyWSQgcLlILDFBbLrUpZw'), ...]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def __request(self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   selector: str,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   get_params: typing.Optional[typing.Dict[str, typing.Any]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   json_data: typing.Optional[typing.Union[typing.Dict[str, typing.Any], typing.List[typing.Any]]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   post_data: typing.Optional[typing.Dict[str, typing.Any]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   attachments: typing.Optional[typing.Sequence[Attachment]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   ) -> typing.Union[typing.Dict[str, typing.Any], typing.List[str]]:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\" General request for :term:`API`.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param selector: End part of URL which completes self.url parameter\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                            set during class initialization.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                            E.g.: ``ticket/123456/show``\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param get_params: Parameters to add for a GET request.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param json_data: JSON request to send to the API.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param post_data: Dictionary with POST method fields\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param attachments: Optional list of :py:class:`~rt.rest2.Attachment` objects\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :returns: dict or list depending on request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :raises AuthorizationError: In case that request is called without previous\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                                     login or login attempt failed.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :raises ConnectionError: In case of connection error.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             url = str(urljoin(self.url, selector))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if not attachments:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if json_data:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     response = self.session.post(url, json=json_data, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 elif post_data:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     response = self.session.post(url, data=post_data, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     response = self.session.get(url, params=get_params, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 fields: typing.List[typing.Tuple[str, typing.Any]] = [('Attachments', attachment.multipart_form_element()) for attachment in attachments]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 fields.append(('JSON', json.dumps(json_data)))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 multipart_data = requests_toolbelt.MultipartEncoder(fields=fields)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 _headers = dict(self.session.headers)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 _headers['content-type'] = multipart_data.content_type\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 response = self.session.post(url, data=multipart_data, headers=_headers, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             self.__debug_response(response)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             self.__check_response(response)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 result = response.json()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             except LookupError as exc:  # pragma: no cover\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise UnexpectedResponseError(f'Unknown response encoding: {response.encoding}.') from exc\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             except UnicodeError as exc:  # pragma: no cover\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise UnexpectedResponseError(f'''Unknown response encoding (UTF-8 does not work) - \"{response.content.decode('utf-8', 'replace')}\".''') from exc\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             return result\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except requests.exceptions.ConnectionError as exc:  # pragma: no cover\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           raise ConnectionError(\"Connection error\", exc) from exc\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E           ConnectionError: [Errno Connection error] HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/2.0/ticket (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5068f48880>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | rt/rest2.py:210: ConnectionError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | ___________________________ test_attachments_comment ___________________________\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <urllib3.connection.HTTPConnection object at 0x7f5068e90610>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def _new_conn(self) -> socket.socket:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :return: New socket connection.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           sock = connection.create_connection(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 (self._dns_host, self.port),\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 self.timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 source_address=self.source_address,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 socket_options=self.socket_options,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:200: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/connection.py:85: in create_connection\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     raise err\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | address = ('localhost', 8080), timeout = None, source_address = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | socket_options = [(6, 1, 1)]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def create_connection(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         address: tuple[str, int],\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         source_address: tuple[str, int] | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         socket_options: _TYPE_SOCKET_OPTIONS | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ) -> socket.socket:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Connect to *address* and return the socket object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         Convenience function.  Connect to *address* (a 2-tuple ``(host,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         port)``) and return the socket object.  Passing the optional\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         *timeout* parameter will set the timeout on the socket instance\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         before attempting to connect.  If no *timeout* is supplied, the\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         global default timeout setting returned by :func:`socket.getdefaulttimeout`\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         is used.  If *source_address* is set it must be a tuple of (host, port)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         for the socket to bind as a source address before making the connection.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         An host of '' or port 0 tells the OS to use the default.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         host, port = address\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if host.startswith(\"[\"):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             host = host.strip(\"[]\")\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         err = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # The original create_connection function always returns all records.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         family = allowed_gai_family()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             host.encode(\"idna\")\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except UnicodeError:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise LocationParseError(f\"'{host}', label empty or too long\") from None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             af, socktype, proto, canonname, sa = res\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             sock = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 sock = socket.socket(af, socktype, proto)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 # If provided, set socket level options before connecting.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 _set_socket_options(sock, socket_options)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if timeout is not _DEFAULT_TIMEOUT:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     sock.settimeout(timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if source_address:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     sock.bind(source_address)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >               sock.connect(sa)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E               ConnectionRefusedError: [Errno 111] Connection refused\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | The above exception was the direct cause of the following exception:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f50693ab970>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | method = 'POST', url = '/REST/2.0/ticket'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | body = b'{\"Queue\": \"General\", \"Subject\": \"Testing issue mPjKNsYmrejmQwB\", \"Content\": \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\", \"ContentType\": \"text/plain\"}'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | headers = {'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '232', 'Content-Type': 'application/json', 'Authorization': 'Basic cm9vdDpwYXNzd29yZA=='}\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | redirect = False, assert_same_host = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | timeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | decode_content = False, response_kw = {}\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/REST/2.0/ticket', query=None, fragment=None)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | destination_scheme = None, conn = None, release_this_conn = True\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | http_tunnel_required = False, err = None, clean_exit = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def urlopen(  # type: ignore[override]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         method: str,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         url: str,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         body: _TYPE_BODY | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         headers: typing.Mapping[str, str] | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         retries: Retry | bool | int | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         redirect: bool = True,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         assert_same_host: bool = True,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         pool_timeout: int | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         release_conn: bool | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         chunked: bool = False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         preload_content: bool = True,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         decode_content: bool = True,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         **response_kw: typing.Any,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ) -> BaseHTTPResponse:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         Get a connection from the pool and perform an HTTP request. This is the\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         lowest level call for making a request, so you'll need to specify all\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         the raw details.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         .. note::\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            More commonly, it's appropriate to use a convenience method\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            such as :meth:`request`.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         .. note::\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            `release_conn` will only behave as expected if\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            `preload_content=False` because we want to make\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            `preload_content=False` the default behaviour someday soon without\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            breaking backwards compatibility.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param method:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param url:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             The URL to perform the request on.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param body:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param headers:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Dictionary of custom headers to send, such as User-Agent,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             these headers completely replace any pool-specific headers.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param retries:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Configure the number of retries to allow before raising a\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Pass ``None`` to retry until you receive a response. Pass a\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             over different types of retries.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Pass an integer number to retry connection errors that many times,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             but no other types of errors. Pass zero to never retry.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If ``False``, then retries are disabled and any exception is raised\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             the redirect response will be returned.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param redirect:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If True, automatically handle redirects (status codes 301, 302,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             will disable redirect, too.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param assert_same_host:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If ``True``, will make sure that the host of the pool requests is\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             consistent else will raise HostChangedError. When ``False``, you can\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             use the pool on an HTTP proxy and request foreign hosts.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param timeout:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If specified, overrides the default timeout for this one\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             request. It may be a float (in seconds) or an instance of\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             :class:`urllib3.util.Timeout`.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param pool_timeout:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If set and the pool is set to block=True, then this method will\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             connection is available within the time period.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param bool preload_content:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If True, the response's body will be preloaded into memory.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param bool decode_content:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If True, will attempt to decode the body based on the\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             'content-encoding' header.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param release_conn:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If False, then the urlopen call will not release the connection\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             back into the pool once a response is received (but will release if\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             you read the entire contents of the response such as when\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             `preload_content=True`). This is useful if you're not preloading\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             the response's content immediately. You will need to call\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             back into the pool. If None, it takes the value of ``preload_content``\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             which defaults to ``True``.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param bool chunked:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If True, urllib3 will send the body using chunked transfer\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             content-length form. Defaults to False.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param int body_pos:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Position to seek to in file-like body in the event of a retry or\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             redirect. Typically this won't need to be set because urllib3 will\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             auto-populate the value when needed.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         parsed_url = parse_url(url)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         destination_scheme = parsed_url.scheme\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if headers is None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             headers = self.headers\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if not isinstance(retries, Retry):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if release_conn is None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             release_conn = preload_content\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Check host\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if assert_same_host and not self.is_same_host(url):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise HostChangedError(self, url, retries)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Ensure that the URL we're connecting to is properly encoded\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if url.startswith(\"/\"):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             url = to_str(_encode_target(url))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             url = to_str(parsed_url.url)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         conn = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Track whether `conn` needs to be released before\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # returning/raising/recursing. Update this variable if necessary, and\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # leave `release_conn` constant throughout the function. That way, if\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # the function recurses, the original value of `release_conn` will be\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # passed down into the recursive call, and its value will be respected.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         #\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # See issue #651 [1] for details.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         #\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         release_this_conn = release_conn\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         http_tunnel_required = connection_requires_http_tunnel(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             self.proxy, self.proxy_config, destination_scheme\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # have to copy the headers dict so we can safely change it without those\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # changes being reflected in anyone else's copy.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if not http_tunnel_required:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Must keep the exception bound to a separate variable or else Python 3\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # complains about UnboundLocalError.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         err = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Keep track of whether we cleanly exited the except block. This\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # ensures we do proper cleanup in finally.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         clean_exit = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Rewind body position, if needed. Record current position\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # for future rewinds in the event of a redirect/retry.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         body_pos = set_file_position(body, body_pos)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Request a connection from the queue.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout_obj = self._get_timeout(timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             conn = self._get_conn(timeout=pool_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     self._prepare_proxy(conn)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     self._raise_timeout(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     raise\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # If we're going to release the connection in ``finally:``, then\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # the response doesn't need to know about the connection. Otherwise\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # it will also try to release it and we'll have a double-release\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # mess.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             response_conn = conn if not release_conn else None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Make the request on the HTTPConnection object\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           response = self._make_request(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 conn,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 method,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 url,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout=timeout_obj,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 body=body,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 headers=headers,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 chunked=chunked,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 retries=retries,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 response_conn=response_conn,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 preload_content=preload_content,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 decode_content=decode_content,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 **response_kw,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     conn.request(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.endheaders()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.send(msg)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.connect()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:236: in connect\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.sock = self._new_conn()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <urllib3.connection.HTTPConnection object at 0x7f5068e90610>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def _new_conn(self) -> socket.socket:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :return: New socket connection.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             sock = connection.create_connection(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 (self._dns_host, self.port),\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 self.timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 source_address=self.source_address,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 socket_options=self.socket_options,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except socket.gaierror as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise NameResolutionError(self.host, self, e) from e\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except SocketTimeout as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise ConnectTimeoutError(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 f\"Connection to {self.host} timed out. (connect timeout={self.timeout})\",\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             ) from e\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except OSError as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           raise NewConnectionError(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 self, f\"Failed to establish a new connection: {e}\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             ) from e\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E           urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x7f5068e90610>: Failed to establish a new connection: [Errno 111] Connection refused\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:215: NewConnectionError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | The above exception was the direct cause of the following exception:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <requests.adapters.HTTPAdapter object at 0x7f50693abdf0>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | request = <PreparedRequest [POST]>, stream = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | cert = None, proxies = OrderedDict()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def send(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param stream: (optional) Whether to stream the request content.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param timeout: (optional) How long to wait for the server to send\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             read timeout) <timeouts>` tuple.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :type timeout: float or tuple or urllib3 Timeout object\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             we verify the server's TLS certificate, or a string, in which case it\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             must be a path to a CA bundle to use\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :rtype: requests.Response\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             conn = self.get_connection(request.url, proxies)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except LocationValueError as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise InvalidURL(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self.cert_verify(conn, request.url, verify, cert)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         url = self.request_url(request, proxies)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self.add_headers(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             request,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             stream=stream,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout=timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             verify=verify,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             cert=cert,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             proxies=proxies,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if isinstance(timeout, tuple):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 connect, read = timeout\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             except ValueError:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise ValueError(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     f\"or a single float to set both timeouts to the same value.\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif isinstance(timeout, TimeoutSauce):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             pass\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           resp = conn.urlopen(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 method=request.method,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 url=url,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 body=request.body,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 headers=request.headers,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 redirect=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 assert_same_host=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 preload_content=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 decode_content=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 retries=self.max_retries,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout=timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 chunked=chunked,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     retries = retries.increment(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | method = 'POST', url = '/REST/2.0/ticket', response = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | error = NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5068e90610>: Failed to establish a new connection: [Errno 111] Connection refused')\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _pool = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f50693ab970>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _stacktrace = <traceback object at 0x7f5068e7e7c0>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def increment(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         method: str | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         url: str | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         response: BaseHTTPResponse | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         error: Exception | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         _pool: ConnectionPool | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         _stacktrace: TracebackType | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ) -> Retry:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param response: A response object, or None, if the server did not\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             return a response.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :type response: :class:`~urllib3.response.BaseHTTPResponse`\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param Exception error: An error encountered during the request, or\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             None if the response was received successfully.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :return: A new ``Retry`` object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if self.total is False and error:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Disabled, indicate to re-raise the error.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise reraise(type(error), error, _stacktrace)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         total = self.total\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if total is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             total -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         connect = self.connect\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         read = self.read\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         redirect = self.redirect\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         status_count = self.status\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         other = self.other\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         cause = \"unknown\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         status = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         redirect_location = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if error and self._is_connection_error(error):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Connect retry?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if connect is False:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise reraise(type(error), error, _stacktrace)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             elif connect is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 connect -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif error and self._is_read_error(error):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Read retry?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if read is False or method is None or not self._is_method_retryable(method):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise reraise(type(error), error, _stacktrace)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             elif read is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 read -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif error:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Other retry?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if other is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 other -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif response and response.get_redirect_location():\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Redirect retry?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if redirect is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 redirect -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             cause = \"too many redirects\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             response_redirect_location = response.get_redirect_location()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if response_redirect_location:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 redirect_location = response_redirect_location\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             status = response.status\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Incrementing because of a server error like a 500 in\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # status_forcelist and the given method is in the allowed_methods\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             cause = ResponseError.GENERIC_ERROR\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if response and response.status:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if status_count is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     status_count -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 status = response.status\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         history = self.history + (\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             RequestHistory(method, url, error, status, redirect_location),\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         new_retry = self.new(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             total=total,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             connect=connect,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             read=read,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             redirect=redirect,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             status=status_count,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             other=other,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             history=history,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if new_retry.is_exhausted():\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             reason = error or ResponseError(cause)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/2.0/ticket (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5068e90610>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:515: MaxRetryError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | During handling of the above exception, another exception occurred:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <rt.rest2.Rt object at 0x7f50693ab640>, selector = 'ticket'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | get_params = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | json_data = {'Content': 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.', 'ContentType': 'text/plain', 'Queue': 'General', 'Subject': 'Testing issue mPjKNsYmrejmQwB'}\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | post_data = None, attachments = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def __request(self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   selector: str,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   get_params: typing.Optional[typing.Dict[str, typing.Any]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   json_data: typing.Optional[typing.Union[typing.Dict[str, typing.Any], typing.List[typing.Any]]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   post_data: typing.Optional[typing.Dict[str, typing.Any]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   attachments: typing.Optional[typing.Sequence[Attachment]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   ) -> typing.Union[typing.Dict[str, typing.Any], typing.List[str]]:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\" General request for :term:`API`.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param selector: End part of URL which completes self.url parameter\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                            set during class initialization.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                            E.g.: ``ticket/123456/show``\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param get_params: Parameters to add for a GET request.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param json_data: JSON request to send to the API.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param post_data: Dictionary with POST method fields\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param attachments: Optional list of :py:class:`~rt.rest2.Attachment` objects\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :returns: dict or list depending on request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :raises AuthorizationError: In case that request is called without previous\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                                     login or login attempt failed.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :raises ConnectionError: In case of connection error.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             url = str(urljoin(self.url, selector))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if not attachments:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if json_data:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >                   response = self.session.post(url, json=json_data, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | rt/rest2.py:182: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:637: in post\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     return self.request(\"POST\", url, data=data, json=json, **kwargs)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     resp = self.send(prep, **send_kwargs)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     r = adapter.send(request, **kwargs)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <requests.adapters.HTTPAdapter object at 0x7f50693abdf0>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | request = <PreparedRequest [POST]>, stream = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | cert = None, proxies = OrderedDict()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def send(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param stream: (optional) Whether to stream the request content.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param timeout: (optional) How long to wait for the server to send\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             read timeout) <timeouts>` tuple.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :type timeout: float or tuple or urllib3 Timeout object\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             we verify the server's TLS certificate, or a string, in which case it\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             must be a path to a CA bundle to use\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :rtype: requests.Response\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             conn = self.get_connection(request.url, proxies)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except LocationValueError as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise InvalidURL(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self.cert_verify(conn, request.url, verify, cert)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         url = self.request_url(request, proxies)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self.add_headers(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             request,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             stream=stream,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout=timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             verify=verify,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             cert=cert,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             proxies=proxies,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if isinstance(timeout, tuple):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 connect, read = timeout\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             except ValueError:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise ValueError(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     f\"or a single float to set both timeouts to the same value.\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif isinstance(timeout, TimeoutSauce):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             pass\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             resp = conn.urlopen(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 method=request.method,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 url=url,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 body=request.body,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 headers=request.headers,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 redirect=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 assert_same_host=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 preload_content=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 decode_content=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 retries=self.max_retries,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout=timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 chunked=chunked,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except (ProtocolError, OSError) as err:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise ConnectionError(err, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except MaxRetryError as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if isinstance(e.reason, ConnectTimeoutError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 # TODO: Remove this in 3.0.0: see #2811\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if not isinstance(e.reason, NewConnectionError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     raise ConnectTimeout(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if isinstance(e.reason, ResponseError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise RetryError(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if isinstance(e.reason, _ProxyError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise ProxyError(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if isinstance(e.reason, _SSLError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 # This branch is for urllib3 v1.22 and later.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise SSLError(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           raise ConnectionError(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E           requests.exceptions.ConnectionError: HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/2.0/ticket (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5068e90610>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:519: ConnectionError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | The above exception was the direct cause of the following exception:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | rt_connection = <rt.rest2.Rt object at 0x7f50693ab640>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def test_attachments_comment(rt_connection: rt.rest2.Rt):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Create a ticket and comment to it with a random (>= 2) number of attachments and verify that they have been successfully added to the ticket.\"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         ticket_subject = f'Testing issue {random_string()}'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         ticket_text = 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # create\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >       ticket_id = rt_connection.create_ticket(subject=ticket_subject, content=ticket_text, queue=RT_QUEUE)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | tests/test_basic.py:240: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | rt/rest2.py:617: in create_ticket\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     res = self.__request('ticket', json_data=ticket_data, attachments=attachments)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <rt.rest2.Rt object at 0x7f50693ab640>, selector = 'ticket'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | get_params = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | json_data = {'Content': 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.', 'ContentType': 'text/plain', 'Queue': 'General', 'Subject': 'Testing issue mPjKNsYmrejmQwB'}\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | post_data = None, attachments = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def __request(self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   selector: str,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   get_params: typing.Optional[typing.Dict[str, typing.Any]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   json_data: typing.Optional[typing.Union[typing.Dict[str, typing.Any], typing.List[typing.Any]]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   post_data: typing.Optional[typing.Dict[str, typing.Any]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   attachments: typing.Optional[typing.Sequence[Attachment]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   ) -> typing.Union[typing.Dict[str, typing.Any], typing.List[str]]:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\" General request for :term:`API`.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param selector: End part of URL which completes self.url parameter\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                            set during class initialization.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                            E.g.: ``ticket/123456/show``\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param get_params: Parameters to add for a GET request.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param json_data: JSON request to send to the API.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param post_data: Dictionary with POST method fields\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param attachments: Optional list of :py:class:`~rt.rest2.Attachment` objects\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :returns: dict or list depending on request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :raises AuthorizationError: In case that request is called without previous\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                                     login or login attempt failed.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :raises ConnectionError: In case of connection error.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             url = str(urljoin(self.url, selector))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if not attachments:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if json_data:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     response = self.session.post(url, json=json_data, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 elif post_data:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     response = self.session.post(url, data=post_data, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     response = self.session.get(url, params=get_params, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 fields: typing.List[typing.Tuple[str, typing.Any]] = [('Attachments', attachment.multipart_form_element()) for attachment in attachments]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 fields.append(('JSON', json.dumps(json_data)))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 multipart_data = requests_toolbelt.MultipartEncoder(fields=fields)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 _headers = dict(self.session.headers)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 _headers['content-type'] = multipart_data.content_type\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 response = self.session.post(url, data=multipart_data, headers=_headers, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             self.__debug_response(response)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             self.__check_response(response)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 result = response.json()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             except LookupError as exc:  # pragma: no cover\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise UnexpectedResponseError(f'Unknown response encoding: {response.encoding}.') from exc\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             except UnicodeError as exc:  # pragma: no cover\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise UnexpectedResponseError(f'''Unknown response encoding (UTF-8 does not work) - \"{response.content.decode('utf-8', 'replace')}\".''') from exc\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             return result\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except requests.exceptions.ConnectionError as exc:  # pragma: no cover\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           raise ConnectionError(\"Connection error\", exc) from exc\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E           ConnectionError: [Errno Connection error] HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/2.0/ticket (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5068e90610>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | rt/rest2.py:210: ConnectionError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | ____________________________ test_attachments_reply ____________________________\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <urllib3.connection.HTTPConnection object at 0x7f5068f48e80>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def _new_conn(self) -> socket.socket:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :return: New socket connection.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           sock = connection.create_connection(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 (self._dns_host, self.port),\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 self.timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 source_address=self.source_address,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 socket_options=self.socket_options,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:200: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/connection.py:85: in create_connection\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     raise err\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | address = ('localhost', 8080), timeout = None, source_address = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | socket_options = [(6, 1, 1)]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def create_connection(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         address: tuple[str, int],\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         source_address: tuple[str, int] | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         socket_options: _TYPE_SOCKET_OPTIONS | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ) -> socket.socket:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Connect to *address* and return the socket object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         Convenience function.  Connect to *address* (a 2-tuple ``(host,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         port)``) and return the socket object.  Passing the optional\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         *timeout* parameter will set the timeout on the socket instance\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         before attempting to connect.  If no *timeout* is supplied, the\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         global default timeout setting returned by :func:`socket.getdefaulttimeout`\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         is used.  If *source_address* is set it must be a tuple of (host, port)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         for the socket to bind as a source address before making the connection.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         An host of '' or port 0 tells the OS to use the default.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         host, port = address\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if host.startswith(\"[\"):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             host = host.strip(\"[]\")\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         err = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # The original create_connection function always returns all records.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         family = allowed_gai_family()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             host.encode(\"idna\")\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except UnicodeError:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise LocationParseError(f\"'{host}', label empty or too long\") from None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             af, socktype, proto, canonname, sa = res\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             sock = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 sock = socket.socket(af, socktype, proto)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 # If provided, set socket level options before connecting.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 _set_socket_options(sock, socket_options)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if timeout is not _DEFAULT_TIMEOUT:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     sock.settimeout(timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if source_address:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     sock.bind(source_address)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >               sock.connect(sa)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E               ConnectionRefusedError: [Errno 111] Connection refused\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | The above exception was the direct cause of the following exception:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f50693ab970>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | method = 'POST', url = '/REST/2.0/ticket'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | body = b'{\"Queue\": \"General\", \"Subject\": \"Testing issue RBhstdtrNlwKGGK\", \"Content\": \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\", \"ContentType\": \"text/plain\"}'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | headers = {'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '232', 'Content-Type': 'application/json', 'Authorization': 'Basic cm9vdDpwYXNzd29yZA=='}\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | redirect = False, assert_same_host = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | timeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | decode_content = False, response_kw = {}\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/REST/2.0/ticket', query=None, fragment=None)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | destination_scheme = None, conn = None, release_this_conn = True\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | http_tunnel_required = False, err = None, clean_exit = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def urlopen(  # type: ignore[override]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         method: str,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         url: str,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         body: _TYPE_BODY | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         headers: typing.Mapping[str, str] | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         retries: Retry | bool | int | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         redirect: bool = True,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         assert_same_host: bool = True,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         pool_timeout: int | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         release_conn: bool | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         chunked: bool = False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         preload_content: bool = True,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         decode_content: bool = True,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         **response_kw: typing.Any,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ) -> BaseHTTPResponse:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         Get a connection from the pool and perform an HTTP request. This is the\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         lowest level call for making a request, so you'll need to specify all\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         the raw details.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         .. note::\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            More commonly, it's appropriate to use a convenience method\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            such as :meth:`request`.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         .. note::\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            `release_conn` will only behave as expected if\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            `preload_content=False` because we want to make\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            `preload_content=False` the default behaviour someday soon without\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            breaking backwards compatibility.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param method:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param url:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             The URL to perform the request on.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param body:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param headers:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Dictionary of custom headers to send, such as User-Agent,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             these headers completely replace any pool-specific headers.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param retries:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Configure the number of retries to allow before raising a\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Pass ``None`` to retry until you receive a response. Pass a\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             over different types of retries.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Pass an integer number to retry connection errors that many times,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             but no other types of errors. Pass zero to never retry.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If ``False``, then retries are disabled and any exception is raised\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             the redirect response will be returned.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param redirect:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If True, automatically handle redirects (status codes 301, 302,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             will disable redirect, too.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param assert_same_host:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If ``True``, will make sure that the host of the pool requests is\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             consistent else will raise HostChangedError. When ``False``, you can\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             use the pool on an HTTP proxy and request foreign hosts.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param timeout:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If specified, overrides the default timeout for this one\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             request. It may be a float (in seconds) or an instance of\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             :class:`urllib3.util.Timeout`.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param pool_timeout:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If set and the pool is set to block=True, then this method will\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             connection is available within the time period.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param bool preload_content:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If True, the response's body will be preloaded into memory.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param bool decode_content:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If True, will attempt to decode the body based on the\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             'content-encoding' header.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param release_conn:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If False, then the urlopen call will not release the connection\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             back into the pool once a response is received (but will release if\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             you read the entire contents of the response such as when\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             `preload_content=True`). This is useful if you're not preloading\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             the response's content immediately. You will need to call\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             back into the pool. If None, it takes the value of ``preload_content``\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             which defaults to ``True``.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param bool chunked:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If True, urllib3 will send the body using chunked transfer\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             content-length form. Defaults to False.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param int body_pos:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Position to seek to in file-like body in the event of a retry or\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             redirect. Typically this won't need to be set because urllib3 will\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             auto-populate the value when needed.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         parsed_url = parse_url(url)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         destination_scheme = parsed_url.scheme\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if headers is None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             headers = self.headers\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if not isinstance(retries, Retry):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if release_conn is None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             release_conn = preload_content\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Check host\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if assert_same_host and not self.is_same_host(url):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise HostChangedError(self, url, retries)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Ensure that the URL we're connecting to is properly encoded\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if url.startswith(\"/\"):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             url = to_str(_encode_target(url))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             url = to_str(parsed_url.url)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         conn = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Track whether `conn` needs to be released before\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # returning/raising/recursing. Update this variable if necessary, and\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # leave `release_conn` constant throughout the function. That way, if\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # the function recurses, the original value of `release_conn` will be\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # passed down into the recursive call, and its value will be respected.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         #\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # See issue #651 [1] for details.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         #\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         release_this_conn = release_conn\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         http_tunnel_required = connection_requires_http_tunnel(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             self.proxy, self.proxy_config, destination_scheme\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # have to copy the headers dict so we can safely change it without those\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # changes being reflected in anyone else's copy.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if not http_tunnel_required:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Must keep the exception bound to a separate variable or else Python 3\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # complains about UnboundLocalError.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         err = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Keep track of whether we cleanly exited the except block. This\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # ensures we do proper cleanup in finally.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         clean_exit = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Rewind body position, if needed. Record current position\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # for future rewinds in the event of a redirect/retry.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         body_pos = set_file_position(body, body_pos)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Request a connection from the queue.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout_obj = self._get_timeout(timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             conn = self._get_conn(timeout=pool_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     self._prepare_proxy(conn)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     self._raise_timeout(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     raise\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # If we're going to release the connection in ``finally:``, then\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # the response doesn't need to know about the connection. Otherwise\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # it will also try to release it and we'll have a double-release\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # mess.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             response_conn = conn if not release_conn else None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Make the request on the HTTPConnection object\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           response = self._make_request(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 conn,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 method,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 url,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout=timeout_obj,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 body=body,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 headers=headers,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 chunked=chunked,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 retries=retries,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 response_conn=response_conn,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 preload_content=preload_content,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 decode_content=decode_content,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 **response_kw,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     conn.request(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.endheaders()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.send(msg)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.connect()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:236: in connect\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.sock = self._new_conn()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <urllib3.connection.HTTPConnection object at 0x7f5068f48e80>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def _new_conn(self) -> socket.socket:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :return: New socket connection.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             sock = connection.create_connection(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 (self._dns_host, self.port),\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 self.timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 source_address=self.source_address,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 socket_options=self.socket_options,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except socket.gaierror as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise NameResolutionError(self.host, self, e) from e\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except SocketTimeout as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise ConnectTimeoutError(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 f\"Connection to {self.host} timed out. (connect timeout={self.timeout})\",\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             ) from e\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except OSError as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           raise NewConnectionError(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 self, f\"Failed to establish a new connection: {e}\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             ) from e\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E           urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x7f5068f48e80>: Failed to establish a new connection: [Errno 111] Connection refused\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:215: NewConnectionError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | The above exception was the direct cause of the following exception:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <requests.adapters.HTTPAdapter object at 0x7f50693abdf0>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | request = <PreparedRequest [POST]>, stream = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | cert = None, proxies = OrderedDict()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def send(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param stream: (optional) Whether to stream the request content.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param timeout: (optional) How long to wait for the server to send\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             read timeout) <timeouts>` tuple.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :type timeout: float or tuple or urllib3 Timeout object\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             we verify the server's TLS certificate, or a string, in which case it\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             must be a path to a CA bundle to use\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :rtype: requests.Response\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             conn = self.get_connection(request.url, proxies)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except LocationValueError as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise InvalidURL(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self.cert_verify(conn, request.url, verify, cert)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         url = self.request_url(request, proxies)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self.add_headers(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             request,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             stream=stream,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout=timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             verify=verify,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             cert=cert,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             proxies=proxies,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if isinstance(timeout, tuple):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 connect, read = timeout\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             except ValueError:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise ValueError(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     f\"or a single float to set both timeouts to the same value.\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif isinstance(timeout, TimeoutSauce):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             pass\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           resp = conn.urlopen(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 method=request.method,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 url=url,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 body=request.body,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 headers=request.headers,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 redirect=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 assert_same_host=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 preload_content=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 decode_content=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 retries=self.max_retries,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout=timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 chunked=chunked,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     retries = retries.increment(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | method = 'POST', url = '/REST/2.0/ticket', response = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | error = NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5068f48e80>: Failed to establish a new connection: [Errno 111] Connection refused')\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _pool = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f50693ab970>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _stacktrace = <traceback object at 0x7f506953ebc0>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def increment(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         method: str | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         url: str | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         response: BaseHTTPResponse | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         error: Exception | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         _pool: ConnectionPool | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         _stacktrace: TracebackType | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ) -> Retry:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param response: A response object, or None, if the server did not\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             return a response.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :type response: :class:`~urllib3.response.BaseHTTPResponse`\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param Exception error: An error encountered during the request, or\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             None if the response was received successfully.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :return: A new ``Retry`` object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if self.total is False and error:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Disabled, indicate to re-raise the error.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise reraise(type(error), error, _stacktrace)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         total = self.total\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if total is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             total -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         connect = self.connect\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         read = self.read\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         redirect = self.redirect\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         status_count = self.status\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         other = self.other\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         cause = \"unknown\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         status = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         redirect_location = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if error and self._is_connection_error(error):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Connect retry?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if connect is False:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise reraise(type(error), error, _stacktrace)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             elif connect is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 connect -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif error and self._is_read_error(error):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Read retry?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if read is False or method is None or not self._is_method_retryable(method):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise reraise(type(error), error, _stacktrace)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             elif read is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 read -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif error:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Other retry?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if other is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 other -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif response and response.get_redirect_location():\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Redirect retry?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if redirect is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 redirect -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             cause = \"too many redirects\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             response_redirect_location = response.get_redirect_location()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if response_redirect_location:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 redirect_location = response_redirect_location\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             status = response.status\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Incrementing because of a server error like a 500 in\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # status_forcelist and the given method is in the allowed_methods\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             cause = ResponseError.GENERIC_ERROR\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if response and response.status:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if status_count is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     status_count -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 status = response.status\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         history = self.history + (\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             RequestHistory(method, url, error, status, redirect_location),\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         new_retry = self.new(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             total=total,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             connect=connect,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             read=read,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             redirect=redirect,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             status=status_count,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             other=other,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             history=history,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if new_retry.is_exhausted():\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             reason = error or ResponseError(cause)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/2.0/ticket (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5068f48e80>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:515: MaxRetryError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | During handling of the above exception, another exception occurred:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <rt.rest2.Rt object at 0x7f50693ab640>, selector = 'ticket'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | get_params = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | json_data = {'Content': 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.', 'ContentType': 'text/plain', 'Queue': 'General', 'Subject': 'Testing issue RBhstdtrNlwKGGK'}\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | post_data = None, attachments = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def __request(self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   selector: str,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   get_params: typing.Optional[typing.Dict[str, typing.Any]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   json_data: typing.Optional[typing.Union[typing.Dict[str, typing.Any], typing.List[typing.Any]]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   post_data: typing.Optional[typing.Dict[str, typing.Any]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   attachments: typing.Optional[typing.Sequence[Attachment]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   ) -> typing.Union[typing.Dict[str, typing.Any], typing.List[str]]:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\" General request for :term:`API`.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param selector: End part of URL which completes self.url parameter\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                            set during class initialization.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                            E.g.: ``ticket/123456/show``\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param get_params: Parameters to add for a GET request.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param json_data: JSON request to send to the API.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param post_data: Dictionary with POST method fields\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param attachments: Optional list of :py:class:`~rt.rest2.Attachment` objects\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :returns: dict or list depending on request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :raises AuthorizationError: In case that request is called without previous\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                                     login or login attempt failed.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :raises ConnectionError: In case of connection error.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             url = str(urljoin(self.url, selector))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if not attachments:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if json_data:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >                   response = self.session.post(url, json=json_data, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | rt/rest2.py:182: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:637: in post\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     return self.request(\"POST\", url, data=data, json=json, **kwargs)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     resp = self.send(prep, **send_kwargs)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     r = adapter.send(request, **kwargs)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <requests.adapters.HTTPAdapter object at 0x7f50693abdf0>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | request = <PreparedRequest [POST]>, stream = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | cert = None, proxies = OrderedDict()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def send(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param stream: (optional) Whether to stream the request content.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param timeout: (optional) How long to wait for the server to send\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             read timeout) <timeouts>` tuple.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :type timeout: float or tuple or urllib3 Timeout object\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             we verify the server's TLS certificate, or a string, in which case it\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             must be a path to a CA bundle to use\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :rtype: requests.Response\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             conn = self.get_connection(request.url, proxies)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except LocationValueError as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise InvalidURL(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self.cert_verify(conn, request.url, verify, cert)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         url = self.request_url(request, proxies)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self.add_headers(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             request,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             stream=stream,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout=timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             verify=verify,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             cert=cert,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             proxies=proxies,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if isinstance(timeout, tuple):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 connect, read = timeout\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             except ValueError:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise ValueError(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     f\"or a single float to set both timeouts to the same value.\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif isinstance(timeout, TimeoutSauce):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             pass\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             resp = conn.urlopen(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 method=request.method,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 url=url,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 body=request.body,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 headers=request.headers,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 redirect=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 assert_same_host=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 preload_content=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 decode_content=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 retries=self.max_retries,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout=timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 chunked=chunked,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except (ProtocolError, OSError) as err:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise ConnectionError(err, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except MaxRetryError as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if isinstance(e.reason, ConnectTimeoutError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 # TODO: Remove this in 3.0.0: see #2811\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if not isinstance(e.reason, NewConnectionError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     raise ConnectTimeout(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if isinstance(e.reason, ResponseError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise RetryError(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if isinstance(e.reason, _ProxyError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise ProxyError(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if isinstance(e.reason, _SSLError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 # This branch is for urllib3 v1.22 and later.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise SSLError(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           raise ConnectionError(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E           requests.exceptions.ConnectionError: HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/2.0/ticket (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5068f48e80>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:519: ConnectionError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | The above exception was the direct cause of the following exception:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | rt_connection = <rt.rest2.Rt object at 0x7f50693ab640>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def test_attachments_reply(rt_connection: rt.rest2.Rt):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Create a ticket and reply to it with a random (>= 2) number of attachments and verify that they have been successfully added to the ticket.\"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         ticket_subject = f'Testing issue {random_string()}'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         ticket_text = 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # create\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >       ticket_id = rt_connection.create_ticket(subject=ticket_subject, content=ticket_text, queue=RT_QUEUE)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | tests/test_basic.py:275: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | rt/rest2.py:617: in create_ticket\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     res = self.__request('ticket', json_data=ticket_data, attachments=attachments)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <rt.rest2.Rt object at 0x7f50693ab640>, selector = 'ticket'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | get_params = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | json_data = {'Content': 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.', 'ContentType': 'text/plain', 'Queue': 'General', 'Subject': 'Testing issue RBhstdtrNlwKGGK'}\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | post_data = None, attachments = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def __request(self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   selector: str,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   get_params: typing.Optional[typing.Dict[str, typing.Any]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   json_data: typing.Optional[typing.Union[typing.Dict[str, typing.Any], typing.List[typing.Any]]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   post_data: typing.Optional[typing.Dict[str, typing.Any]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   attachments: typing.Optional[typing.Sequence[Attachment]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   ) -> typing.Union[typing.Dict[str, typing.Any], typing.List[str]]:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\" General request for :term:`API`.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param selector: End part of URL which completes self.url parameter\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                            set during class initialization.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                            E.g.: ``ticket/123456/show``\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param get_params: Parameters to add for a GET request.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param json_data: JSON request to send to the API.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param post_data: Dictionary with POST method fields\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param attachments: Optional list of :py:class:`~rt.rest2.Attachment` objects\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :returns: dict or list depending on request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :raises AuthorizationError: In case that request is called without previous\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                                     login or login attempt failed.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :raises ConnectionError: In case of connection error.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             url = str(urljoin(self.url, selector))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if not attachments:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if json_data:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     response = self.session.post(url, json=json_data, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 elif post_data:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     response = self.session.post(url, data=post_data, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     response = self.session.get(url, params=get_params, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 fields: typing.List[typing.Tuple[str, typing.Any]] = [('Attachments', attachment.multipart_form_element()) for attachment in attachments]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 fields.append(('JSON', json.dumps(json_data)))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 multipart_data = requests_toolbelt.MultipartEncoder(fields=fields)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 _headers = dict(self.session.headers)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 _headers['content-type'] = multipart_data.content_type\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 response = self.session.post(url, data=multipart_data, headers=_headers, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             self.__debug_response(response)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             self.__check_response(response)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 result = response.json()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             except LookupError as exc:  # pragma: no cover\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise UnexpectedResponseError(f'Unknown response encoding: {response.encoding}.') from exc\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             except UnicodeError as exc:  # pragma: no cover\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise UnexpectedResponseError(f'''Unknown response encoding (UTF-8 does not work) - \"{response.content.decode('utf-8', 'replace')}\".''') from exc\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             return result\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except requests.exceptions.ConnectionError as exc:  # pragma: no cover\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           raise ConnectionError(\"Connection error\", exc) from exc\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E           ConnectionError: [Errno Connection error] HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/2.0/ticket (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5068f48e80>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | rt/rest2.py:210: ConnectionError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | ______________________ test_ticket_operations_admincc_cc _______________________\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <urllib3.connection.HTTPConnection object at 0x7f5068f8f700>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def _new_conn(self) -> socket.socket:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :return: New socket connection.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           sock = connection.create_connection(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 (self._dns_host, self.port),\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 self.timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 source_address=self.source_address,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 socket_options=self.socket_options,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:200: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/connection.py:85: in create_connection\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     raise err\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | address = ('localhost', 8080), timeout = None, source_address = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | socket_options = [(6, 1, 1)]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def create_connection(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         address: tuple[str, int],\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         source_address: tuple[str, int] | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         socket_options: _TYPE_SOCKET_OPTIONS | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ) -> socket.socket:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Connect to *address* and return the socket object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         Convenience function.  Connect to *address* (a 2-tuple ``(host,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         port)``) and return the socket object.  Passing the optional\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         *timeout* parameter will set the timeout on the socket instance\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         before attempting to connect.  If no *timeout* is supplied, the\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         global default timeout setting returned by :func:`socket.getdefaulttimeout`\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         is used.  If *source_address* is set it must be a tuple of (host, port)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         for the socket to bind as a source address before making the connection.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         An host of '' or port 0 tells the OS to use the default.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         host, port = address\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if host.startswith(\"[\"):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             host = host.strip(\"[]\")\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         err = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # The original create_connection function always returns all records.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         family = allowed_gai_family()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             host.encode(\"idna\")\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except UnicodeError:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise LocationParseError(f\"'{host}', label empty or too long\") from None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             af, socktype, proto, canonname, sa = res\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             sock = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 sock = socket.socket(af, socktype, proto)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 # If provided, set socket level options before connecting.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 _set_socket_options(sock, socket_options)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if timeout is not _DEFAULT_TIMEOUT:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     sock.settimeout(timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if source_address:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     sock.bind(source_address)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >               sock.connect(sa)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E               ConnectionRefusedError: [Errno 111] Connection refused\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | The above exception was the direct cause of the following exception:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f50693ab970>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | method = 'POST', url = '/REST/2.0/ticket'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | body = b'{\"Queue\": \"General\", \"Subject\": \"Testing issue bubnLynZpRZRRmE\", \"Content\": \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\", \"ContentType\": \"text/plain\"}'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | headers = {'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '232', 'Content-Type': 'application/json', 'Authorization': 'Basic cm9vdDpwYXNzd29yZA=='}\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | redirect = False, assert_same_host = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | timeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | decode_content = False, response_kw = {}\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/REST/2.0/ticket', query=None, fragment=None)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | destination_scheme = None, conn = None, release_this_conn = True\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | http_tunnel_required = False, err = None, clean_exit = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def urlopen(  # type: ignore[override]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         method: str,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         url: str,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         body: _TYPE_BODY | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         headers: typing.Mapping[str, str] | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         retries: Retry | bool | int | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         redirect: bool = True,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         assert_same_host: bool = True,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         pool_timeout: int | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         release_conn: bool | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         chunked: bool = False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         preload_content: bool = True,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         decode_content: bool = True,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         **response_kw: typing.Any,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ) -> BaseHTTPResponse:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         Get a connection from the pool and perform an HTTP request. This is the\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         lowest level call for making a request, so you'll need to specify all\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         the raw details.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         .. note::\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            More commonly, it's appropriate to use a convenience method\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            such as :meth:`request`.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         .. note::\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            `release_conn` will only behave as expected if\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            `preload_content=False` because we want to make\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            `preload_content=False` the default behaviour someday soon without\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            breaking backwards compatibility.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param method:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param url:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             The URL to perform the request on.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param body:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param headers:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Dictionary of custom headers to send, such as User-Agent,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             these headers completely replace any pool-specific headers.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param retries:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Configure the number of retries to allow before raising a\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Pass ``None`` to retry until you receive a response. Pass a\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             over different types of retries.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Pass an integer number to retry connection errors that many times,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             but no other types of errors. Pass zero to never retry.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If ``False``, then retries are disabled and any exception is raised\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             the redirect response will be returned.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param redirect:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If True, automatically handle redirects (status codes 301, 302,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             will disable redirect, too.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param assert_same_host:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If ``True``, will make sure that the host of the pool requests is\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             consistent else will raise HostChangedError. When ``False``, you can\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             use the pool on an HTTP proxy and request foreign hosts.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param timeout:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If specified, overrides the default timeout for this one\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             request. It may be a float (in seconds) or an instance of\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             :class:`urllib3.util.Timeout`.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param pool_timeout:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If set and the pool is set to block=True, then this method will\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             connection is available within the time period.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param bool preload_content:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If True, the response's body will be preloaded into memory.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param bool decode_content:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If True, will attempt to decode the body based on the\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             'content-encoding' header.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param release_conn:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If False, then the urlopen call will not release the connection\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             back into the pool once a response is received (but will release if\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             you read the entire contents of the response such as when\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             `preload_content=True`). This is useful if you're not preloading\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             the response's content immediately. You will need to call\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             back into the pool. If None, it takes the value of ``preload_content``\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             which defaults to ``True``.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param bool chunked:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If True, urllib3 will send the body using chunked transfer\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             content-length form. Defaults to False.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param int body_pos:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Position to seek to in file-like body in the event of a retry or\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             redirect. Typically this won't need to be set because urllib3 will\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             auto-populate the value when needed.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         parsed_url = parse_url(url)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         destination_scheme = parsed_url.scheme\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if headers is None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             headers = self.headers\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if not isinstance(retries, Retry):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if release_conn is None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             release_conn = preload_content\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Check host\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if assert_same_host and not self.is_same_host(url):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise HostChangedError(self, url, retries)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Ensure that the URL we're connecting to is properly encoded\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if url.startswith(\"/\"):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             url = to_str(_encode_target(url))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             url = to_str(parsed_url.url)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         conn = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Track whether `conn` needs to be released before\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # returning/raising/recursing. Update this variable if necessary, and\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # leave `release_conn` constant throughout the function. That way, if\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # the function recurses, the original value of `release_conn` will be\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # passed down into the recursive call, and its value will be respected.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         #\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # See issue #651 [1] for details.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         #\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         release_this_conn = release_conn\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         http_tunnel_required = connection_requires_http_tunnel(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             self.proxy, self.proxy_config, destination_scheme\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # have to copy the headers dict so we can safely change it without those\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # changes being reflected in anyone else's copy.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if not http_tunnel_required:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Must keep the exception bound to a separate variable or else Python 3\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # complains about UnboundLocalError.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         err = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Keep track of whether we cleanly exited the except block. This\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # ensures we do proper cleanup in finally.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         clean_exit = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Rewind body position, if needed. Record current position\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # for future rewinds in the event of a redirect/retry.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         body_pos = set_file_position(body, body_pos)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Request a connection from the queue.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout_obj = self._get_timeout(timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             conn = self._get_conn(timeout=pool_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     self._prepare_proxy(conn)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     self._raise_timeout(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     raise\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # If we're going to release the connection in ``finally:``, then\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # the response doesn't need to know about the connection. Otherwise\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # it will also try to release it and we'll have a double-release\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # mess.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             response_conn = conn if not release_conn else None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Make the request on the HTTPConnection object\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           response = self._make_request(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 conn,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 method,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 url,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout=timeout_obj,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 body=body,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 headers=headers,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 chunked=chunked,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 retries=retries,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 response_conn=response_conn,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 preload_content=preload_content,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 decode_content=decode_content,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 **response_kw,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     conn.request(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.endheaders()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.send(msg)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.connect()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:236: in connect\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.sock = self._new_conn()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <urllib3.connection.HTTPConnection object at 0x7f5068f8f700>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def _new_conn(self) -> socket.socket:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :return: New socket connection.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             sock = connection.create_connection(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 (self._dns_host, self.port),\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 self.timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 source_address=self.source_address,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 socket_options=self.socket_options,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except socket.gaierror as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise NameResolutionError(self.host, self, e) from e\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except SocketTimeout as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise ConnectTimeoutError(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 f\"Connection to {self.host} timed out. (connect timeout={self.timeout})\",\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             ) from e\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except OSError as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           raise NewConnectionError(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 self, f\"Failed to establish a new connection: {e}\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             ) from e\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E           urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x7f5068f8f700>: Failed to establish a new connection: [Errno 111] Connection refused\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:215: NewConnectionError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | The above exception was the direct cause of the following exception:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <requests.adapters.HTTPAdapter object at 0x7f50693abdf0>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | request = <PreparedRequest [POST]>, stream = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | cert = None, proxies = OrderedDict()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def send(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param stream: (optional) Whether to stream the request content.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param timeout: (optional) How long to wait for the server to send\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             read timeout) <timeouts>` tuple.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :type timeout: float or tuple or urllib3 Timeout object\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             we verify the server's TLS certificate, or a string, in which case it\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             must be a path to a CA bundle to use\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :rtype: requests.Response\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             conn = self.get_connection(request.url, proxies)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except LocationValueError as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise InvalidURL(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self.cert_verify(conn, request.url, verify, cert)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         url = self.request_url(request, proxies)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self.add_headers(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             request,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             stream=stream,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout=timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             verify=verify,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             cert=cert,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             proxies=proxies,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if isinstance(timeout, tuple):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 connect, read = timeout\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             except ValueError:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise ValueError(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     f\"or a single float to set both timeouts to the same value.\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif isinstance(timeout, TimeoutSauce):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             pass\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           resp = conn.urlopen(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 method=request.method,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 url=url,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 body=request.body,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 headers=request.headers,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 redirect=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 assert_same_host=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 preload_content=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 decode_content=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 retries=self.max_retries,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout=timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 chunked=chunked,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     retries = retries.increment(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | method = 'POST', url = '/REST/2.0/ticket', response = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | error = NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5068f8f700>: Failed to establish a new connection: [Errno 111] Connection refused')\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _pool = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f50693ab970>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _stacktrace = <traceback object at 0x7f5068f93700>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def increment(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         method: str | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         url: str | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         response: BaseHTTPResponse | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         error: Exception | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         _pool: ConnectionPool | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         _stacktrace: TracebackType | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ) -> Retry:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param response: A response object, or None, if the server did not\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             return a response.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :type response: :class:`~urllib3.response.BaseHTTPResponse`\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param Exception error: An error encountered during the request, or\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             None if the response was received successfully.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :return: A new ``Retry`` object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if self.total is False and error:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Disabled, indicate to re-raise the error.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise reraise(type(error), error, _stacktrace)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         total = self.total\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if total is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             total -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         connect = self.connect\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         read = self.read\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         redirect = self.redirect\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         status_count = self.status\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         other = self.other\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         cause = \"unknown\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         status = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         redirect_location = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if error and self._is_connection_error(error):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Connect retry?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if connect is False:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise reraise(type(error), error, _stacktrace)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             elif connect is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 connect -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif error and self._is_read_error(error):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Read retry?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if read is False or method is None or not self._is_method_retryable(method):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise reraise(type(error), error, _stacktrace)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             elif read is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 read -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif error:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Other retry?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if other is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 other -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif response and response.get_redirect_location():\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Redirect retry?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if redirect is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 redirect -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             cause = \"too many redirects\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             response_redirect_location = response.get_redirect_location()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if response_redirect_location:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 redirect_location = response_redirect_location\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             status = response.status\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Incrementing because of a server error like a 500 in\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # status_forcelist and the given method is in the allowed_methods\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             cause = ResponseError.GENERIC_ERROR\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if response and response.status:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if status_count is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     status_count -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 status = response.status\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         history = self.history + (\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             RequestHistory(method, url, error, status, redirect_location),\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         new_retry = self.new(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             total=total,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             connect=connect,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             read=read,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             redirect=redirect,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             status=status_count,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             other=other,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             history=history,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if new_retry.is_exhausted():\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             reason = error or ResponseError(cause)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/2.0/ticket (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5068f8f700>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:515: MaxRetryError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | During handling of the above exception, another exception occurred:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <rt.rest2.Rt object at 0x7f50693ab640>, selector = 'ticket'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | get_params = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | json_data = {'Content': 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.', 'ContentType': 'text/plain', 'Queue': 'General', 'Subject': 'Testing issue bubnLynZpRZRRmE'}\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | post_data = None, attachments = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def __request(self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   selector: str,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   get_params: typing.Optional[typing.Dict[str, typing.Any]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   json_data: typing.Optional[typing.Union[typing.Dict[str, typing.Any], typing.List[typing.Any]]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   post_data: typing.Optional[typing.Dict[str, typing.Any]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   attachments: typing.Optional[typing.Sequence[Attachment]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   ) -> typing.Union[typing.Dict[str, typing.Any], typing.List[str]]:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\" General request for :term:`API`.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param selector: End part of URL which completes self.url parameter\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                            set during class initialization.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                            E.g.: ``ticket/123456/show``\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param get_params: Parameters to add for a GET request.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param json_data: JSON request to send to the API.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param post_data: Dictionary with POST method fields\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param attachments: Optional list of :py:class:`~rt.rest2.Attachment` objects\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :returns: dict or list depending on request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :raises AuthorizationError: In case that request is called without previous\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                                     login or login attempt failed.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :raises ConnectionError: In case of connection error.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             url = str(urljoin(self.url, selector))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if not attachments:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if json_data:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >                   response = self.session.post(url, json=json_data, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | rt/rest2.py:182: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:637: in post\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     return self.request(\"POST\", url, data=data, json=json, **kwargs)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     resp = self.send(prep, **send_kwargs)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     r = adapter.send(request, **kwargs)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <requests.adapters.HTTPAdapter object at 0x7f50693abdf0>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | request = <PreparedRequest [POST]>, stream = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | cert = None, proxies = OrderedDict()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def send(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param stream: (optional) Whether to stream the request content.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param timeout: (optional) How long to wait for the server to send\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             read timeout) <timeouts>` tuple.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :type timeout: float or tuple or urllib3 Timeout object\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             we verify the server's TLS certificate, or a string, in which case it\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             must be a path to a CA bundle to use\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :rtype: requests.Response\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             conn = self.get_connection(request.url, proxies)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except LocationValueError as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise InvalidURL(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self.cert_verify(conn, request.url, verify, cert)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         url = self.request_url(request, proxies)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self.add_headers(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             request,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             stream=stream,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout=timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             verify=verify,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             cert=cert,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             proxies=proxies,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if isinstance(timeout, tuple):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 connect, read = timeout\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             except ValueError:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise ValueError(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     f\"or a single float to set both timeouts to the same value.\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif isinstance(timeout, TimeoutSauce):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             pass\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             resp = conn.urlopen(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 method=request.method,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 url=url,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 body=request.body,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 headers=request.headers,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 redirect=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 assert_same_host=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 preload_content=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 decode_content=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 retries=self.max_retries,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout=timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 chunked=chunked,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except (ProtocolError, OSError) as err:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise ConnectionError(err, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except MaxRetryError as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if isinstance(e.reason, ConnectTimeoutError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 # TODO: Remove this in 3.0.0: see #2811\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if not isinstance(e.reason, NewConnectionError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     raise ConnectTimeout(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if isinstance(e.reason, ResponseError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise RetryError(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if isinstance(e.reason, _ProxyError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise ProxyError(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if isinstance(e.reason, _SSLError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 # This branch is for urllib3 v1.22 and later.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise SSLError(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           raise ConnectionError(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E           requests.exceptions.ConnectionError: HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/2.0/ticket (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5068f8f700>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:519: ConnectionError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | The above exception was the direct cause of the following exception:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | rt_connection = <rt.rest2.Rt object at 0x7f50693ab640>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def test_ticket_operations_admincc_cc(rt_connection: rt.rest2.Rt):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         ticket_subject = f'Testing issue {random_string()}'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         ticket_text = 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         def compare_list(from_list: typing.List[str], ticket_list: typing.List[dict]) -> bool:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             \"\"\"Lists (Requestor, AdminCc, Cc) returned from REST2 contain a list of dicts with additional user information.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Thus a simple compare of both lists is not enough.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if len(from_list) != len(ticket_list):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 return False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             to_list = [entry['id'] for entry in ticket_list]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             diff = set(from_list) ^ set(to_list)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             return not diff\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >       ticket_id = rt_connection.create_ticket(subject=ticket_subject, content=ticket_text, queue=RT_QUEUE)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | tests/test_basic.py:321: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | rt/rest2.py:617: in create_ticket\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     res = self.__request('ticket', json_data=ticket_data, attachments=attachments)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <rt.rest2.Rt object at 0x7f50693ab640>, selector = 'ticket'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | get_params = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | json_data = {'Content': 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.', 'ContentType': 'text/plain', 'Queue': 'General', 'Subject': 'Testing issue bubnLynZpRZRRmE'}\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | post_data = None, attachments = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def __request(self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   selector: str,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   get_params: typing.Optional[typing.Dict[str, typing.Any]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   json_data: typing.Optional[typing.Union[typing.Dict[str, typing.Any], typing.List[typing.Any]]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   post_data: typing.Optional[typing.Dict[str, typing.Any]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   attachments: typing.Optional[typing.Sequence[Attachment]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   ) -> typing.Union[typing.Dict[str, typing.Any], typing.List[str]]:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\" General request for :term:`API`.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param selector: End part of URL which completes self.url parameter\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                            set during class initialization.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                            E.g.: ``ticket/123456/show``\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param get_params: Parameters to add for a GET request.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param json_data: JSON request to send to the API.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param post_data: Dictionary with POST method fields\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param attachments: Optional list of :py:class:`~rt.rest2.Attachment` objects\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :returns: dict or list depending on request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :raises AuthorizationError: In case that request is called without previous\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                                     login or login attempt failed.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :raises ConnectionError: In case of connection error.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             url = str(urljoin(self.url, selector))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if not attachments:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if json_data:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     response = self.session.post(url, json=json_data, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 elif post_data:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     response = self.session.post(url, data=post_data, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     response = self.session.get(url, params=get_params, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 fields: typing.List[typing.Tuple[str, typing.Any]] = [('Attachments', attachment.multipart_form_element()) for attachment in attachments]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 fields.append(('JSON', json.dumps(json_data)))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 multipart_data = requests_toolbelt.MultipartEncoder(fields=fields)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 _headers = dict(self.session.headers)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 _headers['content-type'] = multipart_data.content_type\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 response = self.session.post(url, data=multipart_data, headers=_headers, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             self.__debug_response(response)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             self.__check_response(response)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 result = response.json()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             except LookupError as exc:  # pragma: no cover\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise UnexpectedResponseError(f'Unknown response encoding: {response.encoding}.') from exc\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             except UnicodeError as exc:  # pragma: no cover\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise UnexpectedResponseError(f'''Unknown response encoding (UTF-8 does not work) - \"{response.content.decode('utf-8', 'replace')}\".''') from exc\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             return result\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except requests.exceptions.ConnectionError as exc:  # pragma: no cover\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           raise ConnectionError(\"Connection error\", exc) from exc\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E           ConnectionError: [Errno Connection error] HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/2.0/ticket (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5068f8f700>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | rt/rest2.py:210: ConnectionError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | __________________________________ test_users __________________________________\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <urllib3.connection.HTTPConnection object at 0x7f5068d30400>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def _new_conn(self) -> socket.socket:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :return: New socket connection.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           sock = connection.create_connection(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 (self._dns_host, self.port),\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 self.timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 source_address=self.source_address,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 socket_options=self.socket_options,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:200: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/connection.py:85: in create_connection\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     raise err\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | address = ('localhost', 8080), timeout = None, source_address = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | socket_options = [(6, 1, 1)]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def create_connection(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         address: tuple[str, int],\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         source_address: tuple[str, int] | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         socket_options: _TYPE_SOCKET_OPTIONS | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ) -> socket.socket:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Connect to *address* and return the socket object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         Convenience function.  Connect to *address* (a 2-tuple ``(host,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         port)``) and return the socket object.  Passing the optional\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         *timeout* parameter will set the timeout on the socket instance\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         before attempting to connect.  If no *timeout* is supplied, the\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         global default timeout setting returned by :func:`socket.getdefaulttimeout`\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         is used.  If *source_address* is set it must be a tuple of (host, port)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         for the socket to bind as a source address before making the connection.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         An host of '' or port 0 tells the OS to use the default.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         host, port = address\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if host.startswith(\"[\"):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             host = host.strip(\"[]\")\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         err = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # The original create_connection function always returns all records.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         family = allowed_gai_family()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             host.encode(\"idna\")\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except UnicodeError:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise LocationParseError(f\"'{host}', label empty or too long\") from None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             af, socktype, proto, canonname, sa = res\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             sock = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 sock = socket.socket(af, socktype, proto)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 # If provided, set socket level options before connecting.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 _set_socket_options(sock, socket_options)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if timeout is not _DEFAULT_TIMEOUT:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     sock.settimeout(timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if source_address:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     sock.bind(source_address)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >               sock.connect(sa)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E               ConnectionRefusedError: [Errno 111] Connection refused\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | The above exception was the direct cause of the following exception:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f50693ab970>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | method = 'GET', url = '/REST/2.0/user/tester1@example.com', body = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | headers = {'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Authorization': 'Basic cm9vdDpwYXNzd29yZA=='}\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | redirect = False, assert_same_host = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | timeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | decode_content = False, response_kw = {}\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/REST/2.0/user/tester1@example.com', query=None, fragment=None)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | destination_scheme = None, conn = None, release_this_conn = True\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | http_tunnel_required = False, err = None, clean_exit = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def urlopen(  # type: ignore[override]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         method: str,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         url: str,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         body: _TYPE_BODY | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         headers: typing.Mapping[str, str] | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         retries: Retry | bool | int | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         redirect: bool = True,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         assert_same_host: bool = True,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         pool_timeout: int | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         release_conn: bool | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         chunked: bool = False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         preload_content: bool = True,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         decode_content: bool = True,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         **response_kw: typing.Any,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ) -> BaseHTTPResponse:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         Get a connection from the pool and perform an HTTP request. This is the\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         lowest level call for making a request, so you'll need to specify all\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         the raw details.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         .. note::\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            More commonly, it's appropriate to use a convenience method\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            such as :meth:`request`.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         .. note::\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            `release_conn` will only behave as expected if\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            `preload_content=False` because we want to make\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            `preload_content=False` the default behaviour someday soon without\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            breaking backwards compatibility.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param method:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param url:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             The URL to perform the request on.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param body:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param headers:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Dictionary of custom headers to send, such as User-Agent,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             these headers completely replace any pool-specific headers.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param retries:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Configure the number of retries to allow before raising a\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Pass ``None`` to retry until you receive a response. Pass a\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             over different types of retries.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Pass an integer number to retry connection errors that many times,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             but no other types of errors. Pass zero to never retry.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If ``False``, then retries are disabled and any exception is raised\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             the redirect response will be returned.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param redirect:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If True, automatically handle redirects (status codes 301, 302,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             will disable redirect, too.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param assert_same_host:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If ``True``, will make sure that the host of the pool requests is\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             consistent else will raise HostChangedError. When ``False``, you can\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             use the pool on an HTTP proxy and request foreign hosts.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param timeout:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If specified, overrides the default timeout for this one\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             request. It may be a float (in seconds) or an instance of\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             :class:`urllib3.util.Timeout`.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param pool_timeout:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If set and the pool is set to block=True, then this method will\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             connection is available within the time period.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param bool preload_content:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If True, the response's body will be preloaded into memory.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param bool decode_content:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If True, will attempt to decode the body based on the\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             'content-encoding' header.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param release_conn:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If False, then the urlopen call will not release the connection\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             back into the pool once a response is received (but will release if\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             you read the entire contents of the response such as when\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             `preload_content=True`). This is useful if you're not preloading\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             the response's content immediately. You will need to call\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             back into the pool. If None, it takes the value of ``preload_content``\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             which defaults to ``True``.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param bool chunked:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If True, urllib3 will send the body using chunked transfer\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             content-length form. Defaults to False.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param int body_pos:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Position to seek to in file-like body in the event of a retry or\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             redirect. Typically this won't need to be set because urllib3 will\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             auto-populate the value when needed.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         parsed_url = parse_url(url)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         destination_scheme = parsed_url.scheme\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if headers is None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             headers = self.headers\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if not isinstance(retries, Retry):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if release_conn is None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             release_conn = preload_content\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Check host\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if assert_same_host and not self.is_same_host(url):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise HostChangedError(self, url, retries)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Ensure that the URL we're connecting to is properly encoded\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if url.startswith(\"/\"):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             url = to_str(_encode_target(url))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             url = to_str(parsed_url.url)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         conn = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Track whether `conn` needs to be released before\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # returning/raising/recursing. Update this variable if necessary, and\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # leave `release_conn` constant throughout the function. That way, if\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # the function recurses, the original value of `release_conn` will be\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # passed down into the recursive call, and its value will be respected.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         #\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # See issue #651 [1] for details.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         #\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         release_this_conn = release_conn\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         http_tunnel_required = connection_requires_http_tunnel(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             self.proxy, self.proxy_config, destination_scheme\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # have to copy the headers dict so we can safely change it without those\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # changes being reflected in anyone else's copy.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if not http_tunnel_required:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Must keep the exception bound to a separate variable or else Python 3\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # complains about UnboundLocalError.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         err = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Keep track of whether we cleanly exited the except block. This\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # ensures we do proper cleanup in finally.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         clean_exit = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Rewind body position, if needed. Record current position\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # for future rewinds in the event of a redirect/retry.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         body_pos = set_file_position(body, body_pos)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Request a connection from the queue.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout_obj = self._get_timeout(timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             conn = self._get_conn(timeout=pool_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     self._prepare_proxy(conn)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     self._raise_timeout(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     raise\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # If we're going to release the connection in ``finally:``, then\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # the response doesn't need to know about the connection. Otherwise\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # it will also try to release it and we'll have a double-release\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # mess.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             response_conn = conn if not release_conn else None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Make the request on the HTTPConnection object\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           response = self._make_request(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 conn,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 method,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 url,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout=timeout_obj,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 body=body,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 headers=headers,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 chunked=chunked,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 retries=retries,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 response_conn=response_conn,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 preload_content=preload_content,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 decode_content=decode_content,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 **response_kw,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     conn.request(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.endheaders()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.send(msg)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.connect()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:236: in connect\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.sock = self._new_conn()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <urllib3.connection.HTTPConnection object at 0x7f5068d30400>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def _new_conn(self) -> socket.socket:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :return: New socket connection.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             sock = connection.create_connection(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 (self._dns_host, self.port),\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 self.timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 source_address=self.source_address,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 socket_options=self.socket_options,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except socket.gaierror as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise NameResolutionError(self.host, self, e) from e\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except SocketTimeout as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise ConnectTimeoutError(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 f\"Connection to {self.host} timed out. (connect timeout={self.timeout})\",\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             ) from e\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except OSError as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           raise NewConnectionError(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 self, f\"Failed to establish a new connection: {e}\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             ) from e\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E           urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x7f5068d30400>: Failed to establish a new connection: [Errno 111] Connection refused\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:215: NewConnectionError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | The above exception was the direct cause of the following exception:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <requests.adapters.HTTPAdapter object at 0x7f50693abdf0>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | request = <PreparedRequest [GET]>, stream = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | cert = None, proxies = OrderedDict()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def send(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param stream: (optional) Whether to stream the request content.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param timeout: (optional) How long to wait for the server to send\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             read timeout) <timeouts>` tuple.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :type timeout: float or tuple or urllib3 Timeout object\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             we verify the server's TLS certificate, or a string, in which case it\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             must be a path to a CA bundle to use\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :rtype: requests.Response\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             conn = self.get_connection(request.url, proxies)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except LocationValueError as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise InvalidURL(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self.cert_verify(conn, request.url, verify, cert)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         url = self.request_url(request, proxies)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self.add_headers(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             request,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             stream=stream,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout=timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             verify=verify,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             cert=cert,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             proxies=proxies,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if isinstance(timeout, tuple):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 connect, read = timeout\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             except ValueError:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise ValueError(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     f\"or a single float to set both timeouts to the same value.\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif isinstance(timeout, TimeoutSauce):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             pass\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           resp = conn.urlopen(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 method=request.method,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 url=url,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 body=request.body,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 headers=request.headers,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 redirect=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 assert_same_host=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 preload_content=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 decode_content=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 retries=self.max_retries,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout=timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 chunked=chunked,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     retries = retries.increment(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | method = 'GET', url = '/REST/2.0/user/tester1@example.com', response = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | error = NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5068d30400>: Failed to establish a new connection: [Errno 111] Connection refused')\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _pool = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f50693ab970>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _stacktrace = <traceback object at 0x7f5069067b00>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def increment(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         method: str | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         url: str | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         response: BaseHTTPResponse | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         error: Exception | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         _pool: ConnectionPool | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         _stacktrace: TracebackType | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ) -> Retry:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param response: A response object, or None, if the server did not\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             return a response.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :type response: :class:`~urllib3.response.BaseHTTPResponse`\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param Exception error: An error encountered during the request, or\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             None if the response was received successfully.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :return: A new ``Retry`` object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if self.total is False and error:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Disabled, indicate to re-raise the error.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise reraise(type(error), error, _stacktrace)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         total = self.total\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if total is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             total -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         connect = self.connect\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         read = self.read\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         redirect = self.redirect\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         status_count = self.status\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         other = self.other\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         cause = \"unknown\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         status = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         redirect_location = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if error and self._is_connection_error(error):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Connect retry?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if connect is False:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise reraise(type(error), error, _stacktrace)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             elif connect is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 connect -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif error and self._is_read_error(error):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Read retry?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if read is False or method is None or not self._is_method_retryable(method):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise reraise(type(error), error, _stacktrace)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             elif read is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 read -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif error:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Other retry?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if other is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 other -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif response and response.get_redirect_location():\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Redirect retry?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if redirect is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 redirect -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             cause = \"too many redirects\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             response_redirect_location = response.get_redirect_location()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if response_redirect_location:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 redirect_location = response_redirect_location\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             status = response.status\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Incrementing because of a server error like a 500 in\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # status_forcelist and the given method is in the allowed_methods\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             cause = ResponseError.GENERIC_ERROR\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if response and response.status:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if status_count is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     status_count -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 status = response.status\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         history = self.history + (\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             RequestHistory(method, url, error, status, redirect_location),\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         new_retry = self.new(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             total=total,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             connect=connect,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             read=read,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             redirect=redirect,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             status=status_count,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             other=other,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             history=history,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if new_retry.is_exhausted():\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             reason = error or ResponseError(cause)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/2.0/user/tester1@example.com (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5068d30400>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:515: MaxRetryError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | During handling of the above exception, another exception occurred:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <rt.rest2.Rt object at 0x7f50693ab640>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | selector = 'user/tester1@example.com', get_params = None, json_data = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | post_data = None, attachments = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def __request(self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   selector: str,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   get_params: typing.Optional[typing.Dict[str, typing.Any]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   json_data: typing.Optional[typing.Union[typing.Dict[str, typing.Any], typing.List[typing.Any]]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   post_data: typing.Optional[typing.Dict[str, typing.Any]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   attachments: typing.Optional[typing.Sequence[Attachment]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   ) -> typing.Union[typing.Dict[str, typing.Any], typing.List[str]]:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\" General request for :term:`API`.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param selector: End part of URL which completes self.url parameter\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                            set during class initialization.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                            E.g.: ``ticket/123456/show``\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param get_params: Parameters to add for a GET request.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param json_data: JSON request to send to the API.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param post_data: Dictionary with POST method fields\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param attachments: Optional list of :py:class:`~rt.rest2.Attachment` objects\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :returns: dict or list depending on request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :raises AuthorizationError: In case that request is called without previous\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                                     login or login attempt failed.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :raises ConnectionError: In case of connection error.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             url = str(urljoin(self.url, selector))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if not attachments:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if json_data:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     response = self.session.post(url, json=json_data, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 elif post_data:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     response = self.session.post(url, data=post_data, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >                   response = self.session.get(url, params=get_params, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | rt/rest2.py:186: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     return self.request(\"GET\", url, **kwargs)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     resp = self.send(prep, **send_kwargs)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     r = adapter.send(request, **kwargs)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <requests.adapters.HTTPAdapter object at 0x7f50693abdf0>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | request = <PreparedRequest [GET]>, stream = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | cert = None, proxies = OrderedDict()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def send(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param stream: (optional) Whether to stream the request content.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param timeout: (optional) How long to wait for the server to send\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             read timeout) <timeouts>` tuple.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :type timeout: float or tuple or urllib3 Timeout object\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             we verify the server's TLS certificate, or a string, in which case it\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             must be a path to a CA bundle to use\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :rtype: requests.Response\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             conn = self.get_connection(request.url, proxies)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except LocationValueError as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise InvalidURL(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self.cert_verify(conn, request.url, verify, cert)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         url = self.request_url(request, proxies)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self.add_headers(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             request,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             stream=stream,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout=timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             verify=verify,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             cert=cert,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             proxies=proxies,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if isinstance(timeout, tuple):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 connect, read = timeout\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             except ValueError:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise ValueError(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     f\"or a single float to set both timeouts to the same value.\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif isinstance(timeout, TimeoutSauce):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             pass\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             resp = conn.urlopen(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 method=request.method,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 url=url,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 body=request.body,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 headers=request.headers,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 redirect=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 assert_same_host=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 preload_content=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 decode_content=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 retries=self.max_retries,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout=timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 chunked=chunked,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except (ProtocolError, OSError) as err:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise ConnectionError(err, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except MaxRetryError as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if isinstance(e.reason, ConnectTimeoutError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 # TODO: Remove this in 3.0.0: see #2811\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if not isinstance(e.reason, NewConnectionError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     raise ConnectTimeout(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if isinstance(e.reason, ResponseError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise RetryError(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if isinstance(e.reason, _ProxyError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise ProxyError(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if isinstance(e.reason, _SSLError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 # This branch is for urllib3 v1.22 and later.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise SSLError(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           raise ConnectionError(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E           requests.exceptions.ConnectionError: HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/2.0/user/tester1@example.com (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5068d30400>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:519: ConnectionError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | The above exception was the direct cause of the following exception:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | rt_connection = <rt.rest2.Rt object at 0x7f50693ab640>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def test_users(rt_connection: rt.rest2.Rt):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >       assert rt_connection.get_user('tester1@example.com') is not None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | tests/test_basic.py:364: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | rt/rest2.py:940: in get_user\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     res = self.__request(f'user/{user_id}')\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <rt.rest2.Rt object at 0x7f50693ab640>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | selector = 'user/tester1@example.com', get_params = None, json_data = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | post_data = None, attachments = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def __request(self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   selector: str,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   get_params: typing.Optional[typing.Dict[str, typing.Any]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   json_data: typing.Optional[typing.Union[typing.Dict[str, typing.Any], typing.List[typing.Any]]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   post_data: typing.Optional[typing.Dict[str, typing.Any]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   attachments: typing.Optional[typing.Sequence[Attachment]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   ) -> typing.Union[typing.Dict[str, typing.Any], typing.List[str]]:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\" General request for :term:`API`.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param selector: End part of URL which completes self.url parameter\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                            set during class initialization.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                            E.g.: ``ticket/123456/show``\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param get_params: Parameters to add for a GET request.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param json_data: JSON request to send to the API.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param post_data: Dictionary with POST method fields\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param attachments: Optional list of :py:class:`~rt.rest2.Attachment` objects\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :returns: dict or list depending on request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :raises AuthorizationError: In case that request is called without previous\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                                     login or login attempt failed.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :raises ConnectionError: In case of connection error.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             url = str(urljoin(self.url, selector))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if not attachments:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if json_data:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     response = self.session.post(url, json=json_data, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 elif post_data:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     response = self.session.post(url, data=post_data, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     response = self.session.get(url, params=get_params, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 fields: typing.List[typing.Tuple[str, typing.Any]] = [('Attachments', attachment.multipart_form_element()) for attachment in attachments]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 fields.append(('JSON', json.dumps(json_data)))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 multipart_data = requests_toolbelt.MultipartEncoder(fields=fields)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 _headers = dict(self.session.headers)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 _headers['content-type'] = multipart_data.content_type\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 response = self.session.post(url, data=multipart_data, headers=_headers, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             self.__debug_response(response)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             self.__check_response(response)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 result = response.json()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             except LookupError as exc:  # pragma: no cover\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise UnexpectedResponseError(f'Unknown response encoding: {response.encoding}.') from exc\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             except UnicodeError as exc:  # pragma: no cover\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise UnexpectedResponseError(f'''Unknown response encoding (UTF-8 does not work) - \"{response.content.decode('utf-8', 'replace')}\".''') from exc\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             return result\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except requests.exceptions.ConnectionError as exc:  # pragma: no cover\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           raise ConnectionError(\"Connection error\", exc) from exc\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E           ConnectionError: [Errno Connection error] HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/2.0/user/tester1@example.com (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5068d30400>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | rt/rest2.py:210: ConnectionError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _________________________________ test_queues __________________________________\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <urllib3.connection.HTTPConnection object at 0x7f5069261610>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def _new_conn(self) -> socket.socket:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :return: New socket connection.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           sock = connection.create_connection(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 (self._dns_host, self.port),\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 self.timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 source_address=self.source_address,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 socket_options=self.socket_options,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:200: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/connection.py:85: in create_connection\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     raise err\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | address = ('localhost', 8080), timeout = None, source_address = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | socket_options = [(6, 1, 1)]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def create_connection(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         address: tuple[str, int],\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         source_address: tuple[str, int] | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         socket_options: _TYPE_SOCKET_OPTIONS | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ) -> socket.socket:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Connect to *address* and return the socket object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         Convenience function.  Connect to *address* (a 2-tuple ``(host,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         port)``) and return the socket object.  Passing the optional\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         *timeout* parameter will set the timeout on the socket instance\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         before attempting to connect.  If no *timeout* is supplied, the\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         global default timeout setting returned by :func:`socket.getdefaulttimeout`\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         is used.  If *source_address* is set it must be a tuple of (host, port)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         for the socket to bind as a source address before making the connection.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         An host of '' or port 0 tells the OS to use the default.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         host, port = address\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if host.startswith(\"[\"):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             host = host.strip(\"[]\")\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         err = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # The original create_connection function always returns all records.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         family = allowed_gai_family()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             host.encode(\"idna\")\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except UnicodeError:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise LocationParseError(f\"'{host}', label empty or too long\") from None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             af, socktype, proto, canonname, sa = res\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             sock = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 sock = socket.socket(af, socktype, proto)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 # If provided, set socket level options before connecting.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 _set_socket_options(sock, socket_options)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if timeout is not _DEFAULT_TIMEOUT:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     sock.settimeout(timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if source_address:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     sock.bind(source_address)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >               sock.connect(sa)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E               ConnectionRefusedError: [Errno 111] Connection refused\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | The above exception was the direct cause of the following exception:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f50693ab970>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | method = 'GET', url = '/REST/2.0/queue/General', body = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | headers = {'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Authorization': 'Basic cm9vdDpwYXNzd29yZA=='}\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | redirect = False, assert_same_host = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | timeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | decode_content = False, response_kw = {}\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/REST/2.0/queue/General', query=None, fragment=None)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | destination_scheme = None, conn = None, release_this_conn = True\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | http_tunnel_required = False, err = None, clean_exit = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def urlopen(  # type: ignore[override]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         method: str,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         url: str,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         body: _TYPE_BODY | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         headers: typing.Mapping[str, str] | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         retries: Retry | bool | int | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         redirect: bool = True,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         assert_same_host: bool = True,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         pool_timeout: int | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         release_conn: bool | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         chunked: bool = False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         preload_content: bool = True,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         decode_content: bool = True,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         **response_kw: typing.Any,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ) -> BaseHTTPResponse:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         Get a connection from the pool and perform an HTTP request. This is the\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         lowest level call for making a request, so you'll need to specify all\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         the raw details.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         .. note::\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            More commonly, it's appropriate to use a convenience method\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            such as :meth:`request`.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         .. note::\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            `release_conn` will only behave as expected if\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            `preload_content=False` because we want to make\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            `preload_content=False` the default behaviour someday soon without\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            breaking backwards compatibility.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param method:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param url:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             The URL to perform the request on.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param body:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param headers:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Dictionary of custom headers to send, such as User-Agent,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             these headers completely replace any pool-specific headers.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param retries:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Configure the number of retries to allow before raising a\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Pass ``None`` to retry until you receive a response. Pass a\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             over different types of retries.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Pass an integer number to retry connection errors that many times,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             but no other types of errors. Pass zero to never retry.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If ``False``, then retries are disabled and any exception is raised\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             the redirect response will be returned.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param redirect:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If True, automatically handle redirects (status codes 301, 302,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             will disable redirect, too.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param assert_same_host:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If ``True``, will make sure that the host of the pool requests is\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             consistent else will raise HostChangedError. When ``False``, you can\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             use the pool on an HTTP proxy and request foreign hosts.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param timeout:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If specified, overrides the default timeout for this one\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             request. It may be a float (in seconds) or an instance of\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             :class:`urllib3.util.Timeout`.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param pool_timeout:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If set and the pool is set to block=True, then this method will\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             connection is available within the time period.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param bool preload_content:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If True, the response's body will be preloaded into memory.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param bool decode_content:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If True, will attempt to decode the body based on the\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             'content-encoding' header.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param release_conn:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If False, then the urlopen call will not release the connection\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             back into the pool once a response is received (but will release if\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             you read the entire contents of the response such as when\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             `preload_content=True`). This is useful if you're not preloading\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             the response's content immediately. You will need to call\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             back into the pool. If None, it takes the value of ``preload_content``\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             which defaults to ``True``.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param bool chunked:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If True, urllib3 will send the body using chunked transfer\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             content-length form. Defaults to False.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param int body_pos:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Position to seek to in file-like body in the event of a retry or\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             redirect. Typically this won't need to be set because urllib3 will\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             auto-populate the value when needed.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         parsed_url = parse_url(url)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         destination_scheme = parsed_url.scheme\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if headers is None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             headers = self.headers\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if not isinstance(retries, Retry):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if release_conn is None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             release_conn = preload_content\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Check host\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if assert_same_host and not self.is_same_host(url):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise HostChangedError(self, url, retries)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Ensure that the URL we're connecting to is properly encoded\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if url.startswith(\"/\"):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             url = to_str(_encode_target(url))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             url = to_str(parsed_url.url)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         conn = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Track whether `conn` needs to be released before\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # returning/raising/recursing. Update this variable if necessary, and\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # leave `release_conn` constant throughout the function. That way, if\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # the function recurses, the original value of `release_conn` will be\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # passed down into the recursive call, and its value will be respected.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         #\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # See issue #651 [1] for details.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         #\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         release_this_conn = release_conn\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         http_tunnel_required = connection_requires_http_tunnel(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             self.proxy, self.proxy_config, destination_scheme\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # have to copy the headers dict so we can safely change it without those\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # changes being reflected in anyone else's copy.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if not http_tunnel_required:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Must keep the exception bound to a separate variable or else Python 3\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # complains about UnboundLocalError.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         err = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Keep track of whether we cleanly exited the except block. This\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # ensures we do proper cleanup in finally.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         clean_exit = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Rewind body position, if needed. Record current position\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # for future rewinds in the event of a redirect/retry.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         body_pos = set_file_position(body, body_pos)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Request a connection from the queue.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout_obj = self._get_timeout(timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             conn = self._get_conn(timeout=pool_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     self._prepare_proxy(conn)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     self._raise_timeout(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     raise\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # If we're going to release the connection in ``finally:``, then\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # the response doesn't need to know about the connection. Otherwise\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # it will also try to release it and we'll have a double-release\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # mess.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             response_conn = conn if not release_conn else None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Make the request on the HTTPConnection object\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           response = self._make_request(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 conn,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 method,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 url,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout=timeout_obj,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 body=body,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 headers=headers,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 chunked=chunked,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 retries=retries,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 response_conn=response_conn,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 preload_content=preload_content,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 decode_content=decode_content,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 **response_kw,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     conn.request(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.endheaders()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.send(msg)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.connect()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:236: in connect\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.sock = self._new_conn()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <urllib3.connection.HTTPConnection object at 0x7f5069261610>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def _new_conn(self) -> socket.socket:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :return: New socket connection.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             sock = connection.create_connection(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 (self._dns_host, self.port),\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 self.timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 source_address=self.source_address,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 socket_options=self.socket_options,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except socket.gaierror as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise NameResolutionError(self.host, self, e) from e\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except SocketTimeout as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise ConnectTimeoutError(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 f\"Connection to {self.host} timed out. (connect timeout={self.timeout})\",\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             ) from e\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except OSError as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           raise NewConnectionError(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 self, f\"Failed to establish a new connection: {e}\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             ) from e\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E           urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x7f5069261610>: Failed to establish a new connection: [Errno 111] Connection refused\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:215: NewConnectionError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | The above exception was the direct cause of the following exception:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <requests.adapters.HTTPAdapter object at 0x7f50693abdf0>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | request = <PreparedRequest [GET]>, stream = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | cert = None, proxies = OrderedDict()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def send(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param stream: (optional) Whether to stream the request content.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param timeout: (optional) How long to wait for the server to send\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             read timeout) <timeouts>` tuple.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :type timeout: float or tuple or urllib3 Timeout object\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             we verify the server's TLS certificate, or a string, in which case it\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             must be a path to a CA bundle to use\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :rtype: requests.Response\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             conn = self.get_connection(request.url, proxies)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except LocationValueError as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise InvalidURL(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self.cert_verify(conn, request.url, verify, cert)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         url = self.request_url(request, proxies)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self.add_headers(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             request,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             stream=stream,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout=timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             verify=verify,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             cert=cert,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             proxies=proxies,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if isinstance(timeout, tuple):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 connect, read = timeout\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             except ValueError:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise ValueError(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     f\"or a single float to set both timeouts to the same value.\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif isinstance(timeout, TimeoutSauce):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             pass\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           resp = conn.urlopen(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 method=request.method,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 url=url,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 body=request.body,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 headers=request.headers,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 redirect=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 assert_same_host=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 preload_content=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 decode_content=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 retries=self.max_retries,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout=timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 chunked=chunked,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     retries = retries.increment(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | method = 'GET', url = '/REST/2.0/queue/General', response = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | error = NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5069261610>: Failed to establish a new connection: [Errno 111] Connection refused')\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _pool = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f50693ab970>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _stacktrace = <traceback object at 0x7f50691109c0>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def increment(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         method: str | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         url: str | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         response: BaseHTTPResponse | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         error: Exception | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         _pool: ConnectionPool | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         _stacktrace: TracebackType | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ) -> Retry:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param response: A response object, or None, if the server did not\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             return a response.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :type response: :class:`~urllib3.response.BaseHTTPResponse`\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param Exception error: An error encountered during the request, or\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             None if the response was received successfully.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :return: A new ``Retry`` object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if self.total is False and error:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Disabled, indicate to re-raise the error.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise reraise(type(error), error, _stacktrace)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         total = self.total\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if total is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             total -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         connect = self.connect\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         read = self.read\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         redirect = self.redirect\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         status_count = self.status\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         other = self.other\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         cause = \"unknown\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         status = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         redirect_location = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if error and self._is_connection_error(error):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Connect retry?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if connect is False:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise reraise(type(error), error, _stacktrace)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             elif connect is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 connect -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif error and self._is_read_error(error):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Read retry?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if read is False or method is None or not self._is_method_retryable(method):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise reraise(type(error), error, _stacktrace)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             elif read is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 read -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif error:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Other retry?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if other is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 other -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif response and response.get_redirect_location():\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Redirect retry?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if redirect is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 redirect -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             cause = \"too many redirects\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             response_redirect_location = response.get_redirect_location()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if response_redirect_location:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 redirect_location = response_redirect_location\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             status = response.status\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Incrementing because of a server error like a 500 in\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # status_forcelist and the given method is in the allowed_methods\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             cause = ResponseError.GENERIC_ERROR\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if response and response.status:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if status_count is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     status_count -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 status = response.status\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         history = self.history + (\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             RequestHistory(method, url, error, status, redirect_location),\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         new_retry = self.new(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             total=total,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             connect=connect,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             read=read,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             redirect=redirect,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             status=status_count,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             other=other,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             history=history,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if new_retry.is_exhausted():\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             reason = error or ResponseError(cause)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/2.0/queue/General (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5069261610>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:515: MaxRetryError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | During handling of the above exception, another exception occurred:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <rt.rest2.Rt object at 0x7f50693ab640>, selector = 'queue/General'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | get_params = None, json_data = None, post_data = None, attachments = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def __request(self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   selector: str,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   get_params: typing.Optional[typing.Dict[str, typing.Any]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   json_data: typing.Optional[typing.Union[typing.Dict[str, typing.Any], typing.List[typing.Any]]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   post_data: typing.Optional[typing.Dict[str, typing.Any]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   attachments: typing.Optional[typing.Sequence[Attachment]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   ) -> typing.Union[typing.Dict[str, typing.Any], typing.List[str]]:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\" General request for :term:`API`.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param selector: End part of URL which completes self.url parameter\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                            set during class initialization.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                            E.g.: ``ticket/123456/show``\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param get_params: Parameters to add for a GET request.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param json_data: JSON request to send to the API.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param post_data: Dictionary with POST method fields\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param attachments: Optional list of :py:class:`~rt.rest2.Attachment` objects\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :returns: dict or list depending on request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :raises AuthorizationError: In case that request is called without previous\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                                     login or login attempt failed.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :raises ConnectionError: In case of connection error.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             url = str(urljoin(self.url, selector))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if not attachments:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if json_data:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     response = self.session.post(url, json=json_data, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 elif post_data:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     response = self.session.post(url, data=post_data, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >                   response = self.session.get(url, params=get_params, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | rt/rest2.py:186: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     return self.request(\"GET\", url, **kwargs)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     resp = self.send(prep, **send_kwargs)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     r = adapter.send(request, **kwargs)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <requests.adapters.HTTPAdapter object at 0x7f50693abdf0>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | request = <PreparedRequest [GET]>, stream = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | cert = None, proxies = OrderedDict()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def send(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param stream: (optional) Whether to stream the request content.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param timeout: (optional) How long to wait for the server to send\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             read timeout) <timeouts>` tuple.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :type timeout: float or tuple or urllib3 Timeout object\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             we verify the server's TLS certificate, or a string, in which case it\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             must be a path to a CA bundle to use\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :rtype: requests.Response\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             conn = self.get_connection(request.url, proxies)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except LocationValueError as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise InvalidURL(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self.cert_verify(conn, request.url, verify, cert)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         url = self.request_url(request, proxies)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self.add_headers(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             request,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             stream=stream,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout=timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             verify=verify,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             cert=cert,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             proxies=proxies,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if isinstance(timeout, tuple):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 connect, read = timeout\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             except ValueError:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise ValueError(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     f\"or a single float to set both timeouts to the same value.\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif isinstance(timeout, TimeoutSauce):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             pass\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             resp = conn.urlopen(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 method=request.method,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 url=url,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 body=request.body,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 headers=request.headers,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 redirect=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 assert_same_host=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 preload_content=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 decode_content=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 retries=self.max_retries,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout=timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 chunked=chunked,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except (ProtocolError, OSError) as err:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise ConnectionError(err, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except MaxRetryError as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if isinstance(e.reason, ConnectTimeoutError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 # TODO: Remove this in 3.0.0: see #2811\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if not isinstance(e.reason, NewConnectionError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     raise ConnectTimeout(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if isinstance(e.reason, ResponseError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise RetryError(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if isinstance(e.reason, _ProxyError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise ProxyError(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if isinstance(e.reason, _SSLError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 # This branch is for urllib3 v1.22 and later.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise SSLError(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           raise ConnectionError(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E           requests.exceptions.ConnectionError: HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/2.0/queue/General (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5069261610>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:519: ConnectionError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | The above exception was the direct cause of the following exception:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | rt_connection = <rt.rest2.Rt object at 0x7f50693ab640>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def test_queues(rt_connection: rt.rest2.Rt):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >       queue = rt_connection.get_queue(RT_QUEUE)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | tests/test_basic.py:384: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | rt/rest2.py:1165: in get_queue\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     res = self.__request(f'queue/{queue_id}')\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <rt.rest2.Rt object at 0x7f50693ab640>, selector = 'queue/General'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | get_params = None, json_data = None, post_data = None, attachments = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def __request(self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   selector: str,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   get_params: typing.Optional[typing.Dict[str, typing.Any]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   json_data: typing.Optional[typing.Union[typing.Dict[str, typing.Any], typing.List[typing.Any]]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   post_data: typing.Optional[typing.Dict[str, typing.Any]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   attachments: typing.Optional[typing.Sequence[Attachment]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   ) -> typing.Union[typing.Dict[str, typing.Any], typing.List[str]]:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\" General request for :term:`API`.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param selector: End part of URL which completes self.url parameter\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                            set during class initialization.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                            E.g.: ``ticket/123456/show``\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param get_params: Parameters to add for a GET request.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param json_data: JSON request to send to the API.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param post_data: Dictionary with POST method fields\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param attachments: Optional list of :py:class:`~rt.rest2.Attachment` objects\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :returns: dict or list depending on request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :raises AuthorizationError: In case that request is called without previous\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                                     login or login attempt failed.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :raises ConnectionError: In case of connection error.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             url = str(urljoin(self.url, selector))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if not attachments:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if json_data:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     response = self.session.post(url, json=json_data, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 elif post_data:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     response = self.session.post(url, data=post_data, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     response = self.session.get(url, params=get_params, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 fields: typing.List[typing.Tuple[str, typing.Any]] = [('Attachments', attachment.multipart_form_element()) for attachment in attachments]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 fields.append(('JSON', json.dumps(json_data)))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 multipart_data = requests_toolbelt.MultipartEncoder(fields=fields)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 _headers = dict(self.session.headers)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 _headers['content-type'] = multipart_data.content_type\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 response = self.session.post(url, data=multipart_data, headers=_headers, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             self.__debug_response(response)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             self.__check_response(response)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 result = response.json()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             except LookupError as exc:  # pragma: no cover\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise UnexpectedResponseError(f'Unknown response encoding: {response.encoding}.') from exc\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             except UnicodeError as exc:  # pragma: no cover\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise UnexpectedResponseError(f'''Unknown response encoding (UTF-8 does not work) - \"{response.content.decode('utf-8', 'replace')}\".''') from exc\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             return result\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except requests.exceptions.ConnectionError as exc:  # pragma: no cover\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           raise ConnectionError(\"Connection error\", exc) from exc\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E           ConnectionError: [Errno Connection error] HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/2.0/queue/General (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5069261610>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | rt/rest2.py:210: ConnectionError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _______________________ RtTestCase.test_login_and_logout _______________________\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <urllib3.connection.HTTPConnection object at 0x7f50692071c0>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def _new_conn(self) -> socket.socket:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :return: New socket connection.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           sock = connection.create_connection(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 (self._dns_host, self.port),\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 self.timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 source_address=self.source_address,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 socket_options=self.socket_options,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:200: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/connection.py:85: in create_connection\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     raise err\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | address = ('localhost', 8080), timeout = None, source_address = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | socket_options = [(6, 1, 1)]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def create_connection(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         address: tuple[str, int],\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         source_address: tuple[str, int] | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         socket_options: _TYPE_SOCKET_OPTIONS | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ) -> socket.socket:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Connect to *address* and return the socket object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         Convenience function.  Connect to *address* (a 2-tuple ``(host,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         port)``) and return the socket object.  Passing the optional\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         *timeout* parameter will set the timeout on the socket instance\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         before attempting to connect.  If no *timeout* is supplied, the\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         global default timeout setting returned by :func:`socket.getdefaulttimeout`\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         is used.  If *source_address* is set it must be a tuple of (host, port)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         for the socket to bind as a source address before making the connection.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         An host of '' or port 0 tells the OS to use the default.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         host, port = address\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if host.startswith(\"[\"):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             host = host.strip(\"[]\")\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         err = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # The original create_connection function always returns all records.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         family = allowed_gai_family()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             host.encode(\"idna\")\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except UnicodeError:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise LocationParseError(f\"'{host}', label empty or too long\") from None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             af, socktype, proto, canonname, sa = res\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             sock = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 sock = socket.socket(af, socktype, proto)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 # If provided, set socket level options before connecting.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 _set_socket_options(sock, socket_options)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if timeout is not _DEFAULT_TIMEOUT:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     sock.settimeout(timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if source_address:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     sock.bind(source_address)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >               sock.connect(sa)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E               ConnectionRefusedError: [Errno 111] Connection refused\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | The above exception was the direct cause of the following exception:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f50690f2370>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | method = 'POST', url = '/REST/1.0/', body = 'user=root&pass=password'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | headers = {'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '23', 'Content-Type': 'application/x-www-form-urlencoded'}\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | redirect = False, assert_same_host = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | timeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | decode_content = False, response_kw = {}\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/REST/1.0/', query=None, fragment=None)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | destination_scheme = None, conn = None, release_this_conn = True\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | http_tunnel_required = False, err = None, clean_exit = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def urlopen(  # type: ignore[override]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         method: str,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         url: str,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         body: _TYPE_BODY | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         headers: typing.Mapping[str, str] | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         retries: Retry | bool | int | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         redirect: bool = True,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         assert_same_host: bool = True,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         pool_timeout: int | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         release_conn: bool | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         chunked: bool = False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         preload_content: bool = True,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         decode_content: bool = True,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         **response_kw: typing.Any,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ) -> BaseHTTPResponse:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         Get a connection from the pool and perform an HTTP request. This is the\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         lowest level call for making a request, so you'll need to specify all\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         the raw details.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         .. note::\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            More commonly, it's appropriate to use a convenience method\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            such as :meth:`request`.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         .. note::\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            `release_conn` will only behave as expected if\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            `preload_content=False` because we want to make\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            `preload_content=False` the default behaviour someday soon without\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            breaking backwards compatibility.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param method:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param url:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             The URL to perform the request on.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param body:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param headers:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Dictionary of custom headers to send, such as User-Agent,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             these headers completely replace any pool-specific headers.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param retries:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Configure the number of retries to allow before raising a\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Pass ``None`` to retry until you receive a response. Pass a\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             over different types of retries.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Pass an integer number to retry connection errors that many times,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             but no other types of errors. Pass zero to never retry.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If ``False``, then retries are disabled and any exception is raised\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             the redirect response will be returned.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param redirect:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If True, automatically handle redirects (status codes 301, 302,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             will disable redirect, too.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param assert_same_host:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If ``True``, will make sure that the host of the pool requests is\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             consistent else will raise HostChangedError. When ``False``, you can\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             use the pool on an HTTP proxy and request foreign hosts.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param timeout:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If specified, overrides the default timeout for this one\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             request. It may be a float (in seconds) or an instance of\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             :class:`urllib3.util.Timeout`.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param pool_timeout:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If set and the pool is set to block=True, then this method will\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             connection is available within the time period.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param bool preload_content:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If True, the response's body will be preloaded into memory.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param bool decode_content:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If True, will attempt to decode the body based on the\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             'content-encoding' header.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param release_conn:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If False, then the urlopen call will not release the connection\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             back into the pool once a response is received (but will release if\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             you read the entire contents of the response such as when\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             `preload_content=True`). This is useful if you're not preloading\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             the response's content immediately. You will need to call\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             back into the pool. If None, it takes the value of ``preload_content``\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             which defaults to ``True``.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param bool chunked:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If True, urllib3 will send the body using chunked transfer\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             content-length form. Defaults to False.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param int body_pos:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Position to seek to in file-like body in the event of a retry or\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             redirect. Typically this won't need to be set because urllib3 will\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             auto-populate the value when needed.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         parsed_url = parse_url(url)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         destination_scheme = parsed_url.scheme\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if headers is None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             headers = self.headers\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if not isinstance(retries, Retry):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if release_conn is None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             release_conn = preload_content\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Check host\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if assert_same_host and not self.is_same_host(url):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise HostChangedError(self, url, retries)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Ensure that the URL we're connecting to is properly encoded\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if url.startswith(\"/\"):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             url = to_str(_encode_target(url))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             url = to_str(parsed_url.url)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         conn = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Track whether `conn` needs to be released before\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # returning/raising/recursing. Update this variable if necessary, and\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # leave `release_conn` constant throughout the function. That way, if\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # the function recurses, the original value of `release_conn` will be\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # passed down into the recursive call, and its value will be respected.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         #\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # See issue #651 [1] for details.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         #\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         release_this_conn = release_conn\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         http_tunnel_required = connection_requires_http_tunnel(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             self.proxy, self.proxy_config, destination_scheme\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # have to copy the headers dict so we can safely change it without those\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # changes being reflected in anyone else's copy.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if not http_tunnel_required:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Must keep the exception bound to a separate variable or else Python 3\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # complains about UnboundLocalError.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         err = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Keep track of whether we cleanly exited the except block. This\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # ensures we do proper cleanup in finally.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         clean_exit = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Rewind body position, if needed. Record current position\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # for future rewinds in the event of a redirect/retry.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         body_pos = set_file_position(body, body_pos)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Request a connection from the queue.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout_obj = self._get_timeout(timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             conn = self._get_conn(timeout=pool_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     self._prepare_proxy(conn)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     self._raise_timeout(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     raise\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # If we're going to release the connection in ``finally:``, then\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # the response doesn't need to know about the connection. Otherwise\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # it will also try to release it and we'll have a double-release\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # mess.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             response_conn = conn if not release_conn else None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Make the request on the HTTPConnection object\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           response = self._make_request(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 conn,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 method,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 url,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout=timeout_obj,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 body=body,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 headers=headers,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 chunked=chunked,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 retries=retries,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 response_conn=response_conn,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 preload_content=preload_content,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 decode_content=decode_content,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 **response_kw,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     conn.request(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.endheaders()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.send(msg)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.connect()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:236: in connect\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.sock = self._new_conn()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <urllib3.connection.HTTPConnection object at 0x7f50692071c0>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def _new_conn(self) -> socket.socket:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :return: New socket connection.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             sock = connection.create_connection(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 (self._dns_host, self.port),\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 self.timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 source_address=self.source_address,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 socket_options=self.socket_options,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except socket.gaierror as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise NameResolutionError(self.host, self, e) from e\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except SocketTimeout as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise ConnectTimeoutError(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 f\"Connection to {self.host} timed out. (connect timeout={self.timeout})\",\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             ) from e\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except OSError as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           raise NewConnectionError(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 self, f\"Failed to establish a new connection: {e}\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             ) from e\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E           urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x7f50692071c0>: Failed to establish a new connection: [Errno 111] Connection refused\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:215: NewConnectionError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | The above exception was the direct cause of the following exception:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <requests.adapters.HTTPAdapter object at 0x7f50690f26d0>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | request = <PreparedRequest [POST]>, stream = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | cert = None, proxies = OrderedDict()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def send(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param stream: (optional) Whether to stream the request content.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param timeout: (optional) How long to wait for the server to send\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             read timeout) <timeouts>` tuple.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :type timeout: float or tuple or urllib3 Timeout object\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             we verify the server's TLS certificate, or a string, in which case it\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             must be a path to a CA bundle to use\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :rtype: requests.Response\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             conn = self.get_connection(request.url, proxies)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except LocationValueError as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise InvalidURL(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self.cert_verify(conn, request.url, verify, cert)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         url = self.request_url(request, proxies)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self.add_headers(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             request,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             stream=stream,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout=timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             verify=verify,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             cert=cert,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             proxies=proxies,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if isinstance(timeout, tuple):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 connect, read = timeout\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             except ValueError:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise ValueError(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     f\"or a single float to set both timeouts to the same value.\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif isinstance(timeout, TimeoutSauce):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             pass\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           resp = conn.urlopen(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 method=request.method,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 url=url,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 body=request.body,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 headers=request.headers,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 redirect=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 assert_same_host=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 preload_content=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 decode_content=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 retries=self.max_retries,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout=timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 chunked=chunked,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     retries = retries.increment(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | method = 'POST', url = '/REST/1.0/', response = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | error = NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f50692071c0>: Failed to establish a new connection: [Errno 111] Connection refused')\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _pool = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f50690f2370>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _stacktrace = <traceback object at 0x7f5068fbca40>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def increment(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         method: str | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         url: str | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         response: BaseHTTPResponse | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         error: Exception | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         _pool: ConnectionPool | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         _stacktrace: TracebackType | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ) -> Retry:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param response: A response object, or None, if the server did not\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             return a response.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :type response: :class:`~urllib3.response.BaseHTTPResponse`\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param Exception error: An error encountered during the request, or\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             None if the response was received successfully.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :return: A new ``Retry`` object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if self.total is False and error:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Disabled, indicate to re-raise the error.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise reraise(type(error), error, _stacktrace)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         total = self.total\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if total is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             total -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         connect = self.connect\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         read = self.read\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         redirect = self.redirect\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         status_count = self.status\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         other = self.other\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         cause = \"unknown\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         status = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         redirect_location = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if error and self._is_connection_error(error):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Connect retry?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if connect is False:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise reraise(type(error), error, _stacktrace)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             elif connect is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 connect -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif error and self._is_read_error(error):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Read retry?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if read is False or method is None or not self._is_method_retryable(method):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise reraise(type(error), error, _stacktrace)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             elif read is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 read -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif error:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Other retry?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if other is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 other -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif response and response.get_redirect_location():\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Redirect retry?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if redirect is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 redirect -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             cause = \"too many redirects\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             response_redirect_location = response.get_redirect_location()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if response_redirect_location:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 redirect_location = response_redirect_location\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             status = response.status\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Incrementing because of a server error like a 500 in\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # status_forcelist and the given method is in the allowed_methods\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             cause = ResponseError.GENERIC_ERROR\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if response and response.status:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if status_count is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     status_count -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 status = response.status\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         history = self.history + (\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             RequestHistory(method, url, error, status, redirect_location),\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         new_retry = self.new(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             total=total,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             connect=connect,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             read=read,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             redirect=redirect,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             status=status_count,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             other=other,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             history=history,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if new_retry.is_exhausted():\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             reason = error or ResponseError(cause)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/1.0/ (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f50692071c0>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:515: MaxRetryError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | During handling of the above exception, another exception occurred:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <rt.rest1.Rt object at 0x7f50690f2d00>, selector = '', get_params = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | post_data = {'pass': 'password', 'user': 'root'}, files = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | without_login = True, text_response = True\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def __request(self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   selector: str,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   get_params: typing.Optional[typing.Dict[str, typing.Any]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   post_data: typing.Optional[typing.Dict[str, typing.Any]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   files: typing.Optional[typing.List[typing.Tuple[str, typing.IO, typing.Optional[str]]]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   without_login: bool = False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   text_response: bool = True) -> str:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         r\"\"\" General request for :term:`API`.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :keyword selector: End part of URL which completes self.url parameter\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                            set during class initialization.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                            E.g.: ``ticket/123456/show``\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :keyword post_data: Dictionary with POST method fields\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :keyword files: List of pairs (filename, file-like object) describing\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                         files to attach as multipart/form-data\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                         (list is necessary to keep files ordered)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :keyword without_login: Turns off checking last login result\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                                 (usually needed just for login itself)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :keyword text_response: If set to false the received message will be\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                                 returned without decoding (useful for attachments)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :returns: Requested message including state line in form\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   ``RT/3.8.7 200 Ok\\\\n``\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :rtype: string or bytes if text_response is False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :raises AuthorizationError: In case that request is called without previous\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                                     login or login attempt failed.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :raises ConnectionError: In case of connection error.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if (not self.login_result) and (not without_login):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise AuthorizationError('First login by calling method `login`.')\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             url = str(urljoin(self.url, selector))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if not files:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if post_data:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >                   response = self.session.post(url, data=post_data)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | rt/rest1.py:196: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:637: in post\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     return self.request(\"POST\", url, data=data, json=json, **kwargs)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     resp = self.send(prep, **send_kwargs)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     r = adapter.send(request, **kwargs)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <requests.adapters.HTTPAdapter object at 0x7f50690f26d0>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | request = <PreparedRequest [POST]>, stream = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | cert = None, proxies = OrderedDict()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def send(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param stream: (optional) Whether to stream the request content.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param timeout: (optional) How long to wait for the server to send\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             read timeout) <timeouts>` tuple.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :type timeout: float or tuple or urllib3 Timeout object\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             we verify the server's TLS certificate, or a string, in which case it\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             must be a path to a CA bundle to use\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :rtype: requests.Response\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             conn = self.get_connection(request.url, proxies)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except LocationValueError as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise InvalidURL(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self.cert_verify(conn, request.url, verify, cert)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         url = self.request_url(request, proxies)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self.add_headers(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             request,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             stream=stream,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout=timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             verify=verify,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             cert=cert,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             proxies=proxies,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if isinstance(timeout, tuple):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 connect, read = timeout\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             except ValueError:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise ValueError(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     f\"or a single float to set both timeouts to the same value.\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif isinstance(timeout, TimeoutSauce):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             pass\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             resp = conn.urlopen(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 method=request.method,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 url=url,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 body=request.body,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 headers=request.headers,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 redirect=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 assert_same_host=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 preload_content=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 decode_content=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 retries=self.max_retries,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout=timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 chunked=chunked,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except (ProtocolError, OSError) as err:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise ConnectionError(err, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except MaxRetryError as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if isinstance(e.reason, ConnectTimeoutError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 # TODO: Remove this in 3.0.0: see #2811\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if not isinstance(e.reason, NewConnectionError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     raise ConnectTimeout(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if isinstance(e.reason, ResponseError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise RetryError(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if isinstance(e.reason, _ProxyError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise ProxyError(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if isinstance(e.reason, _SSLError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 # This branch is for urllib3 v1.22 and later.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise SSLError(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           raise ConnectionError(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E           requests.exceptions.ConnectionError: HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/1.0/ (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f50692071c0>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:519: ConnectionError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | The above exception was the direct cause of the following exception:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <tests.test_rest1.RtTestCase testMethod=test_login_and_logout>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     @unittest.skipUnless(_have_creds(RT_VALID_CREDENTIALS,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                                      RT_INVALID_CREDENTIALS,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                                      RT_MISSING_CREDENTIALS,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                                      RT_BAD_URL),\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                          \"missing credentials required to run test\")\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def test_login_and_logout(self):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         for name in self.RT_VALID_CREDENTIALS:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             tracker = rt.rest1.Rt(self.RT_VALID_CREDENTIALS[name]['url'], **self.RT_VALID_CREDENTIALS[name]['support'])\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           self.assertTrue(tracker.login(), 'Invalid login to RT demo site ' + name)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | tests/test_rest1.py:100: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | rt/rest1.py:418: in login\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.login_result = self.__get_status_code(self.__request('',\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <rt.rest1.Rt object at 0x7f50690f2d00>, selector = '', get_params = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | post_data = {'pass': 'password', 'user': 'root'}, files = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | without_login = True, text_response = True\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def __request(self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   selector: str,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   get_params: typing.Optional[typing.Dict[str, typing.Any]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   post_data: typing.Optional[typing.Dict[str, typing.Any]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   files: typing.Optional[typing.List[typing.Tuple[str, typing.IO, typing.Optional[str]]]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   without_login: bool = False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   text_response: bool = True) -> str:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         r\"\"\" General request for :term:`API`.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :keyword selector: End part of URL which completes self.url parameter\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                            set during class initialization.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                            E.g.: ``ticket/123456/show``\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :keyword post_data: Dictionary with POST method fields\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :keyword files: List of pairs (filename, file-like object) describing\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                         files to attach as multipart/form-data\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                         (list is necessary to keep files ordered)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :keyword without_login: Turns off checking last login result\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                                 (usually needed just for login itself)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :keyword text_response: If set to false the received message will be\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                                 returned without decoding (useful for attachments)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :returns: Requested message including state line in form\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   ``RT/3.8.7 200 Ok\\\\n``\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :rtype: string or bytes if text_response is False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :raises AuthorizationError: In case that request is called without previous\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                                     login or login attempt failed.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :raises ConnectionError: In case of connection error.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if (not self.login_result) and (not without_login):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise AuthorizationError('First login by calling method `login`.')\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             url = str(urljoin(self.url, selector))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if not files:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if post_data:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     response = self.session.post(url, data=post_data)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     response = self.session.get(url, params=get_params)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 files_data = {}\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 for i, file_pair in enumerate(files):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     files_data[f'attachment_{i + 1}'] = file_pair\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 response = self.session.post(url, data=post_data, files=files_data)  # type: ignore\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             method = \"GET\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if post_data or files:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 method = \"POST\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             self.logger.debug(\"### %s\", datetime.datetime.now().isoformat())\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             self.logger.debug(\"Request URL: %s\", url)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             self.logger.debug(\"Request method: %s\", method)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             self.logger.debug(\"Response status code: %s\", str(response.status_code))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             self.logger.debug(\"Response content:\")\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             self.logger.debug(response.content.decode(errors='ignore'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if response.status_code == 401:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise AuthorizationError('Server could not verify that you are authorized to access the requested document.')\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if response.status_code != 200:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise UnexpectedResponseError(f'Received status code {response.status_code} instead of 200.')\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if response.encoding:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     result = response.content.decode(response.encoding.lower())\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     # try utf-8 if encoding is not filled\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     result = response.content.decode('utf-8')\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             except LookupError as exc:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise UnexpectedResponseError(f'Unknown response encoding: {response.encoding}.') from exc\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             except UnicodeError as exc:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if text_response:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     raise UnexpectedResponseError('Unknown response encoding (UTF-8 does not work).') from exc\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 # replace errors - we need decoded content just to check for error codes in __check_response\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 result = response.content.decode('utf-8', 'replace')\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             self.__check_response(result)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if not text_response:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 return response.content  # type: ignore\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             return result\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except requests.exceptions.ConnectionError as exc:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           raise ConnectionError(\"Connection error\", exc) from exc\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E           ConnectionError: [Errno Connection error] HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/1.0/ (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f50692071c0>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | rt/rest1.py:238: ConnectionError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | ______________________ RtTestCase.test_ticket_operations _______________________\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <urllib3.connection.HTTPConnection object at 0x7f5068cac490>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def _new_conn(self) -> socket.socket:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :return: New socket connection.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           sock = connection.create_connection(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 (self._dns_host, self.port),\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 self.timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 source_address=self.source_address,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 socket_options=self.socket_options,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:200: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/connection.py:85: in create_connection\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     raise err\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | address = ('localhost', 8080), timeout = None, source_address = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | socket_options = [(6, 1, 1)]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def create_connection(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         address: tuple[str, int],\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         source_address: tuple[str, int] | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         socket_options: _TYPE_SOCKET_OPTIONS | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ) -> socket.socket:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Connect to *address* and return the socket object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         Convenience function.  Connect to *address* (a 2-tuple ``(host,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         port)``) and return the socket object.  Passing the optional\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         *timeout* parameter will set the timeout on the socket instance\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         before attempting to connect.  If no *timeout* is supplied, the\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         global default timeout setting returned by :func:`socket.getdefaulttimeout`\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         is used.  If *source_address* is set it must be a tuple of (host, port)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         for the socket to bind as a source address before making the connection.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         An host of '' or port 0 tells the OS to use the default.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         host, port = address\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if host.startswith(\"[\"):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             host = host.strip(\"[]\")\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         err = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # The original create_connection function always returns all records.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         family = allowed_gai_family()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             host.encode(\"idna\")\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except UnicodeError:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise LocationParseError(f\"'{host}', label empty or too long\") from None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             af, socktype, proto, canonname, sa = res\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             sock = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 sock = socket.socket(af, socktype, proto)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 # If provided, set socket level options before connecting.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 _set_socket_options(sock, socket_options)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if timeout is not _DEFAULT_TIMEOUT:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     sock.settimeout(timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if source_address:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     sock.bind(source_address)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >               sock.connect(sa)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E               ConnectionRefusedError: [Errno 111] Connection refused\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | The above exception was the direct cause of the following exception:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f5068f729a0>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | method = 'POST', url = '/REST/1.0/', body = 'user=root&pass=password'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | headers = {'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '23', 'Content-Type': 'application/x-www-form-urlencoded'}\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | redirect = False, assert_same_host = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | timeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | decode_content = False, response_kw = {}\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/REST/1.0/', query=None, fragment=None)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | destination_scheme = None, conn = None, release_this_conn = True\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | http_tunnel_required = False, err = None, clean_exit = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def urlopen(  # type: ignore[override]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         method: str,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         url: str,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         body: _TYPE_BODY | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         headers: typing.Mapping[str, str] | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         retries: Retry | bool | int | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         redirect: bool = True,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         assert_same_host: bool = True,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         pool_timeout: int | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         release_conn: bool | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         chunked: bool = False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         preload_content: bool = True,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         decode_content: bool = True,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         **response_kw: typing.Any,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ) -> BaseHTTPResponse:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         Get a connection from the pool and perform an HTTP request. This is the\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         lowest level call for making a request, so you'll need to specify all\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         the raw details.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         .. note::\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            More commonly, it's appropriate to use a convenience method\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            such as :meth:`request`.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         .. note::\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            `release_conn` will only behave as expected if\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            `preload_content=False` because we want to make\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            `preload_content=False` the default behaviour someday soon without\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            breaking backwards compatibility.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param method:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param url:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             The URL to perform the request on.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param body:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param headers:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Dictionary of custom headers to send, such as User-Agent,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             these headers completely replace any pool-specific headers.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param retries:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Configure the number of retries to allow before raising a\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Pass ``None`` to retry until you receive a response. Pass a\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             over different types of retries.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Pass an integer number to retry connection errors that many times,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             but no other types of errors. Pass zero to never retry.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If ``False``, then retries are disabled and any exception is raised\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             the redirect response will be returned.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param redirect:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If True, automatically handle redirects (status codes 301, 302,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             will disable redirect, too.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param assert_same_host:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If ``True``, will make sure that the host of the pool requests is\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             consistent else will raise HostChangedError. When ``False``, you can\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             use the pool on an HTTP proxy and request foreign hosts.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param timeout:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If specified, overrides the default timeout for this one\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             request. It may be a float (in seconds) or an instance of\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             :class:`urllib3.util.Timeout`.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param pool_timeout:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If set and the pool is set to block=True, then this method will\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             connection is available within the time period.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param bool preload_content:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If True, the response's body will be preloaded into memory.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param bool decode_content:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If True, will attempt to decode the body based on the\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             'content-encoding' header.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param release_conn:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If False, then the urlopen call will not release the connection\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             back into the pool once a response is received (but will release if\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             you read the entire contents of the response such as when\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             `preload_content=True`). This is useful if you're not preloading\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             the response's content immediately. You will need to call\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             back into the pool. If None, it takes the value of ``preload_content``\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             which defaults to ``True``.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param bool chunked:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If True, urllib3 will send the body using chunked transfer\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             content-length form. Defaults to False.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param int body_pos:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Position to seek to in file-like body in the event of a retry or\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             redirect. Typically this won't need to be set because urllib3 will\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             auto-populate the value when needed.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         parsed_url = parse_url(url)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         destination_scheme = parsed_url.scheme\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if headers is None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             headers = self.headers\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if not isinstance(retries, Retry):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if release_conn is None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             release_conn = preload_content\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Check host\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if assert_same_host and not self.is_same_host(url):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise HostChangedError(self, url, retries)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Ensure that the URL we're connecting to is properly encoded\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if url.startswith(\"/\"):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             url = to_str(_encode_target(url))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             url = to_str(parsed_url.url)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         conn = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Track whether `conn` needs to be released before\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # returning/raising/recursing. Update this variable if necessary, and\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # leave `release_conn` constant throughout the function. That way, if\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # the function recurses, the original value of `release_conn` will be\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # passed down into the recursive call, and its value will be respected.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         #\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # See issue #651 [1] for details.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         #\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         release_this_conn = release_conn\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         http_tunnel_required = connection_requires_http_tunnel(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             self.proxy, self.proxy_config, destination_scheme\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # have to copy the headers dict so we can safely change it without those\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # changes being reflected in anyone else's copy.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if not http_tunnel_required:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Must keep the exception bound to a separate variable or else Python 3\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # complains about UnboundLocalError.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         err = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Keep track of whether we cleanly exited the except block. This\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # ensures we do proper cleanup in finally.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         clean_exit = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Rewind body position, if needed. Record current position\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # for future rewinds in the event of a redirect/retry.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         body_pos = set_file_position(body, body_pos)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Request a connection from the queue.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout_obj = self._get_timeout(timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             conn = self._get_conn(timeout=pool_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     self._prepare_proxy(conn)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     self._raise_timeout(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     raise\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # If we're going to release the connection in ``finally:``, then\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # the response doesn't need to know about the connection. Otherwise\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # it will also try to release it and we'll have a double-release\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # mess.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             response_conn = conn if not release_conn else None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Make the request on the HTTPConnection object\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           response = self._make_request(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 conn,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 method,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 url,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout=timeout_obj,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 body=body,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 headers=headers,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 chunked=chunked,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 retries=retries,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 response_conn=response_conn,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 preload_content=preload_content,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 decode_content=decode_content,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 **response_kw,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     conn.request(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.endheaders()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.send(msg)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.connect()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:236: in connect\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.sock = self._new_conn()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <urllib3.connection.HTTPConnection object at 0x7f5068cac490>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def _new_conn(self) -> socket.socket:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :return: New socket connection.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             sock = connection.create_connection(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 (self._dns_host, self.port),\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 self.timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 source_address=self.source_address,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 socket_options=self.socket_options,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except socket.gaierror as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise NameResolutionError(self.host, self, e) from e\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except SocketTimeout as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise ConnectTimeoutError(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 f\"Connection to {self.host} timed out. (connect timeout={self.timeout})\",\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             ) from e\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except OSError as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           raise NewConnectionError(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 self, f\"Failed to establish a new connection: {e}\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             ) from e\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E           urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x7f5068cac490>: Failed to establish a new connection: [Errno 111] Connection refused\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:215: NewConnectionError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | The above exception was the direct cause of the following exception:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <requests.adapters.HTTPAdapter object at 0x7f5068f72370>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | request = <PreparedRequest [POST]>, stream = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | cert = None, proxies = OrderedDict()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def send(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param stream: (optional) Whether to stream the request content.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param timeout: (optional) How long to wait for the server to send\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             read timeout) <timeouts>` tuple.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :type timeout: float or tuple or urllib3 Timeout object\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             we verify the server's TLS certificate, or a string, in which case it\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             must be a path to a CA bundle to use\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :rtype: requests.Response\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             conn = self.get_connection(request.url, proxies)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except LocationValueError as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise InvalidURL(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self.cert_verify(conn, request.url, verify, cert)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         url = self.request_url(request, proxies)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self.add_headers(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             request,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             stream=stream,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout=timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             verify=verify,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             cert=cert,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             proxies=proxies,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if isinstance(timeout, tuple):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 connect, read = timeout\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             except ValueError:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise ValueError(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     f\"or a single float to set both timeouts to the same value.\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif isinstance(timeout, TimeoutSauce):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             pass\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           resp = conn.urlopen(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 method=request.method,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 url=url,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 body=request.body,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 headers=request.headers,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 redirect=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 assert_same_host=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 preload_content=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 decode_content=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 retries=self.max_retries,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout=timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 chunked=chunked,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     retries = retries.increment(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | method = 'POST', url = '/REST/1.0/', response = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | error = NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5068cac490>: Failed to establish a new connection: [Errno 111] Connection refused')\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _pool = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f5068f729a0>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _stacktrace = <traceback object at 0x7f5069275980>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def increment(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         method: str | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         url: str | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         response: BaseHTTPResponse | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         error: Exception | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         _pool: ConnectionPool | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         _stacktrace: TracebackType | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ) -> Retry:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param response: A response object, or None, if the server did not\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             return a response.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :type response: :class:`~urllib3.response.BaseHTTPResponse`\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param Exception error: An error encountered during the request, or\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             None if the response was received successfully.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :return: A new ``Retry`` object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if self.total is False and error:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Disabled, indicate to re-raise the error.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise reraise(type(error), error, _stacktrace)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         total = self.total\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if total is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             total -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         connect = self.connect\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         read = self.read\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         redirect = self.redirect\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         status_count = self.status\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         other = self.other\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         cause = \"unknown\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         status = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         redirect_location = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if error and self._is_connection_error(error):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Connect retry?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if connect is False:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise reraise(type(error), error, _stacktrace)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             elif connect is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 connect -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif error and self._is_read_error(error):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Read retry?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if read is False or method is None or not self._is_method_retryable(method):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise reraise(type(error), error, _stacktrace)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             elif read is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 read -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif error:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Other retry?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if other is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 other -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif response and response.get_redirect_location():\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Redirect retry?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if redirect is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 redirect -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             cause = \"too many redirects\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             response_redirect_location = response.get_redirect_location()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if response_redirect_location:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 redirect_location = response_redirect_location\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             status = response.status\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Incrementing because of a server error like a 500 in\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # status_forcelist and the given method is in the allowed_methods\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             cause = ResponseError.GENERIC_ERROR\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if response and response.status:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if status_count is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     status_count -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 status = response.status\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         history = self.history + (\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             RequestHistory(method, url, error, status, redirect_location),\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         new_retry = self.new(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             total=total,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             connect=connect,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             read=read,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             redirect=redirect,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             status=status_count,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             other=other,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             history=history,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if new_retry.is_exhausted():\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             reason = error or ResponseError(cause)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/1.0/ (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5068cac490>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:515: MaxRetryError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | During handling of the above exception, another exception occurred:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <rt.rest1.Rt object at 0x7f5068f72eb0>, selector = '', get_params = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | post_data = {'pass': 'password', 'user': 'root'}, files = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | without_login = True, text_response = True\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def __request(self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   selector: str,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   get_params: typing.Optional[typing.Dict[str, typing.Any]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   post_data: typing.Optional[typing.Dict[str, typing.Any]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   files: typing.Optional[typing.List[typing.Tuple[str, typing.IO, typing.Optional[str]]]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   without_login: bool = False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   text_response: bool = True) -> str:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         r\"\"\" General request for :term:`API`.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :keyword selector: End part of URL which completes self.url parameter\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                            set during class initialization.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                            E.g.: ``ticket/123456/show``\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :keyword post_data: Dictionary with POST method fields\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :keyword files: List of pairs (filename, file-like object) describing\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                         files to attach as multipart/form-data\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                         (list is necessary to keep files ordered)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :keyword without_login: Turns off checking last login result\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                                 (usually needed just for login itself)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :keyword text_response: If set to false the received message will be\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                                 returned without decoding (useful for attachments)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :returns: Requested message including state line in form\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   ``RT/3.8.7 200 Ok\\\\n``\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :rtype: string or bytes if text_response is False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :raises AuthorizationError: In case that request is called without previous\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                                     login or login attempt failed.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :raises ConnectionError: In case of connection error.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if (not self.login_result) and (not without_login):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise AuthorizationError('First login by calling method `login`.')\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             url = str(urljoin(self.url, selector))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if not files:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if post_data:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >                   response = self.session.post(url, data=post_data)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | rt/rest1.py:196: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:637: in post\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     return self.request(\"POST\", url, data=data, json=json, **kwargs)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     resp = self.send(prep, **send_kwargs)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     r = adapter.send(request, **kwargs)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <requests.adapters.HTTPAdapter object at 0x7f5068f72370>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | request = <PreparedRequest [POST]>, stream = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | cert = None, proxies = OrderedDict()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def send(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param stream: (optional) Whether to stream the request content.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param timeout: (optional) How long to wait for the server to send\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             read timeout) <timeouts>` tuple.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :type timeout: float or tuple or urllib3 Timeout object\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             we verify the server's TLS certificate, or a string, in which case it\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             must be a path to a CA bundle to use\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :rtype: requests.Response\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             conn = self.get_connection(request.url, proxies)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except LocationValueError as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise InvalidURL(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self.cert_verify(conn, request.url, verify, cert)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         url = self.request_url(request, proxies)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self.add_headers(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             request,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             stream=stream,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout=timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             verify=verify,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             cert=cert,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             proxies=proxies,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if isinstance(timeout, tuple):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 connect, read = timeout\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             except ValueError:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise ValueError(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     f\"or a single float to set both timeouts to the same value.\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif isinstance(timeout, TimeoutSauce):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             pass\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             resp = conn.urlopen(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 method=request.method,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 url=url,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 body=request.body,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 headers=request.headers,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 redirect=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 assert_same_host=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 preload_content=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 decode_content=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 retries=self.max_retries,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout=timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 chunked=chunked,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except (ProtocolError, OSError) as err:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise ConnectionError(err, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except MaxRetryError as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if isinstance(e.reason, ConnectTimeoutError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 # TODO: Remove this in 3.0.0: see #2811\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if not isinstance(e.reason, NewConnectionError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     raise ConnectTimeout(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if isinstance(e.reason, ResponseError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise RetryError(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if isinstance(e.reason, _ProxyError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise ProxyError(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if isinstance(e.reason, _SSLError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 # This branch is for urllib3 v1.22 and later.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise SSLError(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           raise ConnectionError(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E           requests.exceptions.ConnectionError: HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/1.0/ (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5068cac490>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:519: ConnectionError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | The above exception was the direct cause of the following exception:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <tests.test_rest1.RtTestCase testMethod=test_ticket_operations>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     @unittest.skipUnless(_have_creds(RT_VALID_CREDENTIALS),\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                          \"missing credentials required to run test\")\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def test_ticket_operations(self):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         ticket_subject = 'Testing issue ' + \"\".join([random.choice(string.ascii_letters) for i in range(15)])\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         ticket_text = 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         for name in ('RT4.4 stable',):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             url = self.RT_VALID_CREDENTIALS[name]['url']\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             default_login = self.RT_VALID_CREDENTIALS[name]['support']['default_login']\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             default_password = self.RT_VALID_CREDENTIALS[name]['support']['default_password']\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             tracker = rt.rest1.Rt(url, default_login=default_login, default_password=default_password)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           self.assertTrue(tracker.login(), 'Invalid login to RT demo site ' + name)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | tests/test_rest1.py:125: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | rt/rest1.py:418: in login\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.login_result = self.__get_status_code(self.__request('',\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <rt.rest1.Rt object at 0x7f5068f72eb0>, selector = '', get_params = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | post_data = {'pass': 'password', 'user': 'root'}, files = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | without_login = True, text_response = True\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def __request(self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   selector: str,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   get_params: typing.Optional[typing.Dict[str, typing.Any]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   post_data: typing.Optional[typing.Dict[str, typing.Any]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   files: typing.Optional[typing.List[typing.Tuple[str, typing.IO, typing.Optional[str]]]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   without_login: bool = False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   text_response: bool = True) -> str:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         r\"\"\" General request for :term:`API`.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :keyword selector: End part of URL which completes self.url parameter\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                            set during class initialization.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                            E.g.: ``ticket/123456/show``\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :keyword post_data: Dictionary with POST method fields\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :keyword files: List of pairs (filename, file-like object) describing\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                         files to attach as multipart/form-data\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                         (list is necessary to keep files ordered)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :keyword without_login: Turns off checking last login result\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                                 (usually needed just for login itself)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :keyword text_response: If set to false the received message will be\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                                 returned without decoding (useful for attachments)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :returns: Requested message including state line in form\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   ``RT/3.8.7 200 Ok\\\\n``\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :rtype: string or bytes if text_response is False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :raises AuthorizationError: In case that request is called without previous\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                                     login or login attempt failed.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :raises ConnectionError: In case of connection error.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if (not self.login_result) and (not without_login):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise AuthorizationError('First login by calling method `login`.')\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             url = str(urljoin(self.url, selector))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if not files:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if post_data:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     response = self.session.post(url, data=post_data)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     response = self.session.get(url, params=get_params)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 files_data = {}\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 for i, file_pair in enumerate(files):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     files_data[f'attachment_{i + 1}'] = file_pair\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 response = self.session.post(url, data=post_data, files=files_data)  # type: ignore\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             method = \"GET\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if post_data or files:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 method = \"POST\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             self.logger.debug(\"### %s\", datetime.datetime.now().isoformat())\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             self.logger.debug(\"Request URL: %s\", url)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             self.logger.debug(\"Request method: %s\", method)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             self.logger.debug(\"Response status code: %s\", str(response.status_code))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             self.logger.debug(\"Response content:\")\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             self.logger.debug(response.content.decode(errors='ignore'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if response.status_code == 401:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise AuthorizationError('Server could not verify that you are authorized to access the requested document.')\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if response.status_code != 200:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise UnexpectedResponseError(f'Received status code {response.status_code} instead of 200.')\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if response.encoding:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     result = response.content.decode(response.encoding.lower())\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     # try utf-8 if encoding is not filled\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     result = response.content.decode('utf-8')\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             except LookupError as exc:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise UnexpectedResponseError(f'Unknown response encoding: {response.encoding}.') from exc\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             except UnicodeError as exc:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if text_response:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     raise UnexpectedResponseError('Unknown response encoding (UTF-8 does not work).') from exc\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 # replace errors - we need decoded content just to check for error codes in __check_response\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 result = response.content.decode('utf-8', 'replace')\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             self.__check_response(result)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if not text_response:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 return response.content  # type: ignore\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             return result\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except requests.exceptions.ConnectionError as exc:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           raise ConnectionError(\"Connection error\", exc) from exc\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E           ConnectionError: [Errno Connection error] HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/1.0/ (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5068cac490>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | rt/rest1.py:238: ConnectionError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _________________ RtTestCase.test_ticket_operations_admincc_cc _________________\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <urllib3.connection.HTTPConnection object at 0x7f5068f41d90>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def _new_conn(self) -> socket.socket:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :return: New socket connection.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           sock = connection.create_connection(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 (self._dns_host, self.port),\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 self.timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 source_address=self.source_address,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 socket_options=self.socket_options,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:200: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/connection.py:85: in create_connection\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     raise err\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | address = ('localhost', 8080), timeout = None, source_address = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | socket_options = [(6, 1, 1)]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def create_connection(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         address: tuple[str, int],\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         source_address: tuple[str, int] | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         socket_options: _TYPE_SOCKET_OPTIONS | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ) -> socket.socket:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Connect to *address* and return the socket object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         Convenience function.  Connect to *address* (a 2-tuple ``(host,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         port)``) and return the socket object.  Passing the optional\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         *timeout* parameter will set the timeout on the socket instance\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         before attempting to connect.  If no *timeout* is supplied, the\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         global default timeout setting returned by :func:`socket.getdefaulttimeout`\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         is used.  If *source_address* is set it must be a tuple of (host, port)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         for the socket to bind as a source address before making the connection.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         An host of '' or port 0 tells the OS to use the default.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         host, port = address\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if host.startswith(\"[\"):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             host = host.strip(\"[]\")\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         err = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # The original create_connection function always returns all records.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         family = allowed_gai_family()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             host.encode(\"idna\")\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except UnicodeError:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise LocationParseError(f\"'{host}', label empty or too long\") from None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             af, socktype, proto, canonname, sa = res\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             sock = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 sock = socket.socket(af, socktype, proto)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 # If provided, set socket level options before connecting.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 _set_socket_options(sock, socket_options)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if timeout is not _DEFAULT_TIMEOUT:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     sock.settimeout(timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if source_address:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     sock.bind(source_address)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >               sock.connect(sa)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E               ConnectionRefusedError: [Errno 111] Connection refused\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | The above exception was the direct cause of the following exception:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f5068f41bb0>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | method = 'POST', url = '/REST/1.0/', body = 'user=root&pass=password'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | headers = {'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '23', 'Content-Type': 'application/x-www-form-urlencoded'}\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | redirect = False, assert_same_host = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | timeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | decode_content = False, response_kw = {}\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/REST/1.0/', query=None, fragment=None)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | destination_scheme = None, conn = None, release_this_conn = True\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | http_tunnel_required = False, err = None, clean_exit = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def urlopen(  # type: ignore[override]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         method: str,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         url: str,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         body: _TYPE_BODY | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         headers: typing.Mapping[str, str] | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         retries: Retry | bool | int | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         redirect: bool = True,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         assert_same_host: bool = True,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         pool_timeout: int | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         release_conn: bool | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         chunked: bool = False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         preload_content: bool = True,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         decode_content: bool = True,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         **response_kw: typing.Any,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ) -> BaseHTTPResponse:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         Get a connection from the pool and perform an HTTP request. This is the\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         lowest level call for making a request, so you'll need to specify all\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         the raw details.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         .. note::\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            More commonly, it's appropriate to use a convenience method\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            such as :meth:`request`.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         .. note::\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            `release_conn` will only behave as expected if\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            `preload_content=False` because we want to make\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            `preload_content=False` the default behaviour someday soon without\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            breaking backwards compatibility.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param method:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param url:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             The URL to perform the request on.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param body:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param headers:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Dictionary of custom headers to send, such as User-Agent,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             these headers completely replace any pool-specific headers.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param retries:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Configure the number of retries to allow before raising a\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Pass ``None`` to retry until you receive a response. Pass a\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             over different types of retries.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Pass an integer number to retry connection errors that many times,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             but no other types of errors. Pass zero to never retry.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If ``False``, then retries are disabled and any exception is raised\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             the redirect response will be returned.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param redirect:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If True, automatically handle redirects (status codes 301, 302,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             will disable redirect, too.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param assert_same_host:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If ``True``, will make sure that the host of the pool requests is\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             consistent else will raise HostChangedError. When ``False``, you can\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             use the pool on an HTTP proxy and request foreign hosts.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param timeout:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If specified, overrides the default timeout for this one\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             request. It may be a float (in seconds) or an instance of\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             :class:`urllib3.util.Timeout`.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param pool_timeout:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If set and the pool is set to block=True, then this method will\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             connection is available within the time period.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param bool preload_content:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If True, the response's body will be preloaded into memory.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param bool decode_content:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If True, will attempt to decode the body based on the\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             'content-encoding' header.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param release_conn:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If False, then the urlopen call will not release the connection\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             back into the pool once a response is received (but will release if\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             you read the entire contents of the response such as when\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             `preload_content=True`). This is useful if you're not preloading\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             the response's content immediately. You will need to call\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             back into the pool. If None, it takes the value of ``preload_content``\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             which defaults to ``True``.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param bool chunked:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If True, urllib3 will send the body using chunked transfer\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             content-length form. Defaults to False.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param int body_pos:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Position to seek to in file-like body in the event of a retry or\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             redirect. Typically this won't need to be set because urllib3 will\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             auto-populate the value when needed.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         parsed_url = parse_url(url)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         destination_scheme = parsed_url.scheme\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if headers is None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             headers = self.headers\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if not isinstance(retries, Retry):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if release_conn is None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             release_conn = preload_content\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Check host\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if assert_same_host and not self.is_same_host(url):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise HostChangedError(self, url, retries)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Ensure that the URL we're connecting to is properly encoded\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if url.startswith(\"/\"):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             url = to_str(_encode_target(url))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             url = to_str(parsed_url.url)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         conn = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Track whether `conn` needs to be released before\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # returning/raising/recursing. Update this variable if necessary, and\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # leave `release_conn` constant throughout the function. That way, if\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # the function recurses, the original value of `release_conn` will be\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # passed down into the recursive call, and its value will be respected.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         #\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # See issue #651 [1] for details.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         #\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         release_this_conn = release_conn\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         http_tunnel_required = connection_requires_http_tunnel(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             self.proxy, self.proxy_config, destination_scheme\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # have to copy the headers dict so we can safely change it without those\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # changes being reflected in anyone else's copy.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if not http_tunnel_required:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Must keep the exception bound to a separate variable or else Python 3\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # complains about UnboundLocalError.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         err = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Keep track of whether we cleanly exited the except block. This\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # ensures we do proper cleanup in finally.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         clean_exit = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Rewind body position, if needed. Record current position\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # for future rewinds in the event of a redirect/retry.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         body_pos = set_file_position(body, body_pos)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Request a connection from the queue.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout_obj = self._get_timeout(timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             conn = self._get_conn(timeout=pool_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     self._prepare_proxy(conn)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     self._raise_timeout(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     raise\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # If we're going to release the connection in ``finally:``, then\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # the response doesn't need to know about the connection. Otherwise\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # it will also try to release it and we'll have a double-release\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # mess.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             response_conn = conn if not release_conn else None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Make the request on the HTTPConnection object\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           response = self._make_request(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 conn,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 method,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 url,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout=timeout_obj,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 body=body,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 headers=headers,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 chunked=chunked,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 retries=retries,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 response_conn=response_conn,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 preload_content=preload_content,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 decode_content=decode_content,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 **response_kw,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     conn.request(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.endheaders()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.send(msg)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.connect()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:236: in connect\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.sock = self._new_conn()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <urllib3.connection.HTTPConnection object at 0x7f5068f41d90>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def _new_conn(self) -> socket.socket:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :return: New socket connection.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             sock = connection.create_connection(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 (self._dns_host, self.port),\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 self.timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 source_address=self.source_address,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 socket_options=self.socket_options,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except socket.gaierror as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise NameResolutionError(self.host, self, e) from e\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except SocketTimeout as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise ConnectTimeoutError(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 f\"Connection to {self.host} timed out. (connect timeout={self.timeout})\",\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             ) from e\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except OSError as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           raise NewConnectionError(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 self, f\"Failed to establish a new connection: {e}\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             ) from e\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E           urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x7f5068f41d90>: Failed to establish a new connection: [Errno 111] Connection refused\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:215: NewConnectionError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | The above exception was the direct cause of the following exception:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <requests.adapters.HTTPAdapter object at 0x7f5068f419d0>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | request = <PreparedRequest [POST]>, stream = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | cert = None, proxies = OrderedDict()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def send(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param stream: (optional) Whether to stream the request content.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param timeout: (optional) How long to wait for the server to send\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             read timeout) <timeouts>` tuple.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :type timeout: float or tuple or urllib3 Timeout object\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             we verify the server's TLS certificate, or a string, in which case it\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             must be a path to a CA bundle to use\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :rtype: requests.Response\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             conn = self.get_connection(request.url, proxies)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except LocationValueError as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise InvalidURL(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self.cert_verify(conn, request.url, verify, cert)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         url = self.request_url(request, proxies)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self.add_headers(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             request,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             stream=stream,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout=timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             verify=verify,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             cert=cert,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             proxies=proxies,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if isinstance(timeout, tuple):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 connect, read = timeout\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             except ValueError:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise ValueError(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     f\"or a single float to set both timeouts to the same value.\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif isinstance(timeout, TimeoutSauce):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             pass\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           resp = conn.urlopen(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 method=request.method,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 url=url,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 body=request.body,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 headers=request.headers,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 redirect=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 assert_same_host=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 preload_content=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 decode_content=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 retries=self.max_retries,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout=timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 chunked=chunked,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     retries = retries.increment(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | method = 'POST', url = '/REST/1.0/', response = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | error = NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5068f41d90>: Failed to establish a new connection: [Errno 111] Connection refused')\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _pool = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f5068f41bb0>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _stacktrace = <traceback object at 0x7f5068f6c740>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def increment(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         method: str | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         url: str | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         response: BaseHTTPResponse | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         error: Exception | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         _pool: ConnectionPool | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         _stacktrace: TracebackType | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ) -> Retry:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param response: A response object, or None, if the server did not\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             return a response.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :type response: :class:`~urllib3.response.BaseHTTPResponse`\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param Exception error: An error encountered during the request, or\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             None if the response was received successfully.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :return: A new ``Retry`` object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if self.total is False and error:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Disabled, indicate to re-raise the error.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise reraise(type(error), error, _stacktrace)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         total = self.total\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if total is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             total -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         connect = self.connect\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         read = self.read\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         redirect = self.redirect\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         status_count = self.status\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         other = self.other\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         cause = \"unknown\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         status = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         redirect_location = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if error and self._is_connection_error(error):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Connect retry?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if connect is False:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise reraise(type(error), error, _stacktrace)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             elif connect is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 connect -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif error and self._is_read_error(error):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Read retry?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if read is False or method is None or not self._is_method_retryable(method):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise reraise(type(error), error, _stacktrace)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             elif read is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 read -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif error:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Other retry?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if other is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 other -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif response and response.get_redirect_location():\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Redirect retry?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if redirect is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 redirect -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             cause = \"too many redirects\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             response_redirect_location = response.get_redirect_location()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if response_redirect_location:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 redirect_location = response_redirect_location\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             status = response.status\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Incrementing because of a server error like a 500 in\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # status_forcelist and the given method is in the allowed_methods\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             cause = ResponseError.GENERIC_ERROR\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if response and response.status:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if status_count is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     status_count -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 status = response.status\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         history = self.history + (\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             RequestHistory(method, url, error, status, redirect_location),\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         new_retry = self.new(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             total=total,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             connect=connect,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             read=read,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             redirect=redirect,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             status=status_count,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             other=other,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             history=history,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if new_retry.is_exhausted():\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             reason = error or ResponseError(cause)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/1.0/ (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5068f41d90>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:515: MaxRetryError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | During handling of the above exception, another exception occurred:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <rt.rest1.Rt object at 0x7f5068f41190>, selector = '', get_params = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | post_data = {'pass': 'password', 'user': 'root'}, files = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | without_login = True, text_response = True\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def __request(self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   selector: str,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   get_params: typing.Optional[typing.Dict[str, typing.Any]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   post_data: typing.Optional[typing.Dict[str, typing.Any]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   files: typing.Optional[typing.List[typing.Tuple[str, typing.IO, typing.Optional[str]]]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   without_login: bool = False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   text_response: bool = True) -> str:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         r\"\"\" General request for :term:`API`.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :keyword selector: End part of URL which completes self.url parameter\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                            set during class initialization.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                            E.g.: ``ticket/123456/show``\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :keyword post_data: Dictionary with POST method fields\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :keyword files: List of pairs (filename, file-like object) describing\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                         files to attach as multipart/form-data\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                         (list is necessary to keep files ordered)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :keyword without_login: Turns off checking last login result\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                                 (usually needed just for login itself)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :keyword text_response: If set to false the received message will be\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                                 returned without decoding (useful for attachments)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :returns: Requested message including state line in form\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   ``RT/3.8.7 200 Ok\\\\n``\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :rtype: string or bytes if text_response is False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :raises AuthorizationError: In case that request is called without previous\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                                     login or login attempt failed.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :raises ConnectionError: In case of connection error.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if (not self.login_result) and (not without_login):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise AuthorizationError('First login by calling method `login`.')\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             url = str(urljoin(self.url, selector))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if not files:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if post_data:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >                   response = self.session.post(url, data=post_data)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | rt/rest1.py:196: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:637: in post\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     return self.request(\"POST\", url, data=data, json=json, **kwargs)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     resp = self.send(prep, **send_kwargs)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     r = adapter.send(request, **kwargs)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <requests.adapters.HTTPAdapter object at 0x7f5068f419d0>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | request = <PreparedRequest [POST]>, stream = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | cert = None, proxies = OrderedDict()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def send(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param stream: (optional) Whether to stream the request content.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param timeout: (optional) How long to wait for the server to send\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             read timeout) <timeouts>` tuple.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :type timeout: float or tuple or urllib3 Timeout object\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             we verify the server's TLS certificate, or a string, in which case it\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             must be a path to a CA bundle to use\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :rtype: requests.Response\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             conn = self.get_connection(request.url, proxies)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except LocationValueError as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise InvalidURL(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self.cert_verify(conn, request.url, verify, cert)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         url = self.request_url(request, proxies)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self.add_headers(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             request,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             stream=stream,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout=timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             verify=verify,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             cert=cert,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             proxies=proxies,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if isinstance(timeout, tuple):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 connect, read = timeout\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             except ValueError:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise ValueError(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     f\"or a single float to set both timeouts to the same value.\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif isinstance(timeout, TimeoutSauce):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             pass\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             resp = conn.urlopen(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 method=request.method,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 url=url,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 body=request.body,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 headers=request.headers,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 redirect=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 assert_same_host=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 preload_content=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 decode_content=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 retries=self.max_retries,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout=timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 chunked=chunked,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except (ProtocolError, OSError) as err:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise ConnectionError(err, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except MaxRetryError as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if isinstance(e.reason, ConnectTimeoutError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 # TODO: Remove this in 3.0.0: see #2811\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if not isinstance(e.reason, NewConnectionError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     raise ConnectTimeout(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if isinstance(e.reason, ResponseError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise RetryError(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if isinstance(e.reason, _ProxyError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise ProxyError(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if isinstance(e.reason, _SSLError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 # This branch is for urllib3 v1.22 and later.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise SSLError(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           raise ConnectionError(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E           requests.exceptions.ConnectionError: HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/1.0/ (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5068f41d90>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:519: ConnectionError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | The above exception was the direct cause of the following exception:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <tests.test_rest1.RtTestCase testMethod=test_ticket_operations_admincc_cc>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     @unittest.skipUnless(_have_creds(RT_VALID_CREDENTIALS),\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                          \"missing credentials required to run test\")\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def test_ticket_operations_admincc_cc(self):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         ticket_subject = 'Testing issue ' + \"\".join([random.choice(string.ascii_letters) for i in range(15)])\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         ticket_text = 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         for name in ('RT4.4 stable',):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             url = self.RT_VALID_CREDENTIALS[name]['url']\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             default_login = self.RT_VALID_CREDENTIALS[name]['support']['default_login']\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             default_password = self.RT_VALID_CREDENTIALS[name]['support']['default_password']\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             tracker = rt.rest1.Rt(url, default_login=default_login, default_password=default_password)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           self.assertTrue(tracker.login(), 'Invalid login to RT demo site ' + name)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | tests/test_rest1.py:216: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | rt/rest1.py:418: in login\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.login_result = self.__get_status_code(self.__request('',\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <rt.rest1.Rt object at 0x7f5068f41190>, selector = '', get_params = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | post_data = {'pass': 'password', 'user': 'root'}, files = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | without_login = True, text_response = True\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def __request(self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   selector: str,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   get_params: typing.Optional[typing.Dict[str, typing.Any]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   post_data: typing.Optional[typing.Dict[str, typing.Any]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   files: typing.Optional[typing.List[typing.Tuple[str, typing.IO, typing.Optional[str]]]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   without_login: bool = False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   text_response: bool = True) -> str:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         r\"\"\" General request for :term:`API`.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :keyword selector: End part of URL which completes self.url parameter\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                            set during class initialization.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                            E.g.: ``ticket/123456/show``\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :keyword post_data: Dictionary with POST method fields\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :keyword files: List of pairs (filename, file-like object) describing\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                         files to attach as multipart/form-data\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                         (list is necessary to keep files ordered)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :keyword without_login: Turns off checking last login result\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                                 (usually needed just for login itself)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :keyword text_response: If set to false the received message will be\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                                 returned without decoding (useful for attachments)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :returns: Requested message including state line in form\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   ``RT/3.8.7 200 Ok\\\\n``\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :rtype: string or bytes if text_response is False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :raises AuthorizationError: In case that request is called without previous\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                                     login or login attempt failed.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :raises ConnectionError: In case of connection error.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if (not self.login_result) and (not without_login):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise AuthorizationError('First login by calling method `login`.')\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             url = str(urljoin(self.url, selector))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if not files:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if post_data:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     response = self.session.post(url, data=post_data)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     response = self.session.get(url, params=get_params)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 files_data = {}\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 for i, file_pair in enumerate(files):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     files_data[f'attachment_{i + 1}'] = file_pair\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 response = self.session.post(url, data=post_data, files=files_data)  # type: ignore\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             method = \"GET\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if post_data or files:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 method = \"POST\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             self.logger.debug(\"### %s\", datetime.datetime.now().isoformat())\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             self.logger.debug(\"Request URL: %s\", url)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             self.logger.debug(\"Request method: %s\", method)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             self.logger.debug(\"Response status code: %s\", str(response.status_code))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             self.logger.debug(\"Response content:\")\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             self.logger.debug(response.content.decode(errors='ignore'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if response.status_code == 401:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise AuthorizationError('Server could not verify that you are authorized to access the requested document.')\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if response.status_code != 200:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise UnexpectedResponseError(f'Received status code {response.status_code} instead of 200.')\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if response.encoding:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     result = response.content.decode(response.encoding.lower())\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     # try utf-8 if encoding is not filled\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     result = response.content.decode('utf-8')\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             except LookupError as exc:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise UnexpectedResponseError(f'Unknown response encoding: {response.encoding}.') from exc\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             except UnicodeError as exc:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if text_response:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     raise UnexpectedResponseError('Unknown response encoding (UTF-8 does not work).') from exc\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 # replace errors - we need decoded content just to check for error codes in __check_response\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 result = response.content.decode('utf-8', 'replace')\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             self.__check_response(result)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if not text_response:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 return response.content  # type: ignore\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             return result\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except requests.exceptions.ConnectionError as exc:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           raise ConnectionError(\"Connection error\", exc) from exc\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E           ConnectionError: [Errno Connection error] HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/1.0/ (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5068f41d90>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | rt/rest1.py:238: ConnectionError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | ___________________________ test_ticket_attachments ____________________________\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <urllib3.connection.HTTPConnection object at 0x7f5068cadc70>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def _new_conn(self) -> socket.socket:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :return: New socket connection.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           sock = connection.create_connection(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 (self._dns_host, self.port),\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 self.timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 source_address=self.source_address,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 socket_options=self.socket_options,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:200: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/connection.py:85: in create_connection\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     raise err\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | address = ('localhost', 8080), timeout = None, source_address = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | socket_options = [(6, 1, 1)]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def create_connection(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         address: tuple[str, int],\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         source_address: tuple[str, int] | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         socket_options: _TYPE_SOCKET_OPTIONS | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ) -> socket.socket:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Connect to *address* and return the socket object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         Convenience function.  Connect to *address* (a 2-tuple ``(host,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         port)``) and return the socket object.  Passing the optional\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         *timeout* parameter will set the timeout on the socket instance\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         before attempting to connect.  If no *timeout* is supplied, the\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         global default timeout setting returned by :func:`socket.getdefaulttimeout`\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         is used.  If *source_address* is set it must be a tuple of (host, port)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         for the socket to bind as a source address before making the connection.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         An host of '' or port 0 tells the OS to use the default.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         host, port = address\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if host.startswith(\"[\"):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             host = host.strip(\"[]\")\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         err = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # The original create_connection function always returns all records.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         family = allowed_gai_family()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             host.encode(\"idna\")\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except UnicodeError:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise LocationParseError(f\"'{host}', label empty or too long\") from None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             af, socktype, proto, canonname, sa = res\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             sock = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 sock = socket.socket(af, socktype, proto)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 # If provided, set socket level options before connecting.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 _set_socket_options(sock, socket_options)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if timeout is not _DEFAULT_TIMEOUT:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     sock.settimeout(timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if source_address:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     sock.bind(source_address)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >               sock.connect(sa)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E               ConnectionRefusedError: [Errno 111] Connection refused\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | The above exception was the direct cause of the following exception:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f50693ab970>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | method = 'POST', url = '/REST/2.0/ticket'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | body = <MultipartEncoder: [('Attachments', ('attachment-name.txt', b'Content of attachment.', 'text/plain')), ('JSON', '{\"Que...adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\", \"ContentType\": \"text/plain\"}')]>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | headers = {'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-aliv...ta; boundary=0c22a6a3e9a04e8b8280f7e66b254050', 'Content-Length': '527', 'Authorization': 'Basic cm9vdDpwYXNzd29yZA=='}\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | redirect = False, assert_same_host = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | timeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | decode_content = False, response_kw = {}\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/REST/2.0/ticket', query=None, fragment=None)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | destination_scheme = None, conn = None, release_this_conn = True\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | http_tunnel_required = False, err = None, clean_exit = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def urlopen(  # type: ignore[override]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         method: str,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         url: str,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         body: _TYPE_BODY | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         headers: typing.Mapping[str, str] | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         retries: Retry | bool | int | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         redirect: bool = True,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         assert_same_host: bool = True,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         pool_timeout: int | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         release_conn: bool | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         chunked: bool = False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         preload_content: bool = True,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         decode_content: bool = True,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         **response_kw: typing.Any,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ) -> BaseHTTPResponse:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         Get a connection from the pool and perform an HTTP request. This is the\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         lowest level call for making a request, so you'll need to specify all\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         the raw details.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         .. note::\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            More commonly, it's appropriate to use a convenience method\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            such as :meth:`request`.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         .. note::\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            `release_conn` will only behave as expected if\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            `preload_content=False` because we want to make\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            `preload_content=False` the default behaviour someday soon without\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            breaking backwards compatibility.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param method:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param url:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             The URL to perform the request on.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param body:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param headers:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Dictionary of custom headers to send, such as User-Agent,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             these headers completely replace any pool-specific headers.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param retries:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Configure the number of retries to allow before raising a\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Pass ``None`` to retry until you receive a response. Pass a\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             over different types of retries.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Pass an integer number to retry connection errors that many times,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             but no other types of errors. Pass zero to never retry.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If ``False``, then retries are disabled and any exception is raised\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             the redirect response will be returned.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param redirect:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If True, automatically handle redirects (status codes 301, 302,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             will disable redirect, too.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param assert_same_host:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If ``True``, will make sure that the host of the pool requests is\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             consistent else will raise HostChangedError. When ``False``, you can\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             use the pool on an HTTP proxy and request foreign hosts.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param timeout:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If specified, overrides the default timeout for this one\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             request. It may be a float (in seconds) or an instance of\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             :class:`urllib3.util.Timeout`.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param pool_timeout:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If set and the pool is set to block=True, then this method will\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             connection is available within the time period.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param bool preload_content:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If True, the response's body will be preloaded into memory.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param bool decode_content:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If True, will attempt to decode the body based on the\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             'content-encoding' header.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param release_conn:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If False, then the urlopen call will not release the connection\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             back into the pool once a response is received (but will release if\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             you read the entire contents of the response such as when\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             `preload_content=True`). This is useful if you're not preloading\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             the response's content immediately. You will need to call\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             back into the pool. If None, it takes the value of ``preload_content``\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             which defaults to ``True``.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param bool chunked:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If True, urllib3 will send the body using chunked transfer\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             content-length form. Defaults to False.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param int body_pos:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Position to seek to in file-like body in the event of a retry or\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             redirect. Typically this won't need to be set because urllib3 will\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             auto-populate the value when needed.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         parsed_url = parse_url(url)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         destination_scheme = parsed_url.scheme\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if headers is None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             headers = self.headers\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if not isinstance(retries, Retry):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if release_conn is None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             release_conn = preload_content\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Check host\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if assert_same_host and not self.is_same_host(url):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise HostChangedError(self, url, retries)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Ensure that the URL we're connecting to is properly encoded\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if url.startswith(\"/\"):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             url = to_str(_encode_target(url))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             url = to_str(parsed_url.url)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         conn = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Track whether `conn` needs to be released before\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # returning/raising/recursing. Update this variable if necessary, and\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # leave `release_conn` constant throughout the function. That way, if\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # the function recurses, the original value of `release_conn` will be\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # passed down into the recursive call, and its value will be respected.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         #\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # See issue #651 [1] for details.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         #\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         release_this_conn = release_conn\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         http_tunnel_required = connection_requires_http_tunnel(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             self.proxy, self.proxy_config, destination_scheme\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # have to copy the headers dict so we can safely change it without those\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # changes being reflected in anyone else's copy.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if not http_tunnel_required:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Must keep the exception bound to a separate variable or else Python 3\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # complains about UnboundLocalError.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         err = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Keep track of whether we cleanly exited the except block. This\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # ensures we do proper cleanup in finally.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         clean_exit = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Rewind body position, if needed. Record current position\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # for future rewinds in the event of a redirect/retry.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         body_pos = set_file_position(body, body_pos)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Request a connection from the queue.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout_obj = self._get_timeout(timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             conn = self._get_conn(timeout=pool_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     self._prepare_proxy(conn)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     self._raise_timeout(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     raise\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # If we're going to release the connection in ``finally:``, then\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # the response doesn't need to know about the connection. Otherwise\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # it will also try to release it and we'll have a double-release\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # mess.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             response_conn = conn if not release_conn else None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Make the request on the HTTPConnection object\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           response = self._make_request(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 conn,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 method,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 url,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout=timeout_obj,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 body=body,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 headers=headers,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 chunked=chunked,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 retries=retries,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 response_conn=response_conn,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 preload_content=preload_content,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 decode_content=decode_content,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 **response_kw,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     conn.request(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.endheaders()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.send(msg)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.connect()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:236: in connect\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.sock = self._new_conn()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <urllib3.connection.HTTPConnection object at 0x7f5068cadc70>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def _new_conn(self) -> socket.socket:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :return: New socket connection.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             sock = connection.create_connection(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 (self._dns_host, self.port),\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 self.timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 source_address=self.source_address,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 socket_options=self.socket_options,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except socket.gaierror as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise NameResolutionError(self.host, self, e) from e\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except SocketTimeout as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise ConnectTimeoutError(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 f\"Connection to {self.host} timed out. (connect timeout={self.timeout})\",\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             ) from e\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except OSError as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           raise NewConnectionError(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 self, f\"Failed to establish a new connection: {e}\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             ) from e\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E           urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x7f5068cadc70>: Failed to establish a new connection: [Errno 111] Connection refused\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:215: NewConnectionError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | The above exception was the direct cause of the following exception:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <requests.adapters.HTTPAdapter object at 0x7f50693abdf0>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | request = <PreparedRequest [POST]>, stream = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | cert = None, proxies = OrderedDict()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def send(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param stream: (optional) Whether to stream the request content.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param timeout: (optional) How long to wait for the server to send\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             read timeout) <timeouts>` tuple.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :type timeout: float or tuple or urllib3 Timeout object\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             we verify the server's TLS certificate, or a string, in which case it\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             must be a path to a CA bundle to use\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :rtype: requests.Response\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             conn = self.get_connection(request.url, proxies)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except LocationValueError as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise InvalidURL(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self.cert_verify(conn, request.url, verify, cert)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         url = self.request_url(request, proxies)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self.add_headers(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             request,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             stream=stream,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout=timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             verify=verify,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             cert=cert,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             proxies=proxies,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if isinstance(timeout, tuple):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 connect, read = timeout\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             except ValueError:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise ValueError(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     f\"or a single float to set both timeouts to the same value.\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif isinstance(timeout, TimeoutSauce):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             pass\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           resp = conn.urlopen(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 method=request.method,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 url=url,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 body=request.body,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 headers=request.headers,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 redirect=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 assert_same_host=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 preload_content=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 decode_content=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 retries=self.max_retries,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout=timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 chunked=chunked,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     retries = retries.increment(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | method = 'POST', url = '/REST/2.0/ticket', response = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | error = NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5068cadc70>: Failed to establish a new connection: [Errno 111] Connection refused')\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _pool = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f50693ab970>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _stacktrace = <traceback object at 0x7f5068f673c0>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def increment(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         method: str | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         url: str | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         response: BaseHTTPResponse | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         error: Exception | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         _pool: ConnectionPool | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         _stacktrace: TracebackType | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ) -> Retry:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param response: A response object, or None, if the server did not\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             return a response.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :type response: :class:`~urllib3.response.BaseHTTPResponse`\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param Exception error: An error encountered during the request, or\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             None if the response was received successfully.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :return: A new ``Retry`` object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if self.total is False and error:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Disabled, indicate to re-raise the error.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise reraise(type(error), error, _stacktrace)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         total = self.total\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if total is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             total -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         connect = self.connect\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         read = self.read\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         redirect = self.redirect\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         status_count = self.status\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         other = self.other\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         cause = \"unknown\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         status = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         redirect_location = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if error and self._is_connection_error(error):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Connect retry?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if connect is False:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise reraise(type(error), error, _stacktrace)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             elif connect is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 connect -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif error and self._is_read_error(error):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Read retry?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if read is False or method is None or not self._is_method_retryable(method):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise reraise(type(error), error, _stacktrace)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             elif read is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 read -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif error:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Other retry?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if other is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 other -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif response and response.get_redirect_location():\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Redirect retry?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if redirect is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 redirect -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             cause = \"too many redirects\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             response_redirect_location = response.get_redirect_location()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if response_redirect_location:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 redirect_location = response_redirect_location\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             status = response.status\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Incrementing because of a server error like a 500 in\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # status_forcelist and the given method is in the allowed_methods\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             cause = ResponseError.GENERIC_ERROR\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if response and response.status:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if status_count is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     status_count -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 status = response.status\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         history = self.history + (\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             RequestHistory(method, url, error, status, redirect_location),\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         new_retry = self.new(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             total=total,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             connect=connect,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             read=read,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             redirect=redirect,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             status=status_count,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             other=other,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             history=history,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if new_retry.is_exhausted():\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             reason = error or ResponseError(cause)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/2.0/ticket (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5068cadc70>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:515: MaxRetryError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | During handling of the above exception, another exception occurred:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <rt.rest2.Rt object at 0x7f50693ab640>, selector = 'ticket'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | get_params = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | json_data = {'Content': 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.', 'ContentType': 'text/plain', 'Queue': 'General', 'Subject': 'Testing issue hxIwhvFjNfnBVQm'}\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | post_data = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | attachments = [Attachment(file_name='attachment-name.txt', file_type='text/plain', file_content=b'Content of attachment.')]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def __request(self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   selector: str,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   get_params: typing.Optional[typing.Dict[str, typing.Any]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   json_data: typing.Optional[typing.Union[typing.Dict[str, typing.Any], typing.List[typing.Any]]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   post_data: typing.Optional[typing.Dict[str, typing.Any]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   attachments: typing.Optional[typing.Sequence[Attachment]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   ) -> typing.Union[typing.Dict[str, typing.Any], typing.List[str]]:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\" General request for :term:`API`.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param selector: End part of URL which completes self.url parameter\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                            set during class initialization.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                            E.g.: ``ticket/123456/show``\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param get_params: Parameters to add for a GET request.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param json_data: JSON request to send to the API.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param post_data: Dictionary with POST method fields\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param attachments: Optional list of :py:class:`~rt.rest2.Attachment` objects\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :returns: dict or list depending on request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :raises AuthorizationError: In case that request is called without previous\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                                     login or login attempt failed.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :raises ConnectionError: In case of connection error.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             url = str(urljoin(self.url, selector))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if not attachments:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if json_data:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     response = self.session.post(url, json=json_data, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 elif post_data:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     response = self.session.post(url, data=post_data, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     response = self.session.get(url, params=get_params, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 fields: typing.List[typing.Tuple[str, typing.Any]] = [('Attachments', attachment.multipart_form_element()) for attachment in attachments]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 fields.append(('JSON', json.dumps(json_data)))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 multipart_data = requests_toolbelt.MultipartEncoder(fields=fields)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 _headers = dict(self.session.headers)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 _headers['content-type'] = multipart_data.content_type\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >               response = self.session.post(url, data=multipart_data, headers=_headers, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | rt/rest2.py:196: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:637: in post\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     return self.request(\"POST\", url, data=data, json=json, **kwargs)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     resp = self.send(prep, **send_kwargs)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     r = adapter.send(request, **kwargs)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <requests.adapters.HTTPAdapter object at 0x7f50693abdf0>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | request = <PreparedRequest [POST]>, stream = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | cert = None, proxies = OrderedDict()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def send(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param stream: (optional) Whether to stream the request content.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param timeout: (optional) How long to wait for the server to send\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             read timeout) <timeouts>` tuple.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :type timeout: float or tuple or urllib3 Timeout object\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             we verify the server's TLS certificate, or a string, in which case it\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             must be a path to a CA bundle to use\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :rtype: requests.Response\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             conn = self.get_connection(request.url, proxies)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except LocationValueError as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise InvalidURL(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self.cert_verify(conn, request.url, verify, cert)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         url = self.request_url(request, proxies)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self.add_headers(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             request,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             stream=stream,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout=timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             verify=verify,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             cert=cert,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             proxies=proxies,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if isinstance(timeout, tuple):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 connect, read = timeout\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             except ValueError:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise ValueError(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     f\"or a single float to set both timeouts to the same value.\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif isinstance(timeout, TimeoutSauce):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             pass\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             resp = conn.urlopen(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 method=request.method,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 url=url,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 body=request.body,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 headers=request.headers,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 redirect=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 assert_same_host=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 preload_content=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 decode_content=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 retries=self.max_retries,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout=timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 chunked=chunked,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except (ProtocolError, OSError) as err:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise ConnectionError(err, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except MaxRetryError as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if isinstance(e.reason, ConnectTimeoutError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 # TODO: Remove this in 3.0.0: see #2811\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if not isinstance(e.reason, NewConnectionError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     raise ConnectTimeout(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if isinstance(e.reason, ResponseError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise RetryError(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if isinstance(e.reason, _ProxyError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise ProxyError(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if isinstance(e.reason, _SSLError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 # This branch is for urllib3 v1.22 and later.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise SSLError(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           raise ConnectionError(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E           requests.exceptions.ConnectionError: HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/2.0/ticket (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5068cadc70>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:519: ConnectionError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | The above exception was the direct cause of the following exception:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | rt_connection = <rt.rest2.Rt object at 0x7f50693ab640>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def test_ticket_attachments(rt_connection: rt.rest2.Rt):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Test various ticket attachment operations.\"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         ticket_subject = f'Testing issue {random_string()}'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         ticket_text = 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         attachment_content = b'Content of attachment.'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         attachment_name = 'attachment-name.txt'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         attachment = rt.rest2.Attachment(attachment_name, 'text/plain', attachment_content)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >       ticket_id = rt_connection.create_ticket(subject=ticket_subject, content=ticket_text, queue=RT_QUEUE, attachments=[attachment])\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | tests/test_tickets.py:40: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | rt/rest2.py:617: in create_ticket\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     res = self.__request('ticket', json_data=ticket_data, attachments=attachments)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <rt.rest2.Rt object at 0x7f50693ab640>, selector = 'ticket'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | get_params = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | json_data = {'Content': 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.', 'ContentType': 'text/plain', 'Queue': 'General', 'Subject': 'Testing issue hxIwhvFjNfnBVQm'}\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | post_data = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | attachments = [Attachment(file_name='attachment-name.txt', file_type='text/plain', file_content=b'Content of attachment.')]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def __request(self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   selector: str,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   get_params: typing.Optional[typing.Dict[str, typing.Any]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   json_data: typing.Optional[typing.Union[typing.Dict[str, typing.Any], typing.List[typing.Any]]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   post_data: typing.Optional[typing.Dict[str, typing.Any]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   attachments: typing.Optional[typing.Sequence[Attachment]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   ) -> typing.Union[typing.Dict[str, typing.Any], typing.List[str]]:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\" General request for :term:`API`.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param selector: End part of URL which completes self.url parameter\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                            set during class initialization.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                            E.g.: ``ticket/123456/show``\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param get_params: Parameters to add for a GET request.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param json_data: JSON request to send to the API.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param post_data: Dictionary with POST method fields\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param attachments: Optional list of :py:class:`~rt.rest2.Attachment` objects\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :returns: dict or list depending on request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :raises AuthorizationError: In case that request is called without previous\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                                     login or login attempt failed.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :raises ConnectionError: In case of connection error.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             url = str(urljoin(self.url, selector))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if not attachments:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if json_data:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     response = self.session.post(url, json=json_data, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 elif post_data:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     response = self.session.post(url, data=post_data, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     response = self.session.get(url, params=get_params, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 fields: typing.List[typing.Tuple[str, typing.Any]] = [('Attachments', attachment.multipart_form_element()) for attachment in attachments]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 fields.append(('JSON', json.dumps(json_data)))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 multipart_data = requests_toolbelt.MultipartEncoder(fields=fields)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 _headers = dict(self.session.headers)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 _headers['content-type'] = multipart_data.content_type\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 response = self.session.post(url, data=multipart_data, headers=_headers, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             self.__debug_response(response)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             self.__check_response(response)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 result = response.json()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             except LookupError as exc:  # pragma: no cover\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise UnexpectedResponseError(f'Unknown response encoding: {response.encoding}.') from exc\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             except UnicodeError as exc:  # pragma: no cover\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise UnexpectedResponseError(f'''Unknown response encoding (UTF-8 does not work) - \"{response.content.decode('utf-8', 'replace')}\".''') from exc\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             return result\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except requests.exceptions.ConnectionError as exc:  # pragma: no cover\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           raise ConnectionError(\"Connection error\", exc) from exc\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E           ConnectionError: [Errno Connection error] HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/2.0/ticket (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5068cadc70>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | rt/rest2.py:210: ConnectionError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _______________________________ test_ticket_take _______________________________\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <urllib3.connection.HTTPConnection object at 0x7f50691dcc40>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def _new_conn(self) -> socket.socket:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :return: New socket connection.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           sock = connection.create_connection(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 (self._dns_host, self.port),\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 self.timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 source_address=self.source_address,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 socket_options=self.socket_options,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:200: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/connection.py:85: in create_connection\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     raise err\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | address = ('localhost', 8080), timeout = None, source_address = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | socket_options = [(6, 1, 1)]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def create_connection(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         address: tuple[str, int],\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         source_address: tuple[str, int] | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         socket_options: _TYPE_SOCKET_OPTIONS | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ) -> socket.socket:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Connect to *address* and return the socket object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         Convenience function.  Connect to *address* (a 2-tuple ``(host,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         port)``) and return the socket object.  Passing the optional\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         *timeout* parameter will set the timeout on the socket instance\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         before attempting to connect.  If no *timeout* is supplied, the\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         global default timeout setting returned by :func:`socket.getdefaulttimeout`\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         is used.  If *source_address* is set it must be a tuple of (host, port)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         for the socket to bind as a source address before making the connection.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         An host of '' or port 0 tells the OS to use the default.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         host, port = address\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if host.startswith(\"[\"):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             host = host.strip(\"[]\")\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         err = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # The original create_connection function always returns all records.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         family = allowed_gai_family()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             host.encode(\"idna\")\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except UnicodeError:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise LocationParseError(f\"'{host}', label empty or too long\") from None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             af, socktype, proto, canonname, sa = res\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             sock = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 sock = socket.socket(af, socktype, proto)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 # If provided, set socket level options before connecting.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 _set_socket_options(sock, socket_options)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if timeout is not _DEFAULT_TIMEOUT:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     sock.settimeout(timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if source_address:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     sock.bind(source_address)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >               sock.connect(sa)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E               ConnectionRefusedError: [Errno 111] Connection refused\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | The above exception was the direct cause of the following exception:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f50693ab970>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | method = 'POST', url = '/REST/2.0/ticket'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | body = b'{\"Queue\": \"General\", \"Subject\": \"Testing issue NXAIBHxXaipuLBT\", \"Content\": \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\", \"ContentType\": \"text/plain\"}'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | headers = {'User-Agent': 'python-requests/2.31.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '232', 'Content-Type': 'application/json', 'Authorization': 'Basic cm9vdDpwYXNzd29yZA=='}\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | redirect = False, assert_same_host = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | timeout = Timeout(connect=None, read=None, total=None), pool_timeout = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | decode_content = False, response_kw = {}\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/REST/2.0/ticket', query=None, fragment=None)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | destination_scheme = None, conn = None, release_this_conn = True\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | http_tunnel_required = False, err = None, clean_exit = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def urlopen(  # type: ignore[override]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         method: str,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         url: str,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         body: _TYPE_BODY | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         headers: typing.Mapping[str, str] | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         retries: Retry | bool | int | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         redirect: bool = True,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         assert_same_host: bool = True,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         pool_timeout: int | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         release_conn: bool | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         chunked: bool = False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         preload_content: bool = True,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         decode_content: bool = True,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         **response_kw: typing.Any,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ) -> BaseHTTPResponse:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         Get a connection from the pool and perform an HTTP request. This is the\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         lowest level call for making a request, so you'll need to specify all\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         the raw details.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         .. note::\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            More commonly, it's appropriate to use a convenience method\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            such as :meth:`request`.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         .. note::\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            `release_conn` will only behave as expected if\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            `preload_content=False` because we want to make\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            `preload_content=False` the default behaviour someday soon without\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |            breaking backwards compatibility.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param method:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param url:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             The URL to perform the request on.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param body:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param headers:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Dictionary of custom headers to send, such as User-Agent,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             these headers completely replace any pool-specific headers.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param retries:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Configure the number of retries to allow before raising a\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Pass ``None`` to retry until you receive a response. Pass a\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             over different types of retries.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Pass an integer number to retry connection errors that many times,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             but no other types of errors. Pass zero to never retry.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If ``False``, then retries are disabled and any exception is raised\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             the redirect response will be returned.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param redirect:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If True, automatically handle redirects (status codes 301, 302,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             will disable redirect, too.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param assert_same_host:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If ``True``, will make sure that the host of the pool requests is\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             consistent else will raise HostChangedError. When ``False``, you can\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             use the pool on an HTTP proxy and request foreign hosts.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param timeout:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If specified, overrides the default timeout for this one\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             request. It may be a float (in seconds) or an instance of\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             :class:`urllib3.util.Timeout`.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param pool_timeout:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If set and the pool is set to block=True, then this method will\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             connection is available within the time period.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param bool preload_content:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If True, the response's body will be preloaded into memory.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param bool decode_content:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If True, will attempt to decode the body based on the\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             'content-encoding' header.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param release_conn:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If False, then the urlopen call will not release the connection\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             back into the pool once a response is received (but will release if\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             you read the entire contents of the response such as when\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             `preload_content=True`). This is useful if you're not preloading\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             the response's content immediately. You will need to call\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             back into the pool. If None, it takes the value of ``preload_content``\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             which defaults to ``True``.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param bool chunked:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             If True, urllib3 will send the body using chunked transfer\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             content-length form. Defaults to False.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param int body_pos:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             Position to seek to in file-like body in the event of a retry or\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             redirect. Typically this won't need to be set because urllib3 will\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             auto-populate the value when needed.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         parsed_url = parse_url(url)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         destination_scheme = parsed_url.scheme\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if headers is None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             headers = self.headers\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if not isinstance(retries, Retry):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if release_conn is None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             release_conn = preload_content\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Check host\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if assert_same_host and not self.is_same_host(url):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise HostChangedError(self, url, retries)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Ensure that the URL we're connecting to is properly encoded\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if url.startswith(\"/\"):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             url = to_str(_encode_target(url))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             url = to_str(parsed_url.url)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         conn = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Track whether `conn` needs to be released before\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # returning/raising/recursing. Update this variable if necessary, and\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # leave `release_conn` constant throughout the function. That way, if\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # the function recurses, the original value of `release_conn` will be\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # passed down into the recursive call, and its value will be respected.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         #\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # See issue #651 [1] for details.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         #\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         release_this_conn = release_conn\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         http_tunnel_required = connection_requires_http_tunnel(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             self.proxy, self.proxy_config, destination_scheme\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # have to copy the headers dict so we can safely change it without those\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # changes being reflected in anyone else's copy.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if not http_tunnel_required:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Must keep the exception bound to a separate variable or else Python 3\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # complains about UnboundLocalError.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         err = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Keep track of whether we cleanly exited the except block. This\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # ensures we do proper cleanup in finally.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         clean_exit = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # Rewind body position, if needed. Record current position\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         # for future rewinds in the event of a redirect/retry.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         body_pos = set_file_position(body, body_pos)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Request a connection from the queue.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout_obj = self._get_timeout(timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             conn = self._get_conn(timeout=pool_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     self._prepare_proxy(conn)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     self._raise_timeout(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     raise\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # If we're going to release the connection in ``finally:``, then\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # the response doesn't need to know about the connection. Otherwise\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # it will also try to release it and we'll have a double-release\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # mess.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             response_conn = conn if not release_conn else None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Make the request on the HTTPConnection object\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           response = self._make_request(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 conn,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 method,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 url,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout=timeout_obj,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 body=body,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 headers=headers,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 chunked=chunked,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 retries=retries,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 response_conn=response_conn,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 preload_content=preload_content,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 decode_content=decode_content,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 **response_kw,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     conn.request(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.endheaders()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.send(msg)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.connect()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:236: in connect\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     self.sock = self._new_conn()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <urllib3.connection.HTTPConnection object at 0x7f50691dcc40>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def _new_conn(self) -> socket.socket:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Establish a socket connection and set nodelay settings on it.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :return: New socket connection.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             sock = connection.create_connection(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 (self._dns_host, self.port),\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 self.timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 source_address=self.source_address,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 socket_options=self.socket_options,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except socket.gaierror as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise NameResolutionError(self.host, self, e) from e\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except SocketTimeout as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise ConnectTimeoutError(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 f\"Connection to {self.host} timed out. (connect timeout={self.timeout})\",\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             ) from e\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except OSError as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           raise NewConnectionError(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 self, f\"Failed to establish a new connection: {e}\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             ) from e\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E           urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x7f50691dcc40>: Failed to establish a new connection: [Errno 111] Connection refused\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:215: NewConnectionError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | The above exception was the direct cause of the following exception:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <requests.adapters.HTTPAdapter object at 0x7f50693abdf0>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | request = <PreparedRequest [POST]>, stream = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | cert = None, proxies = OrderedDict()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def send(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param stream: (optional) Whether to stream the request content.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param timeout: (optional) How long to wait for the server to send\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             read timeout) <timeouts>` tuple.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :type timeout: float or tuple or urllib3 Timeout object\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             we verify the server's TLS certificate, or a string, in which case it\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             must be a path to a CA bundle to use\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :rtype: requests.Response\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             conn = self.get_connection(request.url, proxies)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except LocationValueError as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise InvalidURL(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self.cert_verify(conn, request.url, verify, cert)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         url = self.request_url(request, proxies)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self.add_headers(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             request,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             stream=stream,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout=timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             verify=verify,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             cert=cert,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             proxies=proxies,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if isinstance(timeout, tuple):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 connect, read = timeout\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             except ValueError:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise ValueError(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     f\"or a single float to set both timeouts to the same value.\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif isinstance(timeout, TimeoutSauce):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             pass\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           resp = conn.urlopen(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 method=request.method,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 url=url,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 body=request.body,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 headers=request.headers,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 redirect=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 assert_same_host=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 preload_content=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 decode_content=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 retries=self.max_retries,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout=timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 chunked=chunked,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     retries = retries.increment(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | method = 'POST', url = '/REST/2.0/ticket', response = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | error = NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f50691dcc40>: Failed to establish a new connection: [Errno 111] Connection refused')\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _pool = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f50693ab970>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _stacktrace = <traceback object at 0x7f50691d9540>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def increment(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         method: str | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         url: str | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         response: BaseHTTPResponse | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         error: Exception | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         _pool: ConnectionPool | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         _stacktrace: TracebackType | None = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ) -> Retry:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Return a new Retry object with incremented retry counters.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param response: A response object, or None, if the server did not\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             return a response.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :type response: :class:`~urllib3.response.BaseHTTPResponse`\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param Exception error: An error encountered during the request, or\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             None if the response was received successfully.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :return: A new ``Retry`` object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if self.total is False and error:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Disabled, indicate to re-raise the error.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise reraise(type(error), error, _stacktrace)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         total = self.total\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if total is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             total -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         connect = self.connect\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         read = self.read\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         redirect = self.redirect\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         status_count = self.status\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         other = self.other\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         cause = \"unknown\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         status = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         redirect_location = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if error and self._is_connection_error(error):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Connect retry?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if connect is False:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise reraise(type(error), error, _stacktrace)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             elif connect is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 connect -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif error and self._is_read_error(error):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Read retry?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if read is False or method is None or not self._is_method_retryable(method):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise reraise(type(error), error, _stacktrace)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             elif read is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 read -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif error:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Other retry?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if other is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 other -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif response and response.get_redirect_location():\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Redirect retry?\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if redirect is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 redirect -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             cause = \"too many redirects\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             response_redirect_location = response.get_redirect_location()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if response_redirect_location:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 redirect_location = response_redirect_location\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             status = response.status\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # Incrementing because of a server error like a 500 in\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             # status_forcelist and the given method is in the allowed_methods\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             cause = ResponseError.GENERIC_ERROR\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if response and response.status:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if status_count is not None:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     status_count -= 1\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 status = response.status\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         history = self.history + (\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             RequestHistory(method, url, error, status, redirect_location),\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         new_retry = self.new(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             total=total,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             connect=connect,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             read=read,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             redirect=redirect,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             status=status_count,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             other=other,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             history=history,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if new_retry.is_exhausted():\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             reason = error or ResponseError(cause)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/2.0/ticket (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f50691dcc40>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:515: MaxRetryError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | During handling of the above exception, another exception occurred:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <rt.rest2.Rt object at 0x7f50693ab640>, selector = 'ticket'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | get_params = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | json_data = {'Content': 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.', 'ContentType': 'text/plain', 'Queue': 'General', 'Subject': 'Testing issue NXAIBHxXaipuLBT'}\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | post_data = None, attachments = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def __request(self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   selector: str,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   get_params: typing.Optional[typing.Dict[str, typing.Any]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   json_data: typing.Optional[typing.Union[typing.Dict[str, typing.Any], typing.List[typing.Any]]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   post_data: typing.Optional[typing.Dict[str, typing.Any]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   attachments: typing.Optional[typing.Sequence[Attachment]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   ) -> typing.Union[typing.Dict[str, typing.Any], typing.List[str]]:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\" General request for :term:`API`.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param selector: End part of URL which completes self.url parameter\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                            set during class initialization.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                            E.g.: ``ticket/123456/show``\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param get_params: Parameters to add for a GET request.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param json_data: JSON request to send to the API.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param post_data: Dictionary with POST method fields\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param attachments: Optional list of :py:class:`~rt.rest2.Attachment` objects\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :returns: dict or list depending on request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :raises AuthorizationError: In case that request is called without previous\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                                     login or login attempt failed.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :raises ConnectionError: In case of connection error.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             url = str(urljoin(self.url, selector))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if not attachments:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if json_data:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >                   response = self.session.post(url, json=json_data, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | rt/rest2.py:182: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:637: in post\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     return self.request(\"POST\", url, data=data, json=json, **kwargs)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     resp = self.send(prep, **send_kwargs)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     r = adapter.send(request, **kwargs)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <requests.adapters.HTTPAdapter object at 0x7f50693abdf0>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | request = <PreparedRequest [POST]>, stream = False\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | timeout = Timeout(connect=None, read=None, total=None), verify = True\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | cert = None, proxies = OrderedDict()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def send(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     ):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param stream: (optional) Whether to stream the request content.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param timeout: (optional) How long to wait for the server to send\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             read timeout) <timeouts>` tuple.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :type timeout: float or tuple or urllib3 Timeout object\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             we verify the server's TLS certificate, or a string, in which case it\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             must be a path to a CA bundle to use\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :rtype: requests.Response\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             conn = self.get_connection(request.url, proxies)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except LocationValueError as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise InvalidURL(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self.cert_verify(conn, request.url, verify, cert)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         url = self.request_url(request, proxies)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         self.add_headers(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             request,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             stream=stream,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout=timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             verify=verify,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             cert=cert,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             proxies=proxies,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         if isinstance(timeout, tuple):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 connect, read = timeout\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             except ValueError:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise ValueError(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     f\"or a single float to set both timeouts to the same value.\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         elif isinstance(timeout, TimeoutSauce):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             pass\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             resp = conn.urlopen(\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 method=request.method,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 url=url,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 body=request.body,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 headers=request.headers,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 redirect=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 assert_same_host=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 preload_content=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 decode_content=False,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 retries=self.max_retries,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 timeout=timeout,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 chunked=chunked,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             )\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except (ProtocolError, OSError) as err:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             raise ConnectionError(err, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except MaxRetryError as e:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if isinstance(e.reason, ConnectTimeoutError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 # TODO: Remove this in 3.0.0: see #2811\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if not isinstance(e.reason, NewConnectionError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     raise ConnectTimeout(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if isinstance(e.reason, ResponseError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise RetryError(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if isinstance(e.reason, _ProxyError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise ProxyError(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if isinstance(e.reason, _SSLError):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 # This branch is for urllib3 v1.22 and later.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise SSLError(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           raise ConnectionError(e, request=request)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E           requests.exceptions.ConnectionError: HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/2.0/ticket (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f50691dcc40>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:519: ConnectionError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | The above exception was the direct cause of the following exception:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | rt_connection = <rt.rest2.Rt object at 0x7f50693ab640>\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def test_ticket_take(rt_connection: rt.rest2.Rt):\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"Test take/untake.\"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         ticket_subject = f'Testing issue {random_string()}'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         ticket_text = 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >       ticket_id = rt_connection.create_ticket(subject=ticket_subject, content=ticket_text, queue=RT_QUEUE)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | tests/test_tickets.py:63: \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | rt/rest2.py:617: in create_ticket\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     res = self.__request('ticket', json_data=ticket_data, attachments=attachments)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | self = <rt.rest2.Rt object at 0x7f50693ab640>, selector = 'ticket'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | get_params = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | json_data = {'Content': 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.', 'ContentType': 'text/plain', 'Queue': 'General', 'Subject': 'Testing issue NXAIBHxXaipuLBT'}\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | post_data = None, attachments = None\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     def __request(self,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   selector: str,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   get_params: typing.Optional[typing.Dict[str, typing.Any]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   json_data: typing.Optional[typing.Union[typing.Dict[str, typing.Any], typing.List[typing.Any]]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   post_data: typing.Optional[typing.Dict[str, typing.Any]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   attachments: typing.Optional[typing.Sequence[Attachment]] = None,\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                   ) -> typing.Union[typing.Dict[str, typing.Any], typing.List[str]]:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\" General request for :term:`API`.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param selector: End part of URL which completes self.url parameter\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                            set during class initialization.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                            E.g.: ``ticket/123456/show``\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param get_params: Parameters to add for a GET request.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param json_data: JSON request to send to the API.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param post_data: Dictionary with POST method fields\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :param attachments: Optional list of :py:class:`~rt.rest2.Attachment` objects\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :returns: dict or list depending on request\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :raises AuthorizationError: In case that request is called without previous\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                                     login or login attempt failed.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         :raises ConnectionError: In case of connection error.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         \"\"\"\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             url = str(urljoin(self.url, selector))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             if not attachments:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 if json_data:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     response = self.session.post(url, json=json_data, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 elif post_data:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     response = self.session.post(url, data=post_data, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                     response = self.session.get(url, params=get_params, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             else:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 fields: typing.List[typing.Tuple[str, typing.Any]] = [('Attachments', attachment.multipart_form_element()) for attachment in attachments]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 fields.append(('JSON', json.dumps(json_data)))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 multipart_data = requests_toolbelt.MultipartEncoder(fields=fields)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 _headers = dict(self.session.headers)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 _headers['content-type'] = multipart_data.content_type\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 response = self.session.post(url, data=multipart_data, headers=_headers, timeout=self.http_timeout)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             self.__debug_response(response)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             self.__check_response(response)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             try:\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 result = response.json()\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             except LookupError as exc:  # pragma: no cover\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise UnexpectedResponseError(f'Unknown response encoding: {response.encoding}.') from exc\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             except UnicodeError as exc:  # pragma: no cover\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |                 raise UnexpectedResponseError(f'''Unknown response encoding (UTF-8 does not work) - \"{response.content.decode('utf-8', 'replace')}\".''') from exc\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |     \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |             return result\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   |         except requests.exceptions.ConnectionError as exc:  # pragma: no cover\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | >           raise ConnectionError(\"Connection error\", exc) from exc\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | E           ConnectionError: [Errno Connection error] HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/2.0/ticket (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f50691dcc40>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | \n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | rt/rest2.py:210: ConnectionError\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | - generated xml file: /tmp/558156d8-17ed-11ee-8a50-bb14de238602/python-rt-python-rt/report.xml -\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | =========================== short test summary info ============================\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | FAILED tests/test_basic.py::test_get_user - ConnectionError: [Errno Connection error] HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/2.0/user/root (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f50694d6880>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | FAILED tests/test_basic.py::test_ticket_operations - ConnectionError: [Errno Connection error] HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/2.0/tickets?query=%28Subject%3D%27Testing+issue+UFaFcGmAxoxALua%27%29&fields=Owner%2CStatus%2CCreated%2CSubject%2CQueue%2CCustomFields%2CRequestor%2CCc%2CAdminCc%2CStarted%2CCreated%2CTimeEstimated%2CDue%2CType%2CInitialPriority%2CPriority%2CTimeLeft%2CLastUpdated&fields%5BQueue%5D=Name&page=1&per_page=20 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5068dcff70>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | FAILED tests/test_basic.py::test_attachments_create - ConnectionError: [Errno Connection error] HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/2.0/ticket (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5068f48880>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | FAILED tests/test_basic.py::test_attachments_comment - ConnectionError: [Errno Connection error] HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/2.0/ticket (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5068e90610>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | FAILED tests/test_basic.py::test_attachments_reply - ConnectionError: [Errno Connection error] HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/2.0/ticket (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5068f48e80>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | FAILED tests/test_basic.py::test_ticket_operations_admincc_cc - ConnectionError: [Errno Connection error] HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/2.0/ticket (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5068f8f700>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | FAILED tests/test_basic.py::test_users - ConnectionError: [Errno Connection error] HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/2.0/user/tester1@example.com (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5068d30400>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | FAILED tests/test_basic.py::test_queues - ConnectionError: [Errno Connection error] HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/2.0/queue/General (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5069261610>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | FAILED tests/test_rest1.py::RtTestCase::test_login_and_logout - ConnectionError: [Errno Connection error] HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/1.0/ (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f50692071c0>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | FAILED tests/test_rest1.py::RtTestCase::test_ticket_operations - ConnectionError: [Errno Connection error] HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/1.0/ (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5068cac490>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | FAILED tests/test_rest1.py::RtTestCase::test_ticket_operations_admincc_cc - ConnectionError: [Errno Connection error] HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/1.0/ (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5068f41d90>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | FAILED tests/test_tickets.py::test_ticket_attachments - ConnectionError: [Errno Connection error] HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/2.0/ticket (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f5068cadc70>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | FAILED tests/test_tickets.py::test_ticket_take - ConnectionError: [Errno Connection error] HTTPConnectionPool(host='localhost', port=8080): Max retries exceeded with url: /REST/2.0/ticket (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f50691dcc40>: Failed to establish a new connection: [Errno 111] Connection refused'))\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   | ========================= 13 failed, 1 passed in 5.36s =========================\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ]   \u274c  Failure - Main Test with pytest\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   | Collecting rich (from bandit>=1.7.3->flake8-bandit->rt==3.0.7.dev2+g955054b)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Downloading rich-13.4.2-py3-none-any.whl (239 kB)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 239.4/239.4 kB 5.1 MB/s eta 0:00:00\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   | Collecting snowballstemmer>=2.2.0 (from pydocstyle>=2.1->flake8-docstrings->rt==3.0.7.dev2+g955054b)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Downloading snowballstemmer-2.2.0-py2.py3-none-any.whl (93 kB)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ] exitcode '1': failure\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 93.0/93.0 kB 7.2 MB/s eta 0:00:00\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   | Collecting gitdb<5,>=4.0.1 (from GitPython>=1.0.1->bandit>=1.7.3->flake8-bandit->rt==3.0.7.dev2+g955054b)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Downloading gitdb-4.0.10-py3-none-any.whl (62 kB)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 62.7/62.7 kB 6.8 MB/s eta 0:00:00\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   | Collecting pbr!=2.1.0,>=2.0.0 (from stevedore>=1.20.0->bandit>=1.7.3->flake8-bandit->rt==3.0.7.dev2+g955054b)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Downloading pbr-5.11.1-py2.py3-none-any.whl (112 kB)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 112.7/112.7 kB 20.3 MB/s eta 0:00:00\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   | Collecting markdown-it-py>=2.2.0 (from rich->bandit>=1.7.3->flake8-bandit->rt==3.0.7.dev2+g955054b)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Downloading markdown_it_py-3.0.0-py3-none-any.whl (87 kB)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 87.5/87.5 kB 2.8 MB/s eta 0:00:00\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   | Collecting pygments<3.0.0,>=2.13.0 (from rich->bandit>=1.7.3->flake8-bandit->rt==3.0.7.dev2+g955054b)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Downloading Pygments-2.15.1-py3-none-any.whl (1.1 MB)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 1.1/1.1 MB 35.0 MB/s eta 0:00:00\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   | Collecting smmap<6,>=3.0.1 (from gitdb<5,>=4.0.1->GitPython>=1.0.1->bandit>=1.7.3->flake8-bandit->rt==3.0.7.dev2+g955054b)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Downloading smmap-5.0.0-py3-none-any.whl (24 kB)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   | Collecting mdurl~=0.1 (from markdown-it-py>=2.2.0->rich->bandit>=1.7.3->flake8-bandit->rt==3.0.7.dev2+g955054b)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Downloading mdurl-0.1.2-py3-none-any.whl (10.0 kB)\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   | Building wheels for collected packages: rt\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Building editable for rt (pyproject.toml): started\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Building editable for rt (pyproject.toml): finished with status 'done'\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Created wheel for rt: filename=rt-3.0.7.dev2+g955054b-0.editable-py3-none-any.whl size=17573 sha256=73d8d7c712ee0ea90f7cf045504fd2df0ab97fd895584c85dc3cc6da93abcf01\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Stored in directory: /tmp/pip-ephem-wheel-cache-0e9fy0i3/wheels/e7/2d/af/4e374b4ae79a150b89768ac2ca3a920182874c57cf0a9f9ac6\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   | Successfully built rt\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   | Installing collected packages: types-urllib3, snowballstemmer, wrapt, typing-extensions, types-requests, tomlkit, tomli, smmap, requests-toolbelt, pygments, pyflakes, pydocstyle, pycodestyle, platformdirs, pbr, mypy-extensions, mdurl, mccabe, lazy-object-proxy, isort, dill, codespell, stevedore, rt, mypy, markdown-it-py, gitdb, flake8, astroid, rich, pylint, pep8-naming, GitPython, flake8-docstrings, flake8-comprehensions, bandit, flake8-bandit\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   WARNING: The script pygmentize is installed in '/home/runneradmin/.local/bin' which is not on PATH.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   WARNING: The script pyflakes is installed in '/home/runneradmin/.local/bin' which is not on PATH.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   WARNING: The script pydocstyle is installed in '/home/runneradmin/.local/bin' which is not on PATH.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   WARNING: The script pycodestyle is installed in '/home/runneradmin/.local/bin' which is not on PATH.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   WARNING: The script pbr is installed in '/home/runneradmin/.local/bin' which is not on PATH.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   WARNING: The scripts isort and isort-identify-imports are installed in '/home/runneradmin/.local/bin' which is not on PATH.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   WARNING: The script codespell is installed in '/home/runneradmin/.local/bin' which is not on PATH.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   WARNING: The scripts dmypy, mypy, mypyc, stubgen and stubtest are installed in '/home/runneradmin/.local/bin' which is not on PATH.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   WARNING: The script markdown-it is installed in '/home/runneradmin/.local/bin' which is not on PATH.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   WARNING: The script flake8 is installed in '/home/runneradmin/.local/bin' which is not on PATH.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   WARNING: The scripts epylint, pylint, pylint-config, pyreverse and symilar are installed in '/home/runneradmin/.local/bin' which is not on PATH.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   WARNING: The scripts bandit, bandit-baseline and bandit-config-generator are installed in '/home/runneradmin/.local/bin' which is not on PATH.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   |   Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   | Successfully installed GitPython-3.1.31 astroid-2.15.5 bandit-1.7.5 codespell-2.2.5 dill-0.3.6 flake8-6.0.0 flake8-bandit-4.1.1 flake8-comprehensions-3.13.0 flake8-docstrings-1.7.0 gitdb-4.0.10 isort-5.12.0 lazy-object-proxy-1.9.0 markdown-it-py-3.0.0 mccabe-0.7.0 mdurl-0.1.2 mypy-1.4.1 mypy-extensions-1.0.0 pbr-5.11.1 pep8-naming-0.13.3 platformdirs-3.8.0 pycodestyle-2.10.0 pydocstyle-6.3.0 pyflakes-3.0.1 pygments-2.15.1 pylint-2.17.4 requests-toolbelt-1.0.0 rich-13.4.2 rt-3.0.7.dev2+g955054b smmap-5.0.0 snowballstemmer-2.2.0 stevedore-5.1.0 tomli-2.0.1 tomlkit-0.11.8 types-requests-2.31.0.1 types-urllib3-1.26.25.13 typing-extensions-4.7.0 wrapt-1.15.0\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   \u2705  Success - Main python -m pip install -e .[dev]\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python] \u2b50 Run Main mypy\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4] user= workdir=\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/tests      ] \ud83c\udfc1  Job failed\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   | /var/run/act/workflow/4: line 2: mypy: command not found\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python]   \u274c  Failure - Main mypy\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python] exitcode '127': command not found, please refer to https://github.com/nektos/act/issues/107 for more information\n[889bc432-4aa4-4fb3-a01c-e22fe5878df8/lint_python] \ud83c\udfc1  Job failed\n",
        "stderr": "Error: Job 'lint_python' failed\n",
        "workflow": {
            "path": "/tmp/558156d8-17ed-11ee-8a50-bb14de238602/python-rt-python-rt/.github/workflows/test_lint-crawler.yml",
            "type": "pytest"
        },
        "workflow_name": "889bc432-4aa4-4fb3-a01c-e22fe5878df8",
        "build_tool": "pytest",
        "elapsed_time": 172.72317719459534
    }
}