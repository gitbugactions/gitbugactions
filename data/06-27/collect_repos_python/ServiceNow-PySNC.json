{
    "repository": "ServiceNow/PySNC",
    "stars": 57,
    "language": "python",
    "size": 775,
    "clone_url": "https://github.com/ServiceNow/PySNC.git",
    "timestamp": "2023-06-28T15:45:42.887890Z",
    "clone_success": true,
    "number_of_actions": 2,
    "number_of_test_actions": 1,
    "actions_successful": true,
    "actions_build_tools": [
        "pytest",
        "unknown"
    ],
    "actions_test_build_tools": [
        "pytest"
    ],
    "actions_run": {
        "failed": false,
        "tests": [
            {
                "classname": "test.test_pebcak.TestPEBCAK",
                "name": "test_creds",
                "time": 0.002,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_pebcak.TestPEBCAK",
                "name": "test_forgot_to_iterate",
                "time": 0.002,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_pebcak.TestPEBCAK",
                "name": "test_instance",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_pebcak.TestPEBCAK",
                "name": "test_no_result_without_query",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_pebcak.TestPEBCAK",
                "name": "test_table",
                "time": 0.002,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api.TestAuditScoped",
                "name": "test_connect",
                "time": 0.002,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api.TestAuditScoped",
                "name": "test_http_url",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api.TestAuditScoped",
                "name": "test_len",
                "time": 0.001,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api.TestAuditScoped",
                "name": "test_link",
                "time": 0.002,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api.TestAuditScoped",
                "name": "test_link_list",
                "time": 0.002,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api.TestAuditScoped",
                "name": "test_link_query",
                "time": 0.003,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api.TestAuditScoped",
                "name": "test_next",
                "time": 0.003,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api.TestAuditScoped",
                "name": "test_proxy",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api_fields.TestRecordFields",
                "name": "test_attrs",
                "time": 0.002,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api_fields.TestRecordFields",
                "name": "test_attrs_changes",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api_fields.TestRecordFields",
                "name": "test_attrs_nil",
                "time": 0.002,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api_fields.TestRecordFields",
                "name": "test_boolean",
                "time": 0.002,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api_fields.TestRecordFields",
                "name": "test_dotwalk_with_element",
                "time": 0.002,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api_fields.TestRecordFields",
                "name": "test_field_access",
                "time": 0.002,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api_fields.TestRecordFields",
                "name": "test_field_all",
                "time": 0.002,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api_fields.TestRecordFields",
                "name": "test_field_bool",
                "time": 0.002,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api_fields.TestRecordFields",
                "name": "test_field_contains",
                "time": 0.002,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api_fields.TestRecordFields",
                "name": "test_field_getter",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api_fields.TestRecordFields",
                "name": "test_field_getter_query",
                "time": 0.002,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api_fields.TestRecordFields",
                "name": "test_field_limit",
                "time": 0.002,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api_fields.TestRecordFields",
                "name": "test_field_limit_query",
                "time": 0.002,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api_fields.TestRecordFields",
                "name": "test_field_set",
                "time": 0.002,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api_fields.TestRecordFields",
                "name": "test_field_set_init",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api_fields.TestRecordFields",
                "name": "test_fields",
                "time": 0.002,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api_query.TestRecordQuery",
                "name": "test_batching",
                "time": 0.002,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api_query.TestRecordQuery",
                "name": "test_changes",
                "time": 0.009,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api_query.TestRecordQuery",
                "name": "test_code_query_one",
                "time": 0.043,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api_query.TestRecordQuery",
                "name": "test_disable_display_values",
                "time": 0.002,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api_query.TestRecordQuery",
                "name": "test_double_query",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api_query.TestRecordQuery",
                "name": "test_extra_long_query",
                "time": 0.001,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api_query.TestRecordQuery",
                "name": "test_get_false",
                "time": 0.001,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api_query.TestRecordQuery",
                "name": "test_get_field_access",
                "time": 0.015,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api_query.TestRecordQuery",
                "name": "test_get_field_access_direct",
                "time": 0.002,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api_query.TestRecordQuery",
                "name": "test_get_field_false",
                "time": 0.001,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api_query.TestRecordQuery",
                "name": "test_get_field_true",
                "time": 0.001,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api_query.TestRecordQuery",
                "name": "test_get_query",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api_query.TestRecordQuery",
                "name": "test_get_query_two",
                "time": 0.001,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api_query.TestRecordQuery",
                "name": "test_get_true",
                "time": 0.001,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api_query.TestRecordQuery",
                "name": "test_import",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api_query.TestRecordQuery",
                "name": "test_join_query",
                "time": 0.001,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api_query.TestRecordQuery",
                "name": "test_len",
                "time": 0.001,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api_query.TestRecordQuery",
                "name": "test_len_nonzero",
                "time": 0.001,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api_query.TestRecordQuery",
                "name": "test_no_result_query",
                "time": 0.001,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api_query.TestRecordQuery",
                "name": "test_nonjson_error",
                "time": 0.009,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api_query.TestRecordQuery",
                "name": "test_not_null_query",
                "time": 0.001,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api_query.TestRecordQuery",
                "name": "test_null_query",
                "time": 0.001,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api_query.TestRecordQuery",
                "name": "test_or_query",
                "time": 0.001,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api_query.TestRecordQuery",
                "name": "test_query_obj",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api_write.TestWrite",
                "name": "test_crud",
                "time": 0.001,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api_write.TestWrite",
                "name": "test_insert",
                "time": 0.002,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api_write.TestWrite",
                "name": "test_insert_custom_guid",
                "time": 0.001,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api_write.TestWrite",
                "name": "test_multi_delete",
                "time": 0.001,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api_write.TestWrite",
                "name": "test_multi_update",
                "time": 0.001,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api_write.TestWrite",
                "name": "test_object_secondary_field",
                "time": 0.018,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_api_write.TestWrite",
                "name": "test_object_setter",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_attachment.TestAttachment",
                "name": "test_add_delete_get",
                "time": 0.017,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_attachment.TestAttachment",
                "name": "test_attachments_for",
                "time": 0.001,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_auth.TestAuth",
                "name": "test_auth_param_check",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_auth.TestAuth",
                "name": "test_basic",
                "time": 0.001,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_auth.TestAuth",
                "name": "test_basic_fail",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_auth.TestAuth",
                "name": "test_oauth",
                "time": 0.116,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_batching.TestBatching",
                "name": "test_batch_actual",
                "time": 0.002,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_batching.TestBatching",
                "name": "test_batch_multi",
                "time": 0.009,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_batching.TestBatching",
                "name": "test_batch_multi_uneven",
                "time": 0.002,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_batching.TestBatching",
                "name": "test_default_limit",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_element.TestElement",
                "name": "test_changes",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_element.TestElement",
                "name": "test_complex",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_element.TestElement",
                "name": "test_float",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_element.TestElement",
                "name": "test_hashing",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_element.TestElement",
                "name": "test_indexing",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_element.TestElement",
                "name": "test_int",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_element.TestElement",
                "name": "test_iter",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_element.TestElement",
                "name": "test_parent",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_element.TestElement",
                "name": "test_regex",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_element.TestElement",
                "name": "test_serialization",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_element.TestElement",
                "name": "test_set_and_display",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_element.TestElement",
                "name": "test_set_element",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_element.TestElement",
                "name": "test_str",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_element.TestElement",
                "name": "test_string_methods",
                "time": 0.0,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_element.TestElement",
                "name": "test_time",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_element.TestElement",
                "name": "test_truefalse",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_serialization.TestSerialization",
                "name": "test_pandas_both",
                "time": 0.04,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_serialization.TestSerialization",
                "name": "test_pandas_order_cols",
                "time": 0.002,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_serialization.TestSerialization",
                "name": "test_pandas_smart",
                "time": 0.001,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_serialization.TestSerialization",
                "name": "test_pandas_value",
                "time": 0.001,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_serialization.TestSerialization",
                "name": "test_serialize",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_serialization.TestSerialization",
                "name": "test_serialize_all_batch",
                "time": 0.001,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_serialization.TestSerialization",
                "name": "test_serialize_changes",
                "time": 0.003,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_serialization.TestSerialization",
                "name": "test_serialize_display",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_serialization.TestSerialization",
                "name": "test_serialize_noncurrent",
                "time": 0.001,
                "results": [
                    {
                        "result": "Failure",
                        "message": "requests.exceptions.InvalidURL: URL has an invalid label.",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_snc_serialization.TestSerialization",
                "name": "test_str",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            }
        ],
        "stdout": "[e209e07e-ea6c-434f-9acd-33378a619752/install-test] \ud83d\ude80  Start image=crawlergpt:latest\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/ServiceNow-PySNC] user=0 workdir=\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v4\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \u2601  git clone 'https://github.com/snok/install-poetry' # ref=v1\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test] \u2b50 Run Pre setup poetry\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \u2705  Success - Pre setup poetry\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \u2601  git clone 'https://github.com/actions/cache' # ref=v3\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test] \ud83e\uddea  Matrix: map[python-version:3.8]\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test] \u2b50 Run Main check out repository\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \u2705  Success - Main check out repository\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test] \u2b50 Run Main set up python 3.8\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \ud83d\udc33  docker cp src=/tmp/act-cache/57c8f5a6-8abb-4a52-8460-5ecc82b2e3a6/act/actions-setup-python@v4/ dst=/var/run/act/actions/actions-setup-python@v4/\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v4/] user=0 workdir=\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/setup/index.js] user= workdir=\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \ud83d\udcac  ::debug::Python is expected to be installed into /opt/hostedtoolcache\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \u2753  ::group::Installed versions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \ud83d\udcac  ::debug::Semantic version spec of 3.8 is 3.8\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \ud83d\udcac  ::debug::isExplicit: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \ud83d\udcac  ::debug::explicit? false\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \ud83d\udcac  ::debug::explicit? true\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \ud83d\udcac  ::debug::explicit? true\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \ud83d\udcac  ::debug::explicit? true\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \ud83d\udcac  ::debug::explicit? true\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \ud83d\udcac  ::debug::explicit? true\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \ud83d\udcac  ::debug::explicit? true\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \ud83d\udcac  ::debug::evaluating 6 versions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \ud83d\udcac  ::debug::matched: 3.8.11\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.8.11/x64\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \ud83d\udcac  ::debug::Found tool in cache Python 3.8.11 x64\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | Successfully set up CPython (3.8.11)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \u2753  ::endgroup::\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \u2753 add-matcher /run/act/actions/actions-setup-python@v4/.github/python.json\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \u2705  Success - Main set up python 3.8\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \u2699  ::set-env:: PKG_CONFIG_PATH=/opt/hostedtoolcache/Python/3.8.11/x64/lib/pkgconfig\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \u2699  ::set-env:: Python_ROOT_DIR=/opt/hostedtoolcache/Python/3.8.11/x64\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \u2699  ::set-env:: Python2_ROOT_DIR=/opt/hostedtoolcache/Python/3.8.11/x64\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \u2699  ::set-env:: Python3_ROOT_DIR=/opt/hostedtoolcache/Python/3.8.11/x64\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.8.11/x64/lib\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.8.11/x64\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \u2699  ::set-output:: python-version=3.8.11\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \u2699  ::set-output:: python-path=/opt/hostedtoolcache/Python/3.8.11/x64/bin/python\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.8.11/x64\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.8.11/x64/bin\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test] \u2b50 Run Main setup poetry\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \ud83d\udc33  docker cp src=/tmp/act-cache/57c8f5a6-8abb-4a52-8460-5ecc82b2e3a6/act/snok-install-poetry@v1/ dst=/var/run/act/actions/snok-install-poetry@v1/\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/snok-install-poetry@v1/] user=0 workdir=\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test] \u2b50 Run Main Install and configure Poetry\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2-composite-0.sh] user= workdir=\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \u001b[33mSetting Poetry installation path as /home/runneradmin/.local\u001b[0m\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \u001b[33mInstalling Poetry \ud83d\udc77\u001b[0m\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | Retrieving Poetry metadata\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | # Welcome to Poetry!\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | This will download and install the latest version of Poetry,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | a dependency and package manager for Python.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | It will add the `poetry` command to Poetry's bin directory, located at:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | /home/runneradmin/.local/bin\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | You can uninstall at any time by executing this script with the --uninstall option,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | and these changes will be reverted.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | Installing Poetry (1.5.1)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | Installing Poetry (1.5.1): Creating environment\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | Installing Poetry (1.5.1): Installing Poetry\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | Installing Poetry (1.5.1): Creating script\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | Installing Poetry (1.5.1): Done\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | Poetry (1.5.1) is installed now. Great!\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | To get started you need Poetry's bin directory (/home/runneradmin/.local/bin) in your `PATH`\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | environment variable.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | Add `export PATH=\"/home/runneradmin/.local/bin:$PATH\"` to your shell configuration file.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | Alternatively, you can call Poetry explicitly with `/home/runneradmin/.local/bin/poetry`.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | You can test that everything is set up by executing:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | `poetry --version`\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \u001b[33mInstallation completed. Configuring settings \ud83d\udee0\u001b[0m\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \u001b[33mDone \u2705\u001b[0m\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \u001b[33mIf you are creating a venv in your project, you can activate it by running 'source .venv/bin/activate'. If you're running this in an OS matrix, you can use 'source $VENV' instead, as an OS agnostic option\u001b[0m\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \u2705  Success - Main Install and configure Poetry\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \u2699  ::set-env:: VENV=.venv/bin/activate\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \u2699  ::add-path:: /home/runneradmin/.local/bin\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \u2705  Success - Main setup poetry\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \u2699  ::set-env:: VENV=.venv/bin/activate\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \u2699  ::add-path:: /home/runneradmin/.local/bin\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test] \u2b50 Run Main cache deps\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \ud83d\udc33  docker cp src=/tmp/act-cache/57c8f5a6-8abb-4a52-8460-5ecc82b2e3a6/act/actions-cache@v3/ dst=/var/run/act/actions/actions-cache@v3/\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-cache@v3/] user=0 workdir=\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-cache@v3/dist/restore/index.js] user= workdir=\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \ud83d\udcac  ::debug::Resolved Keys:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \ud83d\udcac  ::debug::[\"pydeps--c2adfd8d467e4ea158a1dda9cbae49d784da9d4f7fa122b7b1723a6cb67c9305\"]\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \ud83d\udcac  ::debug::Checking zstd --quiet --version\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \ud83d\udcac  ::debug::1.5.0\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \ud83d\udcac  ::debug::zstd version: 1.5.0\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:45389/_apis/artifactcache/cache?keys=pydeps--c2adfd8d467e4ea158a1dda9cbae49d784da9d4f7fa122b7b1723a6cb67c9305&version=25e65b70d167147605b4332eb57b6d34df8e0303b88c4de252efb18cf3ed148a\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \ud83d\udcac  ::debug::Failed to delete archive: Error: ENOENT: no such file or directory, unlink ''\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | Cache not found for input keys: pydeps--c2adfd8d467e4ea158a1dda9cbae49d784da9d4f7fa122b7b1723a6cb67c9305\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \u2705  Success - Main cache deps\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test] \u2b50 Run Main install dependencies\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4] user= workdir=\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | Creating virtualenv pysnc in /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/ServiceNow-PySNC/.venv\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | Installing dependencies from lock file\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | Package operations: 56 installs, 0 updates, 0 removals\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing certifi (2023.5.7)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing charset-normalizer (3.1.0)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing idna (3.4)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing packageurl-python (0.9.9)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing packaging (23.1)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing pyparsing (3.0.9)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing sortedcontainers (2.4.0)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing toml (0.10.2)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing types-urllib3 (1.26.25.13)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing urllib3 (2.0.2)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing colorama (0.4.6)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing commonmark (0.9.1)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing cyclonedx-python-lib (3.1.5)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing markupsafe (2.1.2)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing pygments (2.15.1)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing pytz (2023.3)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing pyyaml (6.0)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing types-requests (2.31.0.0)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing types-pyyaml (5.4.12)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing pip-requirements-parser (32.0.1)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing requests (2.31.0)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing zipp (3.15.0)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing types-setuptools (67.8.0.0)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing tinydb (4.7.1)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing alabaster (0.7.13)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing babel (2.12.1)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing cyclonedx-bom (3.11.0)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing exceptiongroup (1.1.1)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing imagesize (1.4.1)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing docutils (0.20.1)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing jinja2 (3.1.2)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing mypy-extensions (1.0.0)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing iniconfig (2.0.0)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing pluggy (1.0.0)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing importlib-metadata (6.6.0)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing oauthlib (3.2.2)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing snowballstemmer (2.2.0)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing sphinxcontrib-devhelp (1.0.2)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing sphinxcontrib-htmlhelp (2.0.1)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing sphinxcontrib-qthelp (1.0.3)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing sphinxcontrib-serializinghtml (1.1.5)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing tomli (2.0.1)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing typing-extensions (4.6.1)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing ossindex-lib (1.1.1)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing polling2 (0.5.0)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing rich (10.16.2)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing sphinxcontrib-jsmath (1.0.1)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing sphinxcontrib-applehelp (1.0.4)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing pyfiglet (0.8.post1)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | Connection pool is full, discarding connection: pypi.org. Connection pool size: 10\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing jake (3.0.0)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing mypy (1.3.0)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing pytest (7.3.1)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing python-dotenv (1.0.0)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing requests-oauthlib (1.3.1)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing sphinx (7.0.1)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |   \u2022 Installing types-oauthlib (3.2.0.8)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \u2705  Success - Main install dependencies\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test] \u2b50 Run Main install project\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/5] user= workdir=\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | Installing dependencies from lock file\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | No dependencies to install or update\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | Installing the current project: pysnc (1.1.5a1)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \u2705  Success - Main install project\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test] \u2b50 Run Main run tests\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/6] user= workdir=\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | ============================= test session starts ==============================\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | platform linux -- Python 3.8.11, pytest-7.3.1, pluggy-1.0.0\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | rootdir: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/ServiceNow-PySNC\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | collected 96 items\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_pebcak.py FF..F                                                [  5%]\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_api.py F.FFFFF.                                            [ 13%]\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_api_fields.py F.FFFFFFF.FFFF.F                             [ 30%]\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_api_query.py FFFF.FFFFFF.FF.FFFFFFFF.                      [ 55%]\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_api_write.py FFFFFF.                                       [ 62%]\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_attachment.py FF                                           [ 64%]\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_auth.py .F.F                                               [ 68%]\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_batching.py FFF.                                           [ 72%]\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_element.py ................                                [ 89%]\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_serialization.py FFFF.FF.F.                                [100%]\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | =================================== FAILURES ===================================\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | ____________________________ TestPEBCAK.test_creds _____________________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_pebcak.TestPEBCAK testMethod=test_creds>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_creds(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         with self.assertRaises(AuthenticationException) as context:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             client = ServiceNowClient(self.c.server, ('test','test'))\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             gr = client.GlideRecord('sys_user')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           gr.get('asdf')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_pebcak.py:26: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:556: in get\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.get(self, name)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:207: in get\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | ______________________ TestPEBCAK.test_forgot_to_iterate _______________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_pebcak.TestPEBCAK testMethod=test_forgot_to_iterate>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_forgot_to_iterate(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         client = ServiceNowClient(self.c.server, self.c.credentials)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = client.GlideRecord('sys_user')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.limit = 1\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       gr.query()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_pebcak.py:42: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:523: in query\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.list(self)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:197: in list\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/sys_user'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_query', ''), ('sysparm_display_value', 'all'), ('sysparm_limit', 1), ('sysparm_offset', 0), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | ____________________________ TestPEBCAK.test_table _____________________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_pebcak.TestPEBCAK testMethod=test_table>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_table(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         client = ServiceNowClient(self.c.server, self.c.credentials)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = client.GlideRecord('sys_user_list')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         client.session.close()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       self.assertRaises(RequestException, gr.get, 'doesntmatter')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_pebcak.py:15: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:556: in get\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.get(self, name)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:207: in get\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _________________________ TestAuditScoped.test_connect _________________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_api.TestAuditScoped testMethod=test_connect>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_connect(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         client = ServiceNowClient(self.c.server, self.c.credentials)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = client.GlideRecord('sys_user')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       r = gr.get('6816f79cc0a8016401c5a33be04be441')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_api.py:12: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:556: in get\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.get(self, name)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:207: in get\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/sys_user/6816f79cc0a8016401c5a33be04be441'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_query', ''), ('sysparm_display_value', 'all'), ('sysparm_limit', 100), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | ___________________________ TestAuditScoped.test_len ___________________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_api.TestAuditScoped testMethod=test_len>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_len(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         client = ServiceNowClient(self.c.server, self.c.credentials)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = client.GlideRecord('sys_user')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         self.assertEqual(len(gr), 0)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         self.assertEqual(gr.get_row_count(), 0)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       gr.query()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_api.py:78: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:523: in query\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.list(self)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:197: in list\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/sys_user'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_query', ''), ('sysparm_display_value', 'all'), ('sysparm_limit', 100), ('sysparm_offset', 0), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | __________________________ TestAuditScoped.test_link ___________________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_api.TestAuditScoped testMethod=test_link>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_link(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         client = ServiceNowClient(self.c.server, self.c.credentials)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = client.GlideRecord('sys_user')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       gr.get('6816f79cc0a8016401c5a33be04be441')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_api.py:19: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:556: in get\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.get(self, name)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:207: in get\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/sys_user/6816f79cc0a8016401c5a33be04be441'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_query', ''), ('sysparm_display_value', 'all'), ('sysparm_limit', 100), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | ________________________ TestAuditScoped.test_link_list ________________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_api.TestAuditScoped testMethod=test_link_list>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_link_list(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         client = ServiceNowClient(self.c.server, self.c.credentials)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = client.GlideRecord('sys_user')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.add_active_query()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.add_query(\"name\",\"CONTAINS\",\"a\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       link = gr.get_link_list()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_api.py:45: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:780: in get_link_list\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return Request('GET', url, params=dict(sysparm_query=sysparm_query)).prepare().url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:299: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/sys_user_list.do'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = {'sysparm_query': 'active=true^nameCONTAINSa'}\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _______________________ TestAuditScoped.test_link_query ________________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_api.TestAuditScoped testMethod=test_link_query>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_link_query(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         client = ServiceNowClient(self.c.server, self.c.credentials)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = client.GlideRecord('sys_user')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.limit = 5;\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       gr.query()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_api.py:30: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:523: in query\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.list(self)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:197: in list\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/sys_user'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_query', ''), ('sysparm_display_value', 'all'), ('sysparm_limit', 5), ('sysparm_offset', 0), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | __________________________ TestAuditScoped.test_next ___________________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_api.TestAuditScoped testMethod=test_next>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_next(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         client = ServiceNowClient(self.c.server, self.c.credentials)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = client.GlideRecord('sys_user')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.add_active_query()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.limit = 2\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       gr.query()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_api.py:56: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:523: in query\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.list(self)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:197: in list\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/sys_user'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_query', 'active=true'), ('sysparm_display_value', 'all'), ('sysparm_limit', 2), ('sysparm_offset', 0), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _________________________ TestRecordFields.test_attrs __________________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_api_fields.TestRecordFields testMethod=test_attrs>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_attrs(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = self.client.GlideRecord('sys_user')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       r = gr.get('6816f79cc0a8016401c5a33be04be441')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_api_fields.py:147: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:556: in get\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.get(self, name)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:207: in get\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/sys_user/6816f79cc0a8016401c5a33be04be441'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_query', ''), ('sysparm_display_value', 'all'), ('sysparm_limit', 100), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _______________________ TestRecordFields.test_attrs_nil ________________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_api_fields.TestRecordFields testMethod=test_attrs_nil>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_attrs_nil(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = self.client.GlideRecord('sys_user')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       r = gr.get('6816f79cc0a8016401c5a33be04be441')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_api_fields.py:155: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:556: in get\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.get(self, name)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:207: in get\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/sys_user/6816f79cc0a8016401c5a33be04be441'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_query', ''), ('sysparm_display_value', 'all'), ('sysparm_limit', 100), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | ________________________ TestRecordFields.test_boolean _________________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_api_fields.TestRecordFields testMethod=test_boolean>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_boolean(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = self.client.GlideRecord('sys_user')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.fields = ['sys_id', 'active']\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       gr.query()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_api_fields.py:128: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:523: in query\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.list(self)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:197: in list\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/sys_user'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_query', ''), ('sysparm_fields', 'sys_id,active'), ('sysparm_display_value', 'all'), ('sysparm_l...0), ('sysparm_offset', 0), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | __________________ TestRecordFields.test_dotwalk_with_element __________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_api_fields.TestRecordFields testMethod=test_dotwalk_with_element>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_dotwalk_with_element(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = self.client.GlideRecord('sys_user')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.fields = 'sys_id,active,email,department,department.name,department.dept_head,department.dept_head.email'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       gr.get('6816f79cc0a8016401c5a33be04be441')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_api_fields.py:189: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:556: in get\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.get(self, name)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:207: in get\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/sys_user/6816f79cc0a8016401c5a33be04be441'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_query', ''), ('sysparm_fields', 'sys_id,active,email,department,department.name,department.dept...), ('sysparm_limit', 100), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | ______________________ TestRecordFields.test_field_access ______________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_api_fields.TestRecordFields testMethod=test_field_access>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_field_access(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = self.client.GlideRecord('sys_user')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.fields = 'sys_id,name'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       gr.get('6816f79cc0a8016401c5a33be04be441')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_api_fields.py:52: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:556: in get\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.get(self, name)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:207: in get\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/sys_user/6816f79cc0a8016401c5a33be04be441'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_query', ''), ('sysparm_fields', 'sys_id,name'), ('sysparm_display_value', 'all'), ('sysparm_limit', 100), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _______________________ TestRecordFields.test_field_all ________________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_api_fields.TestRecordFields testMethod=test_field_all>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_field_all(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = self.client.GlideRecord('sys_user')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         self.assertIsNone(gr.fields)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       gr.query()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_api_fields.py:111: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:523: in query\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.list(self)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:197: in list\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/sys_user'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_query', ''), ('sysparm_display_value', 'all'), ('sysparm_limit', 100), ('sysparm_offset', 0), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _______________________ TestRecordFields.test_field_bool _______________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_api_fields.TestRecordFields testMethod=test_field_bool>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_field_bool(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = self.client.GlideRecord('sys_user')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.fields = 'sys_id,active'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       gr.get('6816f79cc0a8016401c5a33be04be441')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_api_fields.py:43: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:556: in get\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.get(self, name)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:207: in get\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/sys_user/6816f79cc0a8016401c5a33be04be441'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_query', ''), ('sysparm_fields', 'sys_id,active'), ('sysparm_display_value', 'all'), ('sysparm_limit', 100), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _____________________ TestRecordFields.test_field_contains _____________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_api_fields.TestRecordFields testMethod=test_field_contains>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_field_contains(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = self.client.GlideRecord('sys_user')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.fields = 'sys_id,name'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       gr.get('6816f79cc0a8016401c5a33be04be441')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_api_fields.py:64: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:556: in get\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.get(self, name)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:207: in get\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/sys_user/6816f79cc0a8016401c5a33be04be441'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_query', ''), ('sysparm_fields', 'sys_id,name'), ('sysparm_display_value', 'all'), ('sysparm_limit', 100), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | ___________________ TestRecordFields.test_field_getter_query ___________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_api_fields.TestRecordFields testMethod=test_field_getter_query>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_field_getter_query(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = self.client.GlideRecord('sys_user')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         self.assertEqual(gr.fields, None)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.limit = 1\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       gr.query()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_api_fields.py:118: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:523: in query\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.list(self)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:197: in list\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/sys_user'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_query', ''), ('sysparm_display_value', 'all'), ('sysparm_limit', 1), ('sysparm_offset', 0), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | ______________________ TestRecordFields.test_field_limit _______________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_api_fields.TestRecordFields testMethod=test_field_limit>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_field_limit(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = self.client.GlideRecord('sys_user')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.fields = 'sys_id,name'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       r = gr.get('6816f79cc0a8016401c5a33be04be441')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_api_fields.py:20: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:556: in get\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.get(self, name)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:207: in get\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/sys_user/6816f79cc0a8016401c5a33be04be441'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_query', ''), ('sysparm_fields', 'sys_id,name'), ('sysparm_display_value', 'all'), ('sysparm_limit', 100), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | ___________________ TestRecordFields.test_field_limit_query ____________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_api_fields.TestRecordFields testMethod=test_field_limit_query>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_field_limit_query(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = self.client.GlideRecord('sys_user')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.limit = 1\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.fields = 'sys_id,name'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       gr.query()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_api_fields.py:32: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:523: in query\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.list(self)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:197: in list\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/sys_user'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_query', ''), ('sysparm_fields', 'sys_id,name'), ('sysparm_display_value', 'all'), ('sysparm_lim...1), ('sysparm_offset', 0), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _______________________ TestRecordFields.test_field_set ________________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_api_fields.TestRecordFields testMethod=test_field_set>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_field_set(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = self.client.GlideRecord('sys_user')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.fields = 'sys_id,name'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       gr.get('6816f79cc0a8016401c5a33be04be441')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_api_fields.py:72: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:556: in get\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.get(self, name)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:207: in get\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/sys_user/6816f79cc0a8016401c5a33be04be441'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_query', ''), ('sysparm_fields', 'sys_id,name'), ('sysparm_display_value', 'all'), ('sysparm_limit', 100), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _________________________ TestRecordFields.test_fields _________________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_api_fields.TestRecordFields testMethod=test_fields>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_fields(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = self.client.GlideRecord('sys_user')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.fields = ['sys_id']\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.limit = 4\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       gr.query()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_api_fields.py:96: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:523: in query\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.list(self)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:197: in list\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/sys_user'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_query', ''), ('sysparm_fields', 'sys_id'), ('sysparm_display_value', 'all'), ('sysparm_limit', 4), ('sysparm_offset', 0), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | ________________________ TestRecordQuery.test_batching _________________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_api_query.TestRecordQuery testMethod=test_batching>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_batching(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         client = ServiceNowClient(self.c.server, self.c.credentials)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = client.GlideRecord('syslog')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.fields = ['sys_id']  # not testing this, but just limit response size\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       gr.query()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_api_query.py:17: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:523: in query\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.list(self)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:197: in list\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/syslog'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_query', ''), ('sysparm_fields', 'sys_id'), ('sysparm_display_value', 'all'), ('sysparm_limit', 100), ('sysparm_offset', 0), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _________________________ TestRecordQuery.test_changes _________________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_api_query.TestRecordQuery testMethod=test_changes>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_changes(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         client = ServiceNowClient(self.c.server, self.c.credentials)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = client.GlideRecord('sys_user')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.limit = 1\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       gr.query()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_api_query.py:261: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:523: in query\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.list(self)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:197: in list\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/sys_user'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_query', ''), ('sysparm_display_value', 'all'), ('sysparm_limit', 1), ('sysparm_offset', 0), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _____________________ TestRecordQuery.test_code_query_one ______________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_api_query.TestRecordQuery testMethod=test_code_query_one>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_code_query_one(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         from pysnc.query import Query\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         client = ServiceNowClient(self.c.server, self.c.credentials)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = client.GlideRecord('sys_user')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         q = Query()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         q.add_query('sys_id', '6816f79cc0a8016401c5a33be04be441')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         q.add_query('second', 'asdf')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         self.assertEqual(q.generate_query(), 'sys_id=6816f79cc0a8016401c5a33be04be441^second=asdf')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         self.assertEqual(gr.get_encoded_query(), '')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       gr.query(q)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_api_query.py:203: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:523: in query\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.list(self)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:197: in list\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/sys_user'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_query', 'sys_id=6816f79cc0a8016401c5a33be04be441^second=asdf'), ('sysparm_display_value', 'all'...0), ('sysparm_offset', 0), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _________________ TestRecordQuery.test_disable_display_values __________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_api_query.TestRecordQuery testMethod=test_disable_display_values>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_disable_display_values(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         client = ServiceNowClient(self.c.server, self.c.credentials)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = client.GlideRecord('sys_user')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.display_value = False\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.limit = 1\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       gr.query()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_api_query.py:235: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:523: in query\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.list(self)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:197: in list\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/sys_user'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_query', ''), ('sysparm_display_value', 'false'), ('sysparm_limit', 1), ('sysparm_offset', 0), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | ____________________ TestRecordQuery.test_extra_long_query _____________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_api_query.TestRecordQuery testMethod=test_extra_long_query>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_extra_long_query(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         client = ServiceNowClient(self.c.server, self.c.credentials)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         true_id = '6816f79cc0a8016401c5a33be04be441'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = client.GlideRecord('sys_user')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       self.assertTrue(gr.get(true_id), 'failed to get true_id')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_api_query.py:216: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:556: in get\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.get(self, name)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:207: in get\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/sys_user/6816f79cc0a8016401c5a33be04be441'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_query', ''), ('sysparm_display_value', 'all'), ('sysparm_limit', 100), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | ________________________ TestRecordQuery.test_get_false ________________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_api_query.TestRecordQuery testMethod=test_get_false>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_get_false(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         client = ServiceNowClient(self.c.server, self.c.credentials)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = client.GlideRecord('sys_user')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       self.assertFalse(gr.get('bunk'))\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_api_query.py:153: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:556: in get\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.get(self, name)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:207: in get\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/sys_user/bunk'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_query', ''), ('sysparm_display_value', 'all'), ('sysparm_limit', 100), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | ____________________ TestRecordQuery.test_get_field_access _____________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_api_query.TestRecordQuery testMethod=test_get_field_access>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_get_field_access(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         client = ServiceNowClient(self.c.server, self.c.credentials)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = client.GlideRecord('sys_user')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       self.assertTrue(gr.get('sys_id', '6816f79cc0a8016401c5a33be04be441'))\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_api_query.py:182: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:567: in get\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.query()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:523: in query\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.list(self)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:197: in list\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/sys_user'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_query', 'sys_id=6816f79cc0a8016401c5a33be04be441'), ('sysparm_display_value', 'all'), ('sysparm...0), ('sysparm_offset', 0), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _________________ TestRecordQuery.test_get_field_access_direct _________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_api_query.TestRecordQuery testMethod=test_get_field_access_direct>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_get_field_access_direct(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         client = ServiceNowClient(self.c.server, self.c.credentials)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = client.GlideRecord('sys_user')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       self.assertTrue(gr.get('6816f79cc0a8016401c5a33be04be441'))\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_api_query.py:175: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:556: in get\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.get(self, name)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:207: in get\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/sys_user/6816f79cc0a8016401c5a33be04be441'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_query', ''), ('sysparm_display_value', 'all'), ('sysparm_limit', 100), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _____________________ TestRecordQuery.test_get_field_false _____________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_api_query.TestRecordQuery testMethod=test_get_field_false>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_get_field_false(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         client = ServiceNowClient(self.c.server, self.c.credentials)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = client.GlideRecord('sys_user')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       self.assertFalse(gr.get('sys_id', 'bunk'))\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_api_query.py:159: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:567: in get\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.query()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:523: in query\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.list(self)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:197: in list\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/sys_user'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_query', 'sys_id=bunk'), ('sysparm_display_value', 'all'), ('sysparm_limit', 100), ('sysparm_offset', 0), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _____________________ TestRecordQuery.test_get_field_true ______________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_api_query.TestRecordQuery testMethod=test_get_field_true>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_get_field_true(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         client = ServiceNowClient(self.c.server, self.c.credentials)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = client.GlideRecord('sys_user')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       self.assertTrue(gr.get('sys_id', '6816f79cc0a8016401c5a33be04be441'))\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_api_query.py:147: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:567: in get\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.query()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:523: in query\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.list(self)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:197: in list\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/sys_user'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_query', 'sys_id=6816f79cc0a8016401c5a33be04be441'), ('sysparm_display_value', 'all'), ('sysparm...0), ('sysparm_offset', 0), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | ______________________ TestRecordQuery.test_get_query_two ______________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_api_query.TestRecordQuery testMethod=test_get_query_two>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_get_query_two(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         client = ServiceNowClient(self.c.server, self.c.credentials)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = client.GlideRecord('sys_user')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       gr.get('6816f79cc0a8016401c5a33be04be441')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_api_query.py:54: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:556: in get\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.get(self, name)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:207: in get\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/sys_user/6816f79cc0a8016401c5a33be04be441'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_query', ''), ('sysparm_display_value', 'all'), ('sysparm_limit', 100), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | ________________________ TestRecordQuery.test_get_true _________________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_api_query.TestRecordQuery testMethod=test_get_true>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_get_true(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         client = ServiceNowClient(self.c.server, self.c.credentials)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = client.GlideRecord('sys_user')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       self.assertTrue(gr.get('6816f79cc0a8016401c5a33be04be441'))\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_api_query.py:141: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:556: in get\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.get(self, name)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:207: in get\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/sys_user/6816f79cc0a8016401c5a33be04be441'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_query', ''), ('sysparm_display_value', 'all'), ('sysparm_limit', 100), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _______________________ TestRecordQuery.test_join_query ________________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_api_query.TestRecordQuery testMethod=test_join_query>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_join_query(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         client = ServiceNowClient(self.c.server, self.c.credentials)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = client.GlideRecord('sys_user')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         join_query = gr.add_join_query('sys_user_group', join_table_field='manager')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         join_query.add_query('active','true')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         self.assertEqual(gr.get_encoded_query(), 'JOINsys_user.sys_id=sys_user_group.manager!active=true')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       gr.query()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_api_query.py:65: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:523: in query\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.list(self)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:197: in list\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/sys_user'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_query', 'JOINsys_user.sys_id=sys_user_group.manager!active=true'), ('sysparm_display_value', 'a...0), ('sysparm_offset', 0), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | ___________________________ TestRecordQuery.test_len ___________________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_api_query.TestRecordQuery testMethod=test_len>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_len(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         client = ServiceNowClient(self.c.server, self.c.credentials)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr_first = client.GlideRecord('sys_user')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr_first.fields = 'sys_id'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       gr_first.query()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_api_query.py:98: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:523: in query\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.list(self)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:197: in list\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/sys_user'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_query', ''), ('sysparm_fields', 'sys_id'), ('sysparm_display_value', 'all'), ('sysparm_limit', 100), ('sysparm_offset', 0), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _______________________ TestRecordQuery.test_len_nonzero _______________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_api_query.TestRecordQuery testMethod=test_len_nonzero>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_len_nonzero(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         client = ServiceNowClient(self.c.server, self.c.credentials)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = client.GlideRecord('sys_user')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.add_not_null_query('mobile_phone')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       gr.query()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_api_query.py:109: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:523: in query\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.list(self)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:197: in list\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/sys_user'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_query', 'mobile_phoneISNOTEMPTY'), ('sysparm_display_value', 'all'), ('sysparm_limit', 100), ('sysparm_offset', 0), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _____________________ TestRecordQuery.test_no_result_query _____________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_api_query.TestRecordQuery testMethod=test_no_result_query>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_no_result_query(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         client = ServiceNowClient(self.c.server, self.c.credentials)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = client.GlideRecord('sys_user')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.add_query('sys_id', 'bunk')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       gr.query()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_api_query.py:166: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:523: in query\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.list(self)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:197: in list\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/sys_user'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_query', 'sys_id=bunk'), ('sysparm_display_value', 'all'), ('sysparm_limit', 100), ('sysparm_offset', 0), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | ______________________ TestRecordQuery.test_nonjson_error ______________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_api_query.TestRecordQuery testMethod=test_nonjson_error>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_nonjson_error(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         client = ServiceNowClient(self.c.server, self.c.credentials)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         super_long_non_existant_name = \"A\" * 23000\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = client.GlideRecord(super_long_non_existant_name)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       self.assertRaisesRegex(exceptions.RequestException, r'^<!DOCTYPE html>.*', lambda: gr.get('doesntmatter'))\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_api_query.py:255: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_api_query.py:255: in <lambda>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.assertRaisesRegex(exceptions.RequestException, r'^<!DOCTYPE html>.*', lambda: gr.get('doesntmatter'))\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:556: in get\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.get(self, name)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:207: in get\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _____________________ TestRecordQuery.test_not_null_query ______________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_api_query.TestRecordQuery testMethod=test_not_null_query>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_not_null_query(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         client = ServiceNowClient(self.c.server, self.c.credentials)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = client.GlideRecord('sys_user')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.add_not_null_query('mobile_phone')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       gr.query()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_api_query.py:117: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:523: in query\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.list(self)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:197: in list\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/sys_user'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_query', 'mobile_phoneISNOTEMPTY'), ('sysparm_display_value', 'all'), ('sysparm_limit', 100), ('sysparm_offset', 0), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _______________________ TestRecordQuery.test_null_query ________________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_api_query.TestRecordQuery testMethod=test_null_query>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_null_query(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         client = ServiceNowClient(self.c.server, self.c.credentials)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr_first = client.GlideRecord('sys_user')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr_first.fields = 'sys_id'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       gr_first.query()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_api_query.py:86: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:523: in query\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.list(self)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:197: in list\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/sys_user'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_query', ''), ('sysparm_fields', 'sys_id'), ('sysparm_display_value', 'all'), ('sysparm_limit', 100), ('sysparm_offset', 0), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | ________________________ TestRecordQuery.test_or_query _________________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_api_query.TestRecordQuery testMethod=test_or_query>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_or_query(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         client = ServiceNowClient(self.c.server, self.c.credentials)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = client.GlideRecord('sys_db_object')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         o = gr.add_query('name', 'alm_asset')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         o.add_or_condition('name', 'bsm_chart')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       gr.query()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_api_query.py:38: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:523: in query\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.list(self)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:197: in list\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/sys_db_object'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_query', 'name=alm_asset^ORname=bsm_chart'), ('sysparm_display_value', 'all'), ('sysparm_limit', 100), ('sysparm_offset', 0), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _____________________________ TestWrite.test_crud ______________________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_api_write.TestWrite testMethod=test_crud>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_crud(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         client = ServiceNowClient(self.c.server, self.c.credentials)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = client.GlideRecord('problem')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.initialize()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.short_description = \"Unit Test - Insert\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.description = \"Second Field\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.bunk_field = \"Bunk Field\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       res = gr.insert()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_api_write.py:17: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:579: in insert\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.post(self)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:224: in post\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [POST]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/problem'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_display_value', 'all'), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | ____________________________ TestWrite.test_insert _____________________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_api_write.TestWrite testMethod=test_insert>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_insert(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # I want to ensure the records sys_id is updated\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         client = ServiceNowClient(self.c.server, self.c.credentials)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = client.GlideRecord('problem')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.initialize()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.short_description = \"Unit Test - Test insert id update\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         self.assertIsNone(gr.sys_id)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       res = gr.insert()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_api_write.py:93: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:579: in insert\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.post(self)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:224: in post\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [POST]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/problem'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_display_value', 'all'), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | ______________________ TestWrite.test_insert_custom_guid _______________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_api_write.TestWrite testMethod=test_insert_custom_guid>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_insert_custom_guid(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         client = ServiceNowClient(self.c.server, self.c.credentials)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         customsysid = 'AAAABBBBCCCCDDDDEEEEFFFF00001111'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # make sure this id doesn't exist, first\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = client.GlideRecord('problem')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       if gr.get(customsysid):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_api_write.py:112: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:556: in get\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.get(self, name)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:207: in get\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/problem/AAAABBBBCCCCDDDDEEEEFFFF00001111'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_query', ''), ('sysparm_display_value', 'all'), ('sysparm_limit', 100), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _________________________ TestWrite.test_multi_delete __________________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_api_write.TestWrite testMethod=test_multi_delete>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_multi_delete(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         client = ServiceNowClient(self.c.server, self.c.credentials)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = client.GlideRecord('problem')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.add_query('short_description', 'LIKE', 'BUNKZZ')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       gr.delete_multiple() # try to make sure weh ave none first\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_api_write.py:160: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:648: in delete_multiple\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.query()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:523: in query\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.list(self)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:197: in list\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/problem'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_query', 'short_descriptionLIKEBUNKZZ'), ('sysparm_fields', 'sys_id'), ('sysparm_display_value',...0), ('sysparm_offset', 0), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _________________________ TestWrite.test_multi_update __________________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_api_write.TestWrite testMethod=test_multi_update>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_multi_update(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         client = ServiceNowClient(self.c.server, self.c.credentials)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = client.GlideRecord('problem')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.add_query('short_description', 'LIKE', 'BUNKZZ')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       gr.query()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_api_write.py:194: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:523: in query\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.list(self)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:197: in list\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/problem'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_query', 'short_descriptionLIKEBUNKZZ'), ('sysparm_display_value', 'all'), ('sysparm_limit', 100), ('sysparm_offset', 0), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | ____________________ TestWrite.test_object_secondary_field _____________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_api_write.TestWrite testMethod=test_object_secondary_field>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_object_secondary_field(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         client = ServiceNowClient(self.c.server, self.c.credentials)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = client.GlideRecord('sys_user')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.limit = 1\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       gr.query()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_api_write.py:148: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:523: in query\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.list(self)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:197: in list\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/sys_user'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_query', ''), ('sysparm_display_value', 'all'), ('sysparm_limit', 1), ('sysparm_offset', 0), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | ______________________ TestAttachment.test_add_delete_get ______________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_attachment.TestAttachment testMethod=test_add_delete_get>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_add_delete_get(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         client = ServiceNowClient(self.c.server, self.c.credentials)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       with TempTestRecord(client, 'problem') as gr:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_attachment.py:49: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/utils.py:11: in __enter__\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.__gr.insert()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:579: in insert\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.post(self)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:224: in post\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [POST]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/problem'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_display_value', 'all'), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _____________________ TestAttachment.test_attachments_for ______________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_attachment.TestAttachment testMethod=test_attachments_for>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_attachments_for(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       gr = self._getOrCreateEmptyTestRecord()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_attachment.py:41: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_attachment.py:29: in _getOrCreateEmptyTestRecord\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     gr.query()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:523: in query\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.list(self)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:197: in list\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/problem'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_query', 'short_description=Unit Test - Attachments - Empty'), ('sysparm_display_value', 'all'),...0), ('sysparm_offset', 0), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _____________________________ TestAuth.test_basic ______________________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_auth.TestAuth testMethod=test_basic>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_basic(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         client = ServiceNowClient(self.c.server, self.c.credentials)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = client.GlideRecord('sys_user')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.fields = 'sys_id'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       self.assertTrue(gr.get('6816f79cc0a8016401c5a33be04be441'))\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_auth.py:18: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:556: in get\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.get(self, name)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:207: in get\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/sys_user/6816f79cc0a8016401c5a33be04be441'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_query', ''), ('sysparm_fields', 'sys_id'), ('sysparm_display_value', 'all'), ('sysparm_limit', 100), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _____________________________ TestAuth.test_oauth ______________________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_auth.TestAuth testMethod=test_oauth>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_oauth(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Manual setup using legacy oauth\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         server = self.c.server\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         creds = self.c.credentials\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         client_id = self.c.get_value('CLIENT_ID')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         secret = self.c.get_value('CLIENT_SECRET')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       client = ServiceNowClient(self.c.server, ServiceNowPasswordGrantFlow(creds[0], creds[1], client_id, secret))\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_auth.py:40: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:50: in __init__\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.__session = auth.authenticate(self.__instance)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/auth.py:50: in authenticate\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     oauth.fetch_token(token_url=self.authorization_url(instance),\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests_oauthlib/oauth2_session.py:341: in fetch_token\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     r = self.request(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests_oauthlib/oauth2_session.py:521: in request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return super(OAuth2Session, self).request(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:575: in request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     prep = self.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [POST]>, url = 'https://.service-now.com/oauth_token.do'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | ________________________ TestBatching.test_batch_actual ________________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_batching.TestBatching testMethod=test_batch_actual>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_batch_actual(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         client = ServiceNowClient(self.c.server, self.c.credentials)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = client.GlideRecord('problem')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.fields = 'sys_id'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.batch_size = 3\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       gr.query()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_batching.py:39: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:523: in query\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.list(self)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:197: in list\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/problem'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_query', ''), ('sysparm_fields', 'sys_id'), ('sysparm_display_value', 'all'), ('sysparm_limit', 3), ('sysparm_offset', 0), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | ________________________ TestBatching.test_batch_multi _________________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_batching.TestBatching testMethod=test_batch_multi>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_batch_multi(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         client = ServiceNowClient(self.c.server, self.c.credentials)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = client.GlideRecord('problem')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.fields = 'sys_id'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.batch_size = 3\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.limit = 9\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       gr.query()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_batching.py:16: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:523: in query\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.list(self)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:197: in list\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/problem'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_query', ''), ('sysparm_fields', 'sys_id'), ('sysparm_display_value', 'all'), ('sysparm_limit', 3), ('sysparm_offset', 0), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _____________________ TestBatching.test_batch_multi_uneven _____________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_batching.TestBatching testMethod=test_batch_multi_uneven>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_batch_multi_uneven(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         client = ServiceNowClient(self.c.server, self.c.credentials)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = client.GlideRecord('problem')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.fields = 'sys_id'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.batch_size = 3\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.limit = 7\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       gr.query()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_batching.py:28: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:523: in query\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.list(self)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:197: in list\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/problem'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_query', ''), ('sysparm_fields', 'sys_id'), ('sysparm_display_value', 'all'), ('sysparm_limit', 3), ('sysparm_offset', 0), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | ______________________ TestSerialization.test_pandas_both ______________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_serialization.TestSerialization testMethod=test_pandas_both>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_pandas_both(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         client = ServiceNowClient(self.c.server, self.c.credentials)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = client.GlideRecord('problem')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.fields = 'sys_id,short_description,state'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.limit = 4\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       gr.query()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_serialization.py:38: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:523: in query\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.list(self)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:197: in list\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/problem'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_query', ''), ('sysparm_fields', 'sys_id,short_description,state'), ('sysparm_display_value', 'a...4), ('sysparm_offset', 0), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | ___________________ TestSerialization.test_pandas_order_cols ___________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_serialization.TestSerialization testMethod=test_pandas_order_cols>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_pandas_order_cols(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         client = ServiceNowClient(self.c.server, self.c.credentials)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = client.GlideRecord('problem')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.fields = 'sys_id,short_description,state'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.limit = 4\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       gr.query()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_serialization.py:81: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:523: in query\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.list(self)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:197: in list\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/problem'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_query', ''), ('sysparm_fields', 'sys_id,short_description,state'), ('sysparm_display_value', 'a...4), ('sysparm_offset', 0), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _____________________ TestSerialization.test_pandas_smart ______________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_serialization.TestSerialization testMethod=test_pandas_smart>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_pandas_smart(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         client = ServiceNowClient(self.c.server, self.c.credentials)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = client.GlideRecord('problem')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.fields = 'sys_id,short_description,state'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.limit = 4\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       gr.query()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_serialization.py:16: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:523: in query\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.list(self)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:197: in list\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/problem'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_query', ''), ('sysparm_fields', 'sys_id,short_description,state'), ('sysparm_display_value', 'a...4), ('sysparm_offset', 0), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _____________________ TestSerialization.test_pandas_value ______________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_serialization.TestSerialization testMethod=test_pandas_value>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_pandas_value(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         client = ServiceNowClient(self.c.server, self.c.credentials)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = client.GlideRecord('problem')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.fields = 'sys_id,short_description,state'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.limit = 4\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       gr.query()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_serialization.py:61: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:523: in query\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.list(self)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:197: in list\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/problem'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_query', ''), ('sysparm_fields', 'sys_id,short_description,state'), ('sysparm_display_value', 'a...4), ('sysparm_offset', 0), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | __________________ TestSerialization.test_serialize_all_batch __________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_serialization.TestSerialization testMethod=test_serialize_all_batch>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_serialize_all_batch(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         client = ServiceNowClient(self.c.server, self.c.credentials)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = client.GlideRecord('problem')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.batch_size = 3\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.limit = 9\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       gr.query()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_serialization.py:102: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:523: in query\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.list(self)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:197: in list\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/problem'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_query', ''), ('sysparm_display_value', 'all'), ('sysparm_limit', 3), ('sysparm_offset', 0), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | ___________________ TestSerialization.test_serialize_changes ___________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_serialization.TestSerialization testMethod=test_serialize_changes>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_serialize_changes(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         client = ServiceNowClient(self.c.server, self.c.credentials)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = client.GlideRecord('problem')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.fields = 'sys_id,short_description,state'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.limit = 4\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       gr.query()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_serialization.py:124: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:523: in query\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.list(self)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:197: in list\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/problem'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_query', ''), ('sysparm_fields', 'sys_id,short_description,state'), ('sysparm_display_value', 'a...4), ('sysparm_offset', 0), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _________________ TestSerialization.test_serialize_noncurrent __________________\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <test_snc_serialization.TestSerialization testMethod=test_serialize_noncurrent>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def test_serialize_noncurrent(self):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         client = ServiceNowClient(self.c.server, self.c.credentials)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr = client.GlideRecord('problem')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.fields = 'sys_id,short_description,state'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         gr.limit = 4\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >       gr.query()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | test/test_snc_serialization.py:113: \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/record.py:523: in query\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     response = self._client.table_api.list(self)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:197: in list\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     return self._send(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | pysnc/client.py:176: in _send\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     request = self.session.prepare_request(req)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/sessions.py:486: in prepare_request\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     p.prepare(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:368: in prepare\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     self.prepare_url(url, params)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | self = <PreparedRequest [GET]>\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | url = 'https://.service-now.com/api/now/table/problem'\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | params = OrderedDict([('sysparm_query', ''), ('sysparm_fields', 'sys_id,short_description,state'), ('sysparm_display_value', 'a...4), ('sysparm_offset', 0), ('sysparm_exclude_reference_link', 'true'), ('sysparm_suppress_pagination_header', 'true')])\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     def prepare_url(self, url, params):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         \"\"\"Prepares the given HTTP URL.\"\"\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: Accept objects that have string representations.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: We're unable to blindly call unicode/str functions\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: as this will include the bytestring indicator (b'')\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: on python 3.x.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         #: https://github.com/psf/requests/pull/2238\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if isinstance(url, bytes):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = url.decode(\"utf8\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         else:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             url = str(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Remove leading whitespaces from url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         url = url.lstrip()\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # `data` etc to work around exceptions from `url_parse`, which\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # handles RFC 3986 only.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if \":\" in url and not url.lower().startswith(\"http\"):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             self.url = url\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             return\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # Support for unicode domain names and paths.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             scheme, auth, host, port, path, query, fragment = parse_url(url)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         except LocationParseError as e:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(*e.args)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not scheme:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise MissingSchema(\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Invalid URL {url!r}: No scheme supplied. \"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 f\"Perhaps you meant https://{url}?\"\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             )\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not host:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             raise InvalidURL(f\"Invalid URL {url!r}: No host supplied\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |     \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # In general, we want to try IDNA encoding the hostname if the string contains\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # non-ASCII characters. This allows users to automatically get the correct IDNA\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # behaviour. For strings containing only ASCII characters, we need to also verify\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         if not unicode_is_ascii(host):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             try:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 host = self._get_idna_encoded_host(host)\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |             except UnicodeError:\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |                 raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   |         elif host.startswith((\"*\", \".\")):\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | >           raise InvalidURL(\"URL has an invalid label.\")\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | E           requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | \n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | .venv/lib/python3.8/site-packages/requests/models.py:457: InvalidURL\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | - generated xml file: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/ServiceNow-PySNC/report.xml -\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | =========================== short test summary info ============================\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_pebcak.py::TestPEBCAK::test_creds - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_pebcak.py::TestPEBCAK::test_forgot_to_iterate - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_pebcak.py::TestPEBCAK::test_table - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_api.py::TestAuditScoped::test_connect - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_api.py::TestAuditScoped::test_len - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_api.py::TestAuditScoped::test_link - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_api.py::TestAuditScoped::test_link_list - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_api.py::TestAuditScoped::test_link_query - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_api.py::TestAuditScoped::test_next - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_api_fields.py::TestRecordFields::test_attrs - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_api_fields.py::TestRecordFields::test_attrs_nil - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_api_fields.py::TestRecordFields::test_boolean - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_api_fields.py::TestRecordFields::test_dotwalk_with_element - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_api_fields.py::TestRecordFields::test_field_access - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_api_fields.py::TestRecordFields::test_field_all - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_api_fields.py::TestRecordFields::test_field_bool - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_api_fields.py::TestRecordFields::test_field_contains - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_api_fields.py::TestRecordFields::test_field_getter_query - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_api_fields.py::TestRecordFields::test_field_limit - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_api_fields.py::TestRecordFields::test_field_limit_query - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_api_fields.py::TestRecordFields::test_field_set - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_api_fields.py::TestRecordFields::test_fields - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_api_query.py::TestRecordQuery::test_batching - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_api_query.py::TestRecordQuery::test_changes - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_api_query.py::TestRecordQuery::test_code_query_one - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_api_query.py::TestRecordQuery::test_disable_display_values - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_api_query.py::TestRecordQuery::test_extra_long_query - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_api_query.py::TestRecordQuery::test_get_false - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_api_query.py::TestRecordQuery::test_get_field_access - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_api_query.py::TestRecordQuery::test_get_field_access_direct - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_api_query.py::TestRecordQuery::test_get_field_false - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_api_query.py::TestRecordQuery::test_get_field_true - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_api_query.py::TestRecordQuery::test_get_query_two - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_api_query.py::TestRecordQuery::test_get_true - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_api_query.py::TestRecordQuery::test_join_query - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_api_query.py::TestRecordQuery::test_len - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_api_query.py::TestRecordQuery::test_len_nonzero - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_api_query.py::TestRecordQuery::test_no_result_query - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_api_query.py::TestRecordQuery::test_nonjson_error - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_api_query.py::TestRecordQuery::test_not_null_query - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_api_query.py::TestRecordQuery::test_null_query - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_api_query.py::TestRecordQuery::test_or_query - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_api_write.py::TestWrite::test_crud - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_api_write.py::TestWrite::test_insert - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_api_write.py::TestWrite::test_insert_custom_guid - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_api_write.py::TestWrite::test_multi_delete - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_api_write.py::TestWrite::test_multi_update - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_api_write.py::TestWrite::test_object_secondary_field - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_attachment.py::TestAttachment::test_add_delete_get - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_attachment.py::TestAttachment::test_attachments_for - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_auth.py::TestAuth::test_basic - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_auth.py::TestAuth::test_oauth - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_batching.py::TestBatching::test_batch_actual - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_batching.py::TestBatching::test_batch_multi - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_batching.py::TestBatching::test_batch_multi_uneven - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_serialization.py::TestSerialization::test_pandas_both - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_serialization.py::TestSerialization::test_pandas_order_cols - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_serialization.py::TestSerialization::test_pandas_smart - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_serialization.py::TestSerialization::test_pandas_value - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_serialization.py::TestSerialization::test_serialize_all_batch - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_serialization.py::TestSerialization::test_serialize_changes - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | FAILED test/test_snc_serialization.py::TestSerialization::test_serialize_noncurrent - requests.exceptions.InvalidURL: URL has an invalid label.\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   | ======================== 62 failed, 34 passed in 6.77s =========================\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \u274c  Failure - Main run tests\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test] exitcode '1': failure\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test] \u2b50 Run Post setup poetry\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \ud83d\udc33  docker cp src=/tmp/act-cache/57c8f5a6-8abb-4a52-8460-5ecc82b2e3a6/act/snok-install-poetry@v1/ dst=/var/run/act/actions/snok-install-poetry@v1/\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/snok-install-poetry@v1/] user=0 workdir=\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test]   \u2705  Success - Post setup poetry\n[e209e07e-ea6c-434f-9acd-33378a619752/install-test] \ud83c\udfc1  Job failed\n",
        "stderr": "Error: context canceled\n",
        "workflow": "/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/ServiceNow-PySNC/.github/workflows/test-crawler.yaml",
        "build_tool": "pytest",
        "elapsed_time": 602.3091855049133
    }
}