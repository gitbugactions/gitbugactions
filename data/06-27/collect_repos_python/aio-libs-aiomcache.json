{
    "repository": "aio-libs/aiomcache",
    "stars": 137,
    "language": "python",
    "size": 206,
    "clone_url": "https://github.com/aio-libs/aiomcache.git",
    "timestamp": "2023-06-28T10:25:57.525075Z",
    "clone_success": true,
    "number_of_actions": 3,
    "number_of_test_actions": 1,
    "actions_successful": true,
    "actions_build_tools": [
        "unknown",
        "unknown",
        "pytest"
    ],
    "actions_test_build_tools": [
        "pytest"
    ],
    "actions_run": {
        "failed": false,
        "tests": [
            {
                "classname": "tests.commands_test",
                "name": "test_valid_key[key]",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands_test",
                "name": "test_valid_key[123]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands_test",
                "name": "test_valid_key[!@#]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands_test",
                "name": "test_valid_key[\\xe4\\xb8\\xad\\xe6\\x96\\x87]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands_test",
                "name": "test_valid_key[\\xe3\\x81\\x93\\xe3\\x82\\x93\\xe3\\x81\\xab\\xe3\\x81\\xa1\\xe3\\x81\\xaf]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands_test",
                "name": "test_valid_key[\\xec\\x95\\x88\\xeb\\x85\\x95\\xed\\x95\\x98\\xec\\x84\\xb8\\xec\\x9a\\x94]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands_test",
                "name": "test_invalid_key[foo bar]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands_test",
                "name": "test_invalid_key[foo\\t]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands_test",
                "name": "test_invalid_key[\\nbar]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands_test",
                "name": "test_invalid_key[foo \\rbar]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands_test",
                "name": "test_invalid_key[\\x18\\x0e]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands_test",
                "name": "test_invalid_key[ `]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands_test",
                "name": "test_invalid_key[0\\x00]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands_test",
                "name": "test_invalid_key[ \\x01]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands_test",
                "name": "test_invalid_key[foo\\x00bar]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands_test",
                "name": "test_invalid_key[\\x1f]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands_test",
                "name": "test_invalid_key[\\x7f]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands_test",
                "name": "test_invalid_key[\\xc2\\x80]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands_test",
                "name": "test_invalid_key[\\xc2\\x9f]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands_test",
                "name": "test_version",
                "time": 0.008,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands_test",
                "name": "test_flush_all",
                "time": 0.004,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands_test",
                "name": "test_set_get",
                "time": 0.005,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands_test",
                "name": "test_gets",
                "time": 0.004,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands_test",
                "name": "test_multi_get",
                "time": 0.004,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands_test",
                "name": "test_multi_get_doubling_keys",
                "time": 0.004,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands_test",
                "name": "test_set_expire",
                "time": 0.004,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands_test",
                "name": "test_set_errors",
                "time": 0.012,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands_test",
                "name": "test_gets_cas",
                "time": 0.004,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands_test",
                "name": "test_cas_missing",
                "time": 0.003,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands_test",
                "name": "test_add",
                "time": 0.021,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands_test",
                "name": "test_replace",
                "time": 0.004,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands_test",
                "name": "test_append",
                "time": 0.005,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands_test",
                "name": "test_prepend",
                "time": 0.004,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands_test",
                "name": "test_delete",
                "time": 0.004,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands_test",
                "name": "test_delete_key_not_exists",
                "time": 0.004,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands_test",
                "name": "test_incr",
                "time": 0.004,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands_test",
                "name": "test_incr_errors",
                "time": 0.003,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands_test",
                "name": "test_decr",
                "time": 0.003,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands_test",
                "name": "test_decr_errors",
                "time": 0.003,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands_test",
                "name": "test_stats",
                "time": 0.003,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands_test",
                "name": "test_touch",
                "time": 0.003,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands_test",
                "name": "test_close",
                "time": 0.022,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands_test",
                "name": "test_flag_helper[key]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands_test",
                "name": "test_flag_helper[bkey]",
                "time": 0.006,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands_test",
                "name": "test_flag_helper[False]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands_test",
                "name": "test_flag_helper[1]",
                "time": 0.016,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands_test",
                "name": "test_flag_helper[None]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands_test",
                "name": "test_flag_helper[0.5]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands_test",
                "name": "test_flag_helper[value6]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands_test",
                "name": "test_flag_helper[value7]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands_test",
                "name": "test_flag_helper[value8]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands_test",
                "name": "test_flag_helper[!@#]",
                "time": 0.021,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands_test",
                "name": "test_flag_helper[\\xec\\x95\\x88\\xeb\\x85\\x95\\xed\\x95\\x98\\xec\\x84\\xb8\\xec\\x9a\\x94]",
                "time": 0.005,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands_test",
                "name": "test_objects_not_supported_without_flag_handler",
                "time": 0.003,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.commands_test",
                "name": "test_flag_handler_invoked_only_when_expected",
                "time": 0.008,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.conn_args_test",
                "name": "test_params_forwarded_from_client",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "AsyncMock requires python3.8",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.conn_args_test",
                "name": "test_ssl_client_fails_against_plaintext_server",
                "time": 0.004,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.pool_test",
                "name": "test_pool_creation",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.pool_test",
                "name": "test_pool_acquire_release",
                "time": 0.002,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.pool_test",
                "name": "test_pool_acquire_release2",
                "time": 0.003,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.pool_test",
                "name": "test_pool_clear",
                "time": 0.004,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.pool_test",
                "name": "test_acquire_dont_create_new_connection_if_have_conn_in_pool",
                "time": 0.002,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.pool_test",
                "name": "test_acquire_limit_maxsize",
                "time": 0.003,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.pool_test",
                "name": "test_acquire_task_cancellation",
                "time": 0.716,
                "results": [
                    {
                        "result": "Failure",
                        "message": "assert 'foo' in [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\"), ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\"), ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\"), ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\"), ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\"), ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\"), ...]",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.pool_test",
                "name": "test_maxsize_greater_than_minsize",
                "time": 0.014,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.pool_test",
                "name": "test_0_minsize",
                "time": 0.007,
                "results": [
                    {
                        "result": "Failure",
                        "message": "ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests.pool_test",
                "name": "test_bad_connection",
                "time": 0.012,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            }
        ],
        "stdout": "[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ] \ud83d\ude80  Start image=crawlergpt:latest\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter] \ud83d\ude80  Start image=crawlergpt:latest\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/aio-libs-aiomcache] user=0 workdir=\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/aio-libs-aiomcache] user=0 workdir=\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v2\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v2\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   \u2601  git clone 'https://github.com/jkeys089/actions-memcached' # ref=master\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \u2601  git clone 'https://github.com/actions/cache' # ref=v2\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   \u2601  git clone 'https://github.com/codecov/codecov-action' # ref=v2\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \u2601  git clone 'https://github.com/py-actions/py-dependency-install' # ref=v2\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ] \ud83e\uddea  Matrix: map[python-version:3.7]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ] \u2b50 Run Main Checkout\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   \u2705  Success - Main Checkout\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ] \u2b50 Run Main Set up Python 3.7\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   \ud83d\udc33  docker cp src=/tmp/act-cache/8111104d-8449-4159-a6b0-18044a8b5466/act/actions-setup-python@v2/ dst=/var/run/act/actions/actions-setup-python@v2/\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v2/] user=0 workdir=\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter] \u2b50 Run Main Checkout\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \u2705  Success - Main Checkout\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter] \u2b50 Run Main Setup Python\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udc33  docker cp src=/tmp/act-cache/8111104d-8449-4159-a6b0-18044a8b5466/act/actions-setup-python@v2/ dst=/var/run/act/actions/actions-setup-python@v2/\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v2/] user=0 workdir=\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v2/dist/setup/index.js] user= workdir=\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v2/dist/setup/index.js] user= workdir=\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   \ud83d\udcac  ::debug::Semantic version spec of 3.7 is 3.7\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   \ud83d\udcac  ::debug::isExplicit: \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   \ud83d\udcac  ::debug::explicit? false\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   \ud83d\udcac  ::debug::explicit? true\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   \ud83d\udcac  ::debug::explicit? true\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   \ud83d\udcac  ::debug::explicit? true\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   \ud83d\udcac  ::debug::explicit? true\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   \ud83d\udcac  ::debug::explicit? true\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   \ud83d\udcac  ::debug::explicit? true\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   \ud83d\udcac  ::debug::evaluating 6 versions\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   \ud83d\udcac  ::debug::matched: 3.7.11\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.7.11/x64\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   \ud83d\udcac  ::debug::Found tool in cache Python 3.7.11 x64\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Successfully setup CPython (3.7.11)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   \u2753 add-matcher /run/act/actions/actions-setup-python@v2/.github/python.json\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   \u2705  Success - Main Set up Python 3.7\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.7.11/x64\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.7.11/x64/lib\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udcac  ::debug::Semantic version spec of 3.9 is 3.9\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udcac  ::debug::isExplicit: \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udcac  ::debug::explicit? false\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udcac  ::debug::explicit? true\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udcac  ::debug::explicit? true\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udcac  ::debug::explicit? true\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udcac  ::debug::explicit? true\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udcac  ::debug::explicit? true\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udcac  ::debug::explicit? true\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udcac  ::debug::evaluating 6 versions\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udcac  ::debug::matched: 3.9.6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.9.6/x64\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udcac  ::debug::Found tool in cache Python 3.9.6 x64\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Successfully setup CPython (3.9.6)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \u2753 add-matcher /run/act/actions/actions-setup-python@v2/.github/python.json\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \u2705  Success - Main Setup Python\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   \u2699  ::set-output:: python-version=3.7.11\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.9.6/x64\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.9.6/x64/lib\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.7.11/x64\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.7.11/x64/bin\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ] \u2b50 Run Main Install system dependencies\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \u2699  ::set-output:: python-version=3.9.6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.9.6/x64\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.9.6/x64/bin\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter] \u2b50 Run Main Cache PyPI\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udc33  docker cp src=/tmp/act-cache/8111104d-8449-4159-a6b0-18044a8b5466/act/actions-cache@v2/ dst=/var/run/act/actions/actions-cache@v2/\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-cache@v2/] user=0 workdir=\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-cache@v2/dist/restore/index.js] user= workdir=\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Reading package lists...\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Building dependency tree...\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Reading state information...\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | The following additional packages will be installed:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |   libhashkit-dev libhashkit2 libmemcachedutil2 libsasl2-dev\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | The following NEW packages will be installed:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |   libhashkit-dev libhashkit2 libmemcached-dev libmemcachedutil2 libsasl2-dev\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | 0 upgraded, 5 newly installed, 0 to remove and 20 not upgraded.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Need to get 533 kB of archives.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | After this operation, 2139 kB of additional disk space will be used.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Get:1 http://archive.ubuntu.com/ubuntu focal/main amd64 libhashkit2 amd64 1.0.18-4.2ubuntu2 [35.2 kB]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Get:2 http://archive.ubuntu.com/ubuntu focal/main amd64 libhashkit-dev amd64 1.0.18-4.2ubuntu2 [24.0 kB]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Get:3 http://archive.ubuntu.com/ubuntu focal/main amd64 libmemcachedutil2 amd64 1.0.18-4.2ubuntu2 [9644 B]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Get:4 http://archive.ubuntu.com/ubuntu focal/main amd64 libsasl2-dev amd64 2.1.27+dfsg-2 [225 kB]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udcac  ::debug::Resolved Keys:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udcac  ::debug::[\"pip-lint-1642e4b2e7c60587434f96b62b6ce7ce1d5dba2e4f3a41648afae91a79bd53b7\",\"pip-lint-\"]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udcac  ::debug::Checking zstd --version\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udcac  ::debug::*** zstd command line interface 64-bits v1.5.0, by Yann Collet ***\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:43167/_apis/artifactcache/cache?keys=pip-lint-1642e4b2e7c60587434f96b62b6ce7ce1d5dba2e4f3a41648afae91a79bd53b7%252Cpip-lint-&version=2a50607a47f0c27aad98b33e03fa13615fdc9c33dc4fff3945d2d5078a8f7664\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Cache not found for input keys: pip-lint-1642e4b2e7c60587434f96b62b6ce7ce1d5dba2e4f3a41648afae91a79bd53b7, pip-lint-\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \u2705  Success - Main Cache PyPI\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Get:5 http://archive.ubuntu.com/ubuntu focal/main amd64 libmemcached-dev amd64 1.0.18-4.2ubuntu2 [239 kB]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter] \u2b50 Run Main Install system dependencies\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Fetched 533 kB in 1s (477 kB/s)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Selecting previously unselected package libhashkit2:amd64.\r\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | (Reading database ... \r(Reading database ... 5%\r(Reading database ... 10%\r(Reading database ... 15%\r(Reading database ... 20%\r(Reading database ... 25%\r(Reading database ... 30%\r(Reading database ... 35%\r(Reading database ... 40%\r(Reading database ... 45%\r(Reading database ... 50%\r(Reading database ... 55%\r(Reading database ... 60%\r(Reading database ... 65%\r(Reading database ... 70%\r(Reading database ... 75%\r(Reading database ... 80%\r(Reading database ... 85%\r(Reading database ... 90%\r(Reading database ... 95%\r(Reading database ... 100%\r(Reading database ... 193678 files and directories currently installed.)\r\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Preparing to unpack .../libhashkit2_1.0.18-4.2ubuntu2_amd64.deb ...\r\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Unpacking libhashkit2:amd64 (1.0.18-4.2ubuntu2) ...\r\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Selecting previously unselected package libhashkit-dev:amd64.\r\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Preparing to unpack .../libhashkit-dev_1.0.18-4.2ubuntu2_amd64.deb ...\r\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Unpacking libhashkit-dev:amd64 (1.0.18-4.2ubuntu2) ...\r\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Selecting previously unselected package libmemcachedutil2:amd64.\r\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Preparing to unpack .../libmemcachedutil2_1.0.18-4.2ubuntu2_amd64.deb ...\r\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Unpacking libmemcachedutil2:amd64 (1.0.18-4.2ubuntu2) ...\r\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Selecting previously unselected package libsasl2-dev.\r\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Preparing to unpack .../libsasl2-dev_2.1.27+dfsg-2_amd64.deb ...\r\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Unpacking libsasl2-dev (2.1.27+dfsg-2) ...\r\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Selecting previously unselected package libmemcached-dev:amd64.\r\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Preparing to unpack .../libmemcached-dev_1.0.18-4.2ubuntu2_amd64.deb ...\r\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Unpacking libmemcached-dev:amd64 (1.0.18-4.2ubuntu2) ...\r\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Setting up libmemcachedutil2:amd64 (1.0.18-4.2ubuntu2) ...\r\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Setting up libhashkit2:amd64 (1.0.18-4.2ubuntu2) ...\r\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Setting up libsasl2-dev (2.1.27+dfsg-2) ...\r\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Setting up libhashkit-dev:amd64 (1.0.18-4.2ubuntu2) ...\r\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Setting up libmemcached-dev:amd64 (1.0.18-4.2ubuntu2) ...\r\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Processing triggers for libc-bin (2.31-0ubuntu9.2) ...\r\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   \u2705  Success - Main Install system dependencies\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ] \u2b50 Run Main Install python dependencies\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Requirement already satisfied: pip in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (21.2.4)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Collecting pip\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |   Downloading pip-23.1.2-py3-none-any.whl (2.1 MB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Installing collected packages: pip\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |   Attempting uninstall: pip\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     Found existing installation: pip 21.2.4\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Reading package lists...\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     Uninstalling pip-21.2.4:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Building dependency tree...\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Reading state information...\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | The following additional packages will be installed:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   libhashkit-dev libhashkit2 libmemcachedutil2 libsasl2-dev\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | The following NEW packages will be installed:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   libhashkit-dev libhashkit2 libmemcached-dev libmemcachedutil2 libsasl2-dev\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | 0 upgraded, 5 newly installed, 0 to remove and 20 not upgraded.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Need to get 533 kB of archives.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | After this operation, 2139 kB of additional disk space will be used.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Get:1 http://archive.ubuntu.com/ubuntu focal/main amd64 libhashkit2 amd64 1.0.18-4.2ubuntu2 [35.2 kB]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Get:2 http://archive.ubuntu.com/ubuntu focal/main amd64 libhashkit-dev amd64 1.0.18-4.2ubuntu2 [24.0 kB]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Get:3 http://archive.ubuntu.com/ubuntu focal/main amd64 libmemcachedutil2 amd64 1.0.18-4.2ubuntu2 [9644 B]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Get:4 http://archive.ubuntu.com/ubuntu focal/main amd64 libsasl2-dev amd64 2.1.27+dfsg-2 [225 kB]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Get:5 http://archive.ubuntu.com/ubuntu focal/main amd64 libmemcached-dev amd64 1.0.18-4.2ubuntu2 [239 kB]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Fetched 533 kB in 0s (1757 kB/s)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Selecting previously unselected package libhashkit2:amd64.\r\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | (Reading database ... \r(Reading database ... 5%\r(Reading database ... 10%\r(Reading database ... 15%\r(Reading database ... 20%\r(Reading database ... 25%\r(Reading database ... 30%\r(Reading database ... 35%\r(Reading database ... 40%\r(Reading database ... 45%\r(Reading database ... 50%\r(Reading database ... 55%\r(Reading database ... 60%\r(Reading database ... 65%\r(Reading database ... 70%\r(Reading database ... 75%\r(Reading database ... 80%\r(Reading database ... 85%\r(Reading database ... 90%\r(Reading database ... 95%\r(Reading database ... 100%\r(Reading database ... 193678 files and directories currently installed.)\r\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Preparing to unpack .../libhashkit2_1.0.18-4.2ubuntu2_amd64.deb ...\r\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Unpacking libhashkit2:amd64 (1.0.18-4.2ubuntu2) ...\r\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Selecting previously unselected package libhashkit-dev:amd64.\r\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Preparing to unpack .../libhashkit-dev_1.0.18-4.2ubuntu2_amd64.deb ...\r\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Unpacking libhashkit-dev:amd64 (1.0.18-4.2ubuntu2) ...\r\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |       Successfully uninstalled pip-21.2.4\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Selecting previously unselected package libmemcachedutil2:amd64.\r\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Preparing to unpack .../libmemcachedutil2_1.0.18-4.2ubuntu2_amd64.deb ...\r\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Unpacking libmemcachedutil2:amd64 (1.0.18-4.2ubuntu2) ...\r\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Selecting previously unselected package libsasl2-dev.\r\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Preparing to unpack .../libsasl2-dev_2.1.27+dfsg-2_amd64.deb ...\r\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Unpacking libsasl2-dev (2.1.27+dfsg-2) ...\r\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Selecting previously unselected package libmemcached-dev:amd64.\r\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Preparing to unpack .../libmemcached-dev_1.0.18-4.2ubuntu2_amd64.deb ...\r\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Unpacking libmemcached-dev:amd64 (1.0.18-4.2ubuntu2) ...\r\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Setting up libmemcachedutil2:amd64 (1.0.18-4.2ubuntu2) ...\r\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Setting up libhashkit2:amd64 (1.0.18-4.2ubuntu2) ...\r\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Setting up libsasl2-dev (2.1.27+dfsg-2) ...\r\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Setting up libhashkit-dev:amd64 (1.0.18-4.2ubuntu2) ...\r\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Setting up libmemcached-dev:amd64 (1.0.18-4.2ubuntu2) ...\r\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Processing triggers for libc-bin (2.31-0ubuntu9.2) ...\r\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \u2705  Success - Main Install system dependencies\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter] \u2b50 Run Main Install python dependencies\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udc33  docker cp src=/tmp/act-cache/8111104d-8449-4159-a6b0-18044a8b5466/act/py-actions-py-dependency-install@v2/ dst=/var/run/act/actions/py-actions-py-dependency-install@v2/\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/py-actions-py-dependency-install@v2/] user=0 workdir=\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Successfully installed pip-23.1.2\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Requirement already satisfied: setuptools in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (47.1.0)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Collecting setuptools\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |   Downloading setuptools-68.0.0-py3-none-any.whl (804 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 804.0/804.0 kB 5.0 MB/s eta 0:00:00\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Installing collected packages: setuptools\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |   Attempting uninstall: setuptools\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     Found existing installation: setuptools 47.1.0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     Uninstalling setuptools-47.1.0:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |       Successfully uninstalled setuptools-47.1.0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Successfully installed setuptools-68.0.0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | [notice] A new release of pip is available: 20.1.1 -> 23.1.2\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | [notice] To update, run: pip install --upgrade pip\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Collecting docker-py==1.10.6 (from -r requirements.txt (line 1))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |   Downloading docker_py-1.10.6-py2.py3-none-any.whl (50 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 50.0/50.0 kB 6.0 MB/s eta 0:00:00\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Collecting pytest==7.4.0 (from -r requirements.txt (line 2))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |   Downloading pytest-7.4.0-py3-none-any.whl (323 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 323.6/323.6 kB 7.2 MB/s eta 0:00:00\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Collecting pytest-asyncio==0.21.0 (from -r requirements.txt (line 3))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |   Downloading pytest_asyncio-0.21.0-py3-none-any.whl (13 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Collecting pytest-cov==4.1.0 (from -r requirements.txt (line 4))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |   Downloading pytest_cov-4.1.0-py3-none-any.whl (21 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Collecting python-memcached==1.59 (from -r requirements.txt (line 5))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |   Downloading python_memcached-1.59-py2.py3-none-any.whl (16 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Collecting typing_extensions==4.4.0 (from -r requirements.txt (line 6))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |   Downloading typing_extensions-4.4.0-py3-none-any.whl (26 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Collecting docker-pycreds>=0.2.1 (from docker-py==1.10.6->-r requirements.txt (line 1))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |   Downloading docker_pycreds-0.4.0-py2.py3-none-any.whl (9.0 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Collecting requests!=2.11.0,>=2.5.2 (from docker-py==1.10.6->-r requirements.txt (line 1))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |   Downloading requests-2.31.0-py3-none-any.whl (62 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 62.6/62.6 kB 113.6 kB/s eta 0:00:00\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Collecting six>=1.4.0 (from docker-py==1.10.6->-r requirements.txt (line 1))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |   Downloading six-1.16.0-py2.py3-none-any.whl (11 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Collecting websocket-client>=0.32.0 (from docker-py==1.10.6->-r requirements.txt (line 1))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |   Downloading websocket_client-1.6.1-py3-none-any.whl (56 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 56.9/56.9 kB 856.9 kB/s eta 0:00:00\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Collecting iniconfig (from pytest==7.4.0->-r requirements.txt (line 2))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |   Downloading iniconfig-2.0.0-py3-none-any.whl (5.9 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Collecting packaging (from pytest==7.4.0->-r requirements.txt (line 2))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |   Downloading packaging-23.1-py3-none-any.whl (48 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 48.9/48.9 kB 752.0 kB/s eta 0:00:00\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Collecting pluggy<2.0,>=0.12 (from pytest==7.4.0->-r requirements.txt (line 2))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |   Downloading pluggy-1.2.0-py3-none-any.whl (17 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Collecting exceptiongroup>=1.0.0rc8 (from pytest==7.4.0->-r requirements.txt (line 2))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |   Downloading exceptiongroup-1.1.1-py3-none-any.whl (14 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Collecting tomli>=1.0.0 (from pytest==7.4.0->-r requirements.txt (line 2))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |   Downloading tomli-2.0.1-py3-none-any.whl (12 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Collecting importlib-metadata>=0.12 (from pytest==7.4.0->-r requirements.txt (line 2))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |   Downloading importlib_metadata-6.7.0-py3-none-any.whl (22 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Collecting coverage[toml]>=5.2.1 (from pytest-cov==4.1.0->-r requirements.txt (line 4))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |   Downloading coverage-7.2.7-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (225 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 225.6/225.6 kB 4.1 MB/s eta 0:00:00\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Collecting zipp>=0.5 (from importlib-metadata>=0.12->pytest==7.4.0->-r requirements.txt (line 2))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |   Downloading zipp-3.15.0-py3-none-any.whl (6.8 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Collecting charset-normalizer<4,>=2 (from requests!=2.11.0,>=2.5.2->docker-py==1.10.6->-r requirements.txt (line 1))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |   Downloading charset_normalizer-3.1.0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (171 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 171.0/171.0 kB 973.8 kB/s eta 0:00:00\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Collecting idna<4,>=2.5 (from requests!=2.11.0,>=2.5.2->docker-py==1.10.6->-r requirements.txt (line 1))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |   Downloading idna-3.4-py3-none-any.whl (61 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 61.5/61.5 kB 510.8 kB/s eta 0:00:00\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Collecting urllib3<3,>=1.21.1 (from requests!=2.11.0,>=2.5.2->docker-py==1.10.6->-r requirements.txt (line 1))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |   Downloading urllib3-2.0.3-py3-none-any.whl (123 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 123.6/123.6 kB 3.3 MB/s eta 0:00:00\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Collecting certifi>=2017.4.17 (from requests!=2.11.0,>=2.5.2->docker-py==1.10.6->-r requirements.txt (line 1))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |   Downloading certifi-2023.5.7-py3-none-any.whl (156 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 157.0/157.0 kB 1.8 MB/s eta 0:00:00\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Installing collected packages: zipp, websocket-client, urllib3, typing_extensions, tomli, six, packaging, iniconfig, idna, exceptiongroup, coverage, charset-normalizer, certifi, requests, python-memcached, importlib-metadata, docker-pycreds, pluggy, docker-py, pytest, pytest-cov, pytest-asyncio\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Successfully installed certifi-2023.5.7 charset-normalizer-3.1.0 coverage-7.2.7 docker-py-1.10.6 docker-pycreds-0.4.0 exceptiongroup-1.1.1 idna-3.4 importlib-metadata-6.7.0 iniconfig-2.0.0 packaging-23.1 pluggy-1.2.0 pytest-7.4.0 pytest-asyncio-0.21.0 pytest-cov-4.1.0 python-memcached-1.59 requests-2.31.0 six-1.16.0 tomli-2.0.1 typing_extensions-4.4.0 urllib3-2.0.3 websocket-client-1.6.1 zipp-3.15.0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | [notice] A new release of pip is available: 20.1.1 -> 23.1.2\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | [notice] To update, run: pip install --upgrade pip\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Collecting codecov\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |   Downloading codecov-2.1.13-py2.py3-none-any.whl (16 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Requirement already satisfied: requests>=2.7.9 in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (from codecov) (2.31.0)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Requirement already satisfied: coverage in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (from codecov) (7.2.7)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Requirement already satisfied: charset-normalizer<4,>=2 in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (from requests>=2.7.9->codecov) (3.1.0)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Requirement already satisfied: idna<4,>=2.5 in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (from requests>=2.7.9->codecov) (3.4)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (from requests>=2.7.9->codecov) (2.0.3)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Requirement already satisfied: certifi>=2017.4.17 in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (from requests>=2.7.9->codecov) (2023.5.7)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Installing collected packages: codecov\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | Successfully installed codecov-2.1.13\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | [notice] A new release of pip is available: 20.1.1 -> 23.1.2\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | [notice] To update, run: pip install --upgrade pip\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   \u2705  Success - Main Install python dependencies\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ] \u2b50 Run Main Run memcached service\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   \ud83d\udc33  docker build -t act-jkeys089-actions-memcached-master-dockeraction:latest /tmp/act-cache/8111104d-8449-4159-a6b0-18044a8b5466/act/jkeys089-actions-memcached@master/\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/py-actions-py-dependency-install@v2/dist/index.js] user= workdir=\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | [*] Updating wheel package...\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | [command]/opt/hostedtoolcache/Python/3.9.6/x64/bin/python -m pip install --upgrade wheel\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting wheel\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading wheel-0.40.0-py3-none-any.whl (64 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Installing collected packages: wheel\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Successfully installed wheel-0.40.0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | WARNING: You are using pip version 21.2.4; however, version 23.1.2 is available.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | You should consider upgrading via the '/opt/hostedtoolcache/Python/3.9.6/x64/bin/python -m pip install --upgrade pip' command.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | [*] Updating setuptools package...\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | [command]/opt/hostedtoolcache/Python/3.9.6/x64/bin/python -m pip install --upgrade setuptools\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Requirement already satisfied: setuptools in /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages (56.0.0)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting setuptools\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading setuptools-68.0.0-py3-none-any.whl (804 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Installing collected packages: setuptools\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Attempting uninstall: setuptools\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |     Found existing installation: setuptools 56.0.0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |     Uninstalling setuptools-56.0.0:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |       Successfully uninstalled setuptools-56.0.0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Successfully installed setuptools-68.0.0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | WARNING: You are using pip version 21.2.4; however, version 23.1.2 is available.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | You should consider upgrading via the '/opt/hostedtoolcache/Python/3.9.6/x64/bin/python -m pip install --upgrade pip' command.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | [*] Updating pip package...\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | [command]/opt/hostedtoolcache/Python/3.9.6/x64/bin/python -m pip install --upgrade pip\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Requirement already satisfied: pip in /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages (21.2.4)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting pip\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading pip-23.1.2-py3-none-any.whl (2.1 MB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Installing collected packages: pip\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Attempting uninstall: pip\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |     Found existing installation: pip 21.2.4\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |     Uninstalling pip-21.2.4:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |       Successfully uninstalled pip-21.2.4\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Successfully installed pip-23.1.2\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | [*] Installing Python dependencies...\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | [command]/opt/hostedtoolcache/Python/3.9.6/x64/bin/python -m pip install -r requirements-dev.txt\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting docker-py==1.10.6 (from -r requirements.txt (line 1))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading docker_py-1.10.6-py2.py3-none-any.whl (50 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 50.0/50.0 kB 4.6 MB/s eta 0:00:00\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting pytest==7.4.0 (from -r requirements.txt (line 2))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading pytest-7.4.0-py3-none-any.whl (323 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 323.6/323.6 kB 13.3 MB/s eta 0:00:00\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting pytest-asyncio==0.21.0 (from -r requirements.txt (line 3))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading pytest_asyncio-0.21.0-py3-none-any.whl (13 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting pytest-cov==4.1.0 (from -r requirements.txt (line 4))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading pytest_cov-4.1.0-py3-none-any.whl (21 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting python-memcached==1.59 (from -r requirements.txt (line 5))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading python_memcached-1.59-py2.py3-none-any.whl (16 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting typing_extensions==4.4.0 (from -r requirements.txt (line 6))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading typing_extensions-4.4.0-py3-none-any.whl (26 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting mypy==1.4.1 (from -r requirements-dev.txt (line 3))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading mypy-1.4.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (12.0 MB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 12.0/12.0 MB 38.3 MB/s eta 0:00:00\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting flake8==6.0.0 (from -r requirements-dev.txt (line 4))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading flake8-6.0.0-py2.py3-none-any.whl (57 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 57.8/57.8 kB 5.5 MB/s eta 0:00:00\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting flake8-bandit==4.1.1 (from -r requirements-dev.txt (line 5))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading flake8_bandit-4.1.1-py3-none-any.whl (4.8 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting flake8-bugbear==23.6.5 (from -r requirements-dev.txt (line 6))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading flake8_bugbear-23.6.5-py3-none-any.whl (29 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting flake8-import-order==0.18.2 (from -r requirements-dev.txt (line 7))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading flake8_import_order-0.18.2-py2.py3-none-any.whl (15 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting flake8-requirements==1.7.8 (from -r requirements-dev.txt (line 8))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading flake8_requirements-1.7.8-py2.py3-none-any.whl (16 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting docker-pycreds>=0.2.1 (from docker-py==1.10.6->-r requirements.txt (line 1))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading docker_pycreds-0.4.0-py2.py3-none-any.whl (9.0 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting requests!=2.11.0,>=2.5.2 (from docker-py==1.10.6->-r requirements.txt (line 1))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading requests-2.31.0-py3-none-any.whl (62 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 62.6/62.6 kB 2.6 MB/s eta 0:00:00\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting six>=1.4.0 (from docker-py==1.10.6->-r requirements.txt (line 1))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading six-1.16.0-py2.py3-none-any.whl (11 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting websocket-client>=0.32.0 (from docker-py==1.10.6->-r requirements.txt (line 1))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading websocket_client-1.6.1-py3-none-any.whl (56 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 56.9/56.9 kB 744.9 kB/s eta 0:00:00\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting iniconfig (from pytest==7.4.0->-r requirements.txt (line 2))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading iniconfig-2.0.0-py3-none-any.whl (5.9 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting packaging (from pytest==7.4.0->-r requirements.txt (line 2))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading packaging-23.1-py3-none-any.whl (48 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 48.9/48.9 kB 2.8 MB/s eta 0:00:00\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting pluggy<2.0,>=0.12 (from pytest==7.4.0->-r requirements.txt (line 2))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading pluggy-1.2.0-py3-none-any.whl (17 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting exceptiongroup>=1.0.0rc8 (from pytest==7.4.0->-r requirements.txt (line 2))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading exceptiongroup-1.1.1-py3-none-any.whl (14 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting tomli>=1.0.0 (from pytest==7.4.0->-r requirements.txt (line 2))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading tomli-2.0.1-py3-none-any.whl (12 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting coverage[toml]>=5.2.1 (from pytest-cov==4.1.0->-r requirements.txt (line 4))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading coverage-7.2.7-cp39-cp39-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (228 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 228.3/228.3 kB 15.9 MB/s eta 0:00:00\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting mypy-extensions>=1.0.0 (from mypy==1.4.1->-r requirements-dev.txt (line 3))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading mypy_extensions-1.0.0-py3-none-any.whl (4.7 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting mccabe<0.8.0,>=0.7.0 (from flake8==6.0.0->-r requirements-dev.txt (line 4))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading mccabe-0.7.0-py2.py3-none-any.whl (7.3 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting pycodestyle<2.11.0,>=2.10.0 (from flake8==6.0.0->-r requirements-dev.txt (line 4))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading pycodestyle-2.10.0-py2.py3-none-any.whl (41 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 41.3/41.3 kB 2.1 MB/s eta 0:00:00\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting pyflakes<3.1.0,>=3.0.0 (from flake8==6.0.0->-r requirements-dev.txt (line 4))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading pyflakes-3.0.1-py2.py3-none-any.whl (62 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 62.8/62.8 kB 3.5 MB/s eta 0:00:00\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting bandit>=1.7.3 (from flake8-bandit==4.1.1->-r requirements-dev.txt (line 5))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading bandit-1.7.5-py3-none-any.whl (123 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 123.3/123.3 kB 4.4 MB/s eta 0:00:00\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting attrs>=19.2.0 (from flake8-bugbear==23.6.5->-r requirements-dev.txt (line 6))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading attrs-23.1.0-py3-none-any.whl (61 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 61.2/61.2 kB 2.1 MB/s eta 0:00:00\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Requirement already satisfied: setuptools in /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages (from flake8-import-order==0.18.2->-r requirements-dev.txt (line 7)) (68.0.0)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting GitPython>=1.0.1 (from bandit>=1.7.3->flake8-bandit==4.1.1->-r requirements-dev.txt (line 5))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading GitPython-3.1.31-py3-none-any.whl (184 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 184.3/184.3 kB 20.4 MB/s eta 0:00:00\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting PyYAML>=5.3.1 (from bandit>=1.7.3->flake8-bandit==4.1.1->-r requirements-dev.txt (line 5))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading PyYAML-6.0-cp39-cp39-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (661 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 661.8/661.8 kB 8.4 MB/s eta 0:00:00\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting stevedore>=1.20.0 (from bandit>=1.7.3->flake8-bandit==4.1.1->-r requirements-dev.txt (line 5))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading stevedore-5.1.0-py3-none-any.whl (49 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 49.6/49.6 kB 3.8 MB/s eta 0:00:00\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting rich (from bandit>=1.7.3->flake8-bandit==4.1.1->-r requirements-dev.txt (line 5))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading rich-13.4.2-py3-none-any.whl (239 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 239.4/239.4 kB 3.2 MB/s eta 0:00:00\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting charset-normalizer<4,>=2 (from requests!=2.11.0,>=2.5.2->docker-py==1.10.6->-r requirements.txt (line 1))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading charset_normalizer-3.1.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (199 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 199.2/199.2 kB 3.7 MB/s eta 0:00:00\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting idna<4,>=2.5 (from requests!=2.11.0,>=2.5.2->docker-py==1.10.6->-r requirements.txt (line 1))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading idna-3.4-py3-none-any.whl (61 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 61.5/61.5 kB 8.0 MB/s eta 0:00:00\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting urllib3<3,>=1.21.1 (from requests!=2.11.0,>=2.5.2->docker-py==1.10.6->-r requirements.txt (line 1))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading urllib3-2.0.3-py3-none-any.whl (123 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 123.6/123.6 kB 7.5 MB/s eta 0:00:00\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting certifi>=2017.4.17 (from requests!=2.11.0,>=2.5.2->docker-py==1.10.6->-r requirements.txt (line 1))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading certifi-2023.5.7-py3-none-any.whl (156 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 157.0/157.0 kB 1.9 MB/s eta 0:00:00\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting gitdb<5,>=4.0.1 (from GitPython>=1.0.1->bandit>=1.7.3->flake8-bandit==4.1.1->-r requirements-dev.txt (line 5))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading gitdb-4.0.10-py3-none-any.whl (62 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 62.7/62.7 kB 2.0 MB/s eta 0:00:00\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting pbr!=2.1.0,>=2.0.0 (from stevedore>=1.20.0->bandit>=1.7.3->flake8-bandit==4.1.1->-r requirements-dev.txt (line 5))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading pbr-5.11.1-py2.py3-none-any.whl (112 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 112.7/112.7 kB 13.4 MB/s eta 0:00:00\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting markdown-it-py>=2.2.0 (from rich->bandit>=1.7.3->flake8-bandit==4.1.1->-r requirements-dev.txt (line 5))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading markdown_it_py-3.0.0-py3-none-any.whl (87 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 87.5/87.5 kB 7.4 MB/s eta 0:00:00\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting pygments<3.0.0,>=2.13.0 (from rich->bandit>=1.7.3->flake8-bandit==4.1.1->-r requirements-dev.txt (line 5))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading Pygments-2.15.1-py3-none-any.whl (1.1 MB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 1.1/1.1 MB 31.3 MB/s eta 0:00:00\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting smmap<6,>=3.0.1 (from gitdb<5,>=4.0.1->GitPython>=1.0.1->bandit>=1.7.3->flake8-bandit==4.1.1->-r requirements-dev.txt (line 5))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading smmap-5.0.0-py3-none-any.whl (24 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting mdurl~=0.1 (from markdown-it-py>=2.2.0->rich->bandit>=1.7.3->flake8-bandit==4.1.1->-r requirements-dev.txt (line 5))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading mdurl-0.1.2-py3-none-any.whl (10.0 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Installing collected packages: websocket-client, urllib3, typing_extensions, tomli, smmap, six, PyYAML, pygments, pyflakes, pycodestyle, pluggy, pbr, packaging, mypy-extensions, mdurl, mccabe, iniconfig, idna, exceptiongroup, coverage, charset-normalizer, certifi, attrs, stevedore, requests, python-memcached, pytest, mypy, markdown-it-py, gitdb, flake8-import-order, flake8, docker-pycreds, rich, pytest-cov, pytest-asyncio, GitPython, flake8-requirements, flake8-bugbear, docker-py, bandit, flake8-bandit\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Successfully installed GitPython-3.1.31 PyYAML-6.0 attrs-23.1.0 bandit-1.7.5 certifi-2023.5.7 charset-normalizer-3.1.0 coverage-7.2.7 docker-py-1.10.6 docker-pycreds-0.4.0 exceptiongroup-1.1.1 flake8-6.0.0 flake8-bandit-4.1.1 flake8-bugbear-23.6.5 flake8-import-order-0.18.2 flake8-requirements-1.7.8 gitdb-4.0.10 idna-3.4 iniconfig-2.0.0 markdown-it-py-3.0.0 mccabe-0.7.0 mdurl-0.1.2 mypy-1.4.1 mypy-extensions-1.0.0 packaging-23.1 pbr-5.11.1 pluggy-1.2.0 pycodestyle-2.10.0 pyflakes-3.0.1 pygments-2.15.1 pytest-7.4.0 pytest-asyncio-0.21.0 pytest-cov-4.1.0 python-memcached-1.59 requests-2.31.0 rich-13.4.2 six-1.16.0 smmap-5.0.0 stevedore-5.1.0 tomli-2.0.1 typing_extensions-4.4.0 urllib3-2.0.3 websocket-client-1.6.1\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | [notice] A new release of pip is available: 21.1.3 -> 23.1.2\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | [notice] To update, run: pip install --upgrade pip\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | [*] The environment contains the following Python packages:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | [command]/opt/hostedtoolcache/Python/3.9.6/x64/bin/python -m pip list\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Package             Version\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | ------------------- --------\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | attrs               23.1.0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | bandit              1.7.5\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | certifi             2023.5.7\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | charset-normalizer  3.1.0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | coverage            7.2.7\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | docker-py           1.10.6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | docker-pycreds      0.4.0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | exceptiongroup      1.1.1\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | flake8              6.0.0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | flake8-bandit       4.1.1\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | flake8-bugbear      23.6.5\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | flake8-import-order 0.18.2\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | flake8-requirements 1.7.8\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | gitdb               4.0.10\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | GitPython           3.1.31\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | idna                3.4\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | iniconfig           2.0.0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | markdown-it-py      3.0.0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | mccabe              0.7.0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | mdurl               0.1.2\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | mypy                1.4.1\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | mypy-extensions     1.0.0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | packaging           23.1\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | pbr                 5.11.1\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | pip                 21.1.3\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | pluggy              1.2.0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | pycodestyle         2.10.0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | pyflakes            3.0.1\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Pygments            2.15.1\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | pytest              7.4.0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | pytest-asyncio      0.21.0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | pytest-cov          4.1.0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | python-memcached    1.59\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | PyYAML              6.0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | requests            2.31.0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | rich                13.4.2\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | setuptools          68.0.0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | six                 1.16.0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | smmap               5.0.0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | stevedore           5.1.0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | tomli               2.0.1\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | typing_extensions   4.4.0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | urllib3             2.0.3\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | websocket-client    1.6.1\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | wheel               0.40.0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | [notice] A new release of pip is available: 21.1.3 -> 23.1.2\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | [notice] To update, run: pip install --upgrade pip\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \u2705  Success - Main Install python dependencies\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter] \u2b50 Run Main Mypy\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/5] user= workdir=\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Success: no issues found in 13 source files\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \u2705  Success - Main Mypy\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter] \u2b50 Run Main Flake8\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   \ud83d\udc33  docker pull image=act-jkeys089-actions-memcached-master-dockeraction:latest platform= username= forcePull=false\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   \ud83d\udc33  docker create image=act-jkeys089-actions-memcached-master-dockeraction:latest platform= entrypoint=[] cmd=[]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/6] user= workdir=\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   \ud83d\udc33  docker run image=act-jkeys089-actions-memcached-master-dockeraction:latest platform= entrypoint=[] cmd=[]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \u2705  Success - Main Flake8\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter] \u2b50 Run Main Prepare twine checker\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/7] user= workdir=\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting twine\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading twine-4.0.2-py3-none-any.whl (36 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Requirement already satisfied: wheel in /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages (0.40.0)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting pkginfo>=1.8.1 (from twine)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading pkginfo-1.9.6-py3-none-any.whl (30 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting readme-renderer>=35.0 (from twine)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading readme_renderer-40.0-py3-none-any.whl (14 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Requirement already satisfied: requests>=2.20 in /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages (from twine) (2.31.0)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting requests-toolbelt!=0.9.0,>=0.8.0 (from twine)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading requests_toolbelt-1.0.0-py2.py3-none-any.whl (54 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 54.5/54.5 kB 571.1 kB/s eta 0:00:00\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Requirement already satisfied: urllib3>=1.26.0 in /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages (from twine) (2.0.3)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting importlib-metadata>=3.6 (from twine)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading importlib_metadata-6.7.0-py3-none-any.whl (22 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting keyring>=15.1 (from twine)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading keyring-24.2.0-py3-none-any.whl (37 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   \u2705  Success - Main Run memcached service\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting rfc3986>=1.4.0 (from twine)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading rfc3986-2.0.0-py2.py3-none-any.whl (31 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Requirement already satisfied: rich>=12.0.0 in /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages (from twine) (13.4.2)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting zipp>=0.5 (from importlib-metadata>=3.6->twine)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading zipp-3.15.0-py3-none-any.whl (6.8 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting jaraco.classes (from keyring>=15.1->twine)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading jaraco.classes-3.2.3-py3-none-any.whl (6.0 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ] \u2b50 Run Main Run tests\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting SecretStorage>=3.2 (from keyring>=15.1->twine)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading SecretStorage-3.3.3-py3-none-any.whl (15 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting jeepney>=0.4.2 (from keyring>=15.1->twine)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading jeepney-0.8.0-py3-none-any.whl (48 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/5] user= workdir=\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 48.4/48.4 kB 912.5 kB/s eta 0:00:00\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting bleach>=2.1.0 (from readme-renderer>=35.0->twine)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading bleach-6.0.0-py3-none-any.whl (162 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 162.5/162.5 kB 4.0 MB/s eta 0:00:00\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting docutils>=0.13.1 (from readme-renderer>=35.0->twine)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading docutils-0.20.1-py3-none-any.whl (572 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 572.7/572.7 kB 6.4 MB/s eta 0:00:00\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Requirement already satisfied: Pygments>=2.5.1 in /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages (from readme-renderer>=35.0->twine) (2.15.1)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Requirement already satisfied: charset-normalizer<4,>=2 in /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages (from requests>=2.20->twine) (3.1.0)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Requirement already satisfied: idna<4,>=2.5 in /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages (from requests>=2.20->twine) (3.4)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Requirement already satisfied: certifi>=2017.4.17 in /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages (from requests>=2.20->twine) (2023.5.7)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Requirement already satisfied: markdown-it-py>=2.2.0 in /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages (from rich>=12.0.0->twine) (3.0.0)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Requirement already satisfied: six>=1.9.0 in /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages (from bleach>=2.1.0->readme-renderer>=35.0->twine) (1.16.0)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting webencodings (from bleach>=2.1.0->readme-renderer>=35.0->twine)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading webencodings-0.5.1-py2.py3-none-any.whl (11 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Requirement already satisfied: mdurl~=0.1 in /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages (from markdown-it-py>=2.2.0->rich>=12.0.0->twine) (0.1.2)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting cryptography>=2.0 (from SecretStorage>=3.2->keyring>=15.1->twine)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading cryptography-41.0.1-cp37-abi3-manylinux_2_28_x86_64.whl (4.3 MB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 4.3/4.3 MB 25.0 MB/s eta 0:00:00\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting more-itertools (from jaraco.classes->keyring>=15.1->twine)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading more_itertools-9.1.0-py3-none-any.whl (54 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 54.2/54.2 kB 1.1 MB/s eta 0:00:00\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting cffi>=1.12 (from cryptography>=2.0->SecretStorage>=3.2->keyring>=15.1->twine)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading cffi-1.15.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (441 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 441.2/441.2 kB 7.7 MB/s eta 0:00:00\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Collecting pycparser (from cffi>=1.12->cryptography>=2.0->SecretStorage>=3.2->keyring>=15.1->twine)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   Downloading pycparser-2.21-py2.py3-none-any.whl (118 kB)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 118.7/118.7 kB 991.0 kB/s eta 0:00:00\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Installing collected packages: webencodings, zipp, rfc3986, pycparser, pkginfo, more-itertools, jeepney, docutils, bleach, requests-toolbelt, readme-renderer, jaraco.classes, importlib-metadata, cffi, cryptography, SecretStorage, keyring, twine\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Successfully installed SecretStorage-3.3.3 bleach-6.0.0 cffi-1.15.1 cryptography-41.0.1 docutils-0.20.1 importlib-metadata-6.7.0 jaraco.classes-3.2.3 jeepney-0.8.0 keyring-24.2.0 more-itertools-9.1.0 pkginfo-1.9.6 pycparser-2.21 readme-renderer-40.0 requests-toolbelt-1.0.0 rfc3986-2.0.0 twine-4.0.2 webencodings-0.5.1 zipp-3.15.0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | [notice] A new release of pip is available: 21.1.3 -> 23.1.2\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | [notice] To update, run: pip install --upgrade pip\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | running sdist\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | running egg_info\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | creating aiomcache.egg-info\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | writing aiomcache.egg-info/PKG-INFO\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | writing dependency_links to aiomcache.egg-info/dependency_links.txt\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | writing requirements to aiomcache.egg-info/requires.txt\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | writing top-level names to aiomcache.egg-info/top_level.txt\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | writing manifest file 'aiomcache.egg-info/SOURCES.txt'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | reading manifest file 'aiomcache.egg-info/SOURCES.txt'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | reading manifest template 'MANIFEST.in'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | warning: no previously-included files matching '*.pyc' found anywhere in distribution\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | warning: no previously-included files matching '*.swp' found anywhere in distribution\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | adding license file 'LICENSE'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | writing manifest file 'aiomcache.egg-info/SOURCES.txt'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | running check\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | creating aiomcache-0.8.1\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | creating aiomcache-0.8.1/aiomcache\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | creating aiomcache-0.8.1/aiomcache.egg-info\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | creating aiomcache-0.8.1/tests\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | copying files to aiomcache-0.8.1...\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | copying CHANGES.rst -> aiomcache-0.8.1\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | copying LICENSE -> aiomcache-0.8.1\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | copying MANIFEST.in -> aiomcache-0.8.1\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | copying README.rst -> aiomcache-0.8.1\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | copying setup.cfg -> aiomcache-0.8.1\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | copying setup.py -> aiomcache-0.8.1\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | copying aiomcache/__init__.py -> aiomcache-0.8.1/aiomcache\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | copying aiomcache/client.py -> aiomcache-0.8.1/aiomcache\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | copying aiomcache/constants.py -> aiomcache-0.8.1/aiomcache\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | copying aiomcache/exceptions.py -> aiomcache-0.8.1/aiomcache\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | copying aiomcache/pool.py -> aiomcache-0.8.1/aiomcache\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | copying aiomcache/py.typed -> aiomcache-0.8.1/aiomcache\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | copying aiomcache.egg-info/PKG-INFO -> aiomcache-0.8.1/aiomcache.egg-info\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | copying aiomcache.egg-info/SOURCES.txt -> aiomcache-0.8.1/aiomcache.egg-info\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | copying aiomcache.egg-info/dependency_links.txt -> aiomcache-0.8.1/aiomcache.egg-info\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | copying aiomcache.egg-info/requires.txt -> aiomcache-0.8.1/aiomcache.egg-info\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | copying aiomcache.egg-info/top_level.txt -> aiomcache-0.8.1/aiomcache.egg-info\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | copying tests/__init__.py -> aiomcache-0.8.1/tests\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | copying tests/commands_test.py -> aiomcache-0.8.1/tests\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | copying tests/conftest.py -> aiomcache-0.8.1/tests\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | copying tests/conn_args_test.py -> aiomcache-0.8.1/tests\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | copying tests/flag_helper.py -> aiomcache-0.8.1/tests\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | copying tests/pool_test.py -> aiomcache-0.8.1/tests\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Writing aiomcache-0.8.1/setup.cfg\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | creating dist\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Creating tar archive\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | removing 'aiomcache-0.8.1' (and everything under it)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | running bdist_wheel\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | running build\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | running build_py\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | creating build\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | creating build/lib\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | creating build/lib/aiomcache\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | copying aiomcache/constants.py -> build/lib/aiomcache\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | copying aiomcache/exceptions.py -> build/lib/aiomcache\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | copying aiomcache/pool.py -> build/lib/aiomcache\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | copying aiomcache/__init__.py -> build/lib/aiomcache\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | copying aiomcache/client.py -> build/lib/aiomcache\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | creating build/lib/tests\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | copying tests/conftest.py -> build/lib/tests\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | copying tests/conn_args_test.py -> build/lib/tests\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | copying tests/pool_test.py -> build/lib/tests\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | copying tests/flag_helper.py -> build/lib/tests\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | copying tests/__init__.py -> build/lib/tests\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | copying tests/commands_test.py -> build/lib/tests\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | copying aiomcache/py.typed -> build/lib/aiomcache\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | /opt/hostedtoolcache/Python/3.9.6/x64/lib/python3.9/site-packages/setuptools/_distutils/cmd.py:66: SetuptoolsDeprecationWarning: setup.py install is deprecated.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | !!\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |         ********************************************************************************\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |         Please avoid running ``setup.py`` directly.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |         Instead, use pypa/build, pypa/installer or other\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |         standards-based tools.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |         See https://blog.ganssle.io/articles/2021/10/setup-py-deprecated.html for details.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |         ********************************************************************************\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | !!\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   |   self.initialize_options()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | installing to build/bdist.linux-x86_64/wheel\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | running install\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | running install_lib\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | creating build/bdist.linux-x86_64\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | creating build/bdist.linux-x86_64/wheel\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | creating build/bdist.linux-x86_64/wheel/aiomcache\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | copying build/lib/aiomcache/constants.py -> build/bdist.linux-x86_64/wheel/aiomcache\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | copying build/lib/aiomcache/py.typed -> build/bdist.linux-x86_64/wheel/aiomcache\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | copying build/lib/aiomcache/exceptions.py -> build/bdist.linux-x86_64/wheel/aiomcache\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | copying build/lib/aiomcache/pool.py -> build/bdist.linux-x86_64/wheel/aiomcache\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | copying build/lib/aiomcache/__init__.py -> build/bdist.linux-x86_64/wheel/aiomcache\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | copying build/lib/aiomcache/client.py -> build/bdist.linux-x86_64/wheel/aiomcache\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | creating build/bdist.linux-x86_64/wheel/tests\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | copying build/lib/tests/conftest.py -> build/bdist.linux-x86_64/wheel/tests\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | copying build/lib/tests/conn_args_test.py -> build/bdist.linux-x86_64/wheel/tests\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | copying build/lib/tests/pool_test.py -> build/bdist.linux-x86_64/wheel/tests\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | copying build/lib/tests/flag_helper.py -> build/bdist.linux-x86_64/wheel/tests\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | copying build/lib/tests/__init__.py -> build/bdist.linux-x86_64/wheel/tests\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | copying build/lib/tests/commands_test.py -> build/bdist.linux-x86_64/wheel/tests\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | running install_egg_info\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Copying aiomcache.egg-info to build/bdist.linux-x86_64/wheel/aiomcache-0.8.1-py3.9.egg-info\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | running install_scripts\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | creating build/bdist.linux-x86_64/wheel/aiomcache-0.8.1.dist-info/WHEEL\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | creating 'dist/aiomcache-0.8.1-py3-none-any.whl' and adding 'build/bdist.linux-x86_64/wheel' to it\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | adding 'aiomcache/__init__.py'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | adding 'aiomcache/client.py'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | adding 'aiomcache/constants.py'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | adding 'aiomcache/exceptions.py'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | adding 'aiomcache/pool.py'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | adding 'aiomcache/py.typed'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | adding 'tests/__init__.py'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | adding 'tests/commands_test.py'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | adding 'tests/conftest.py'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | adding 'tests/conn_args_test.py'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | adding 'tests/flag_helper.py'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | adding 'tests/pool_test.py'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | adding 'aiomcache-0.8.1.dist-info/LICENSE'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | adding 'aiomcache-0.8.1.dist-info/METADATA'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | adding 'aiomcache-0.8.1.dist-info/WHEEL'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | adding 'aiomcache-0.8.1.dist-info/top_level.txt'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | adding 'aiomcache-0.8.1.dist-info/RECORD'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | removing build/bdist.linux-x86_64/wheel\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \u2705  Success - Main Prepare twine checker\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter] \u2b50 Run Main Run twine checker\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/8] user= workdir=\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | ============================= test session starts ==============================\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | platform linux -- Python 3.7.11, pytest-7.4.0, pluggy-1.2.0 -- /opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | cachedir: .pytest_cache\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | rootdir: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/aio-libs-aiomcache\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | configfile: pytest.ini\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | testpaths: tests/\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | plugins: cov-4.1.0, asyncio-0.21.0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | asyncio: mode=auto\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | collecting ... collected 67 items\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_valid_key[key] PASSED                       [  1%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_valid_key[123] PASSED                       [  2%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_valid_key[!@#] PASSED                       [  4%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_valid_key[\\xe4\\xb8\\xad\\xe6\\x96\\x87] PASSED  [  5%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_valid_key[\\xe3\\x81\\x93\\xe3\\x82\\x93\\xe3\\x81\\xab\\xe3\\x81\\xa1\\xe3\\x81\\xaf] PASSED [  7%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_valid_key[\\xec\\x95\\x88\\xeb\\x85\\x95\\xed\\x95\\x98\\xec\\x84\\xb8\\xec\\x9a\\x94] PASSED [  8%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_invalid_key[foo bar] PASSED                 [ 10%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_invalid_key[foo\\t] PASSED                   [ 11%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_invalid_key[\\nbar] PASSED                   [ 13%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_invalid_key[foo \\rbar] PASSED               [ 14%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_invalid_key[\\x18\\x0e] PASSED                [ 16%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_invalid_key[ `] PASSED                      [ 17%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_invalid_key[0\\x00] PASSED                   [ 19%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_invalid_key[ \\x01] PASSED                   [ 20%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_invalid_key[foo\\x00bar] PASSED              [ 22%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_invalid_key[\\x1f] PASSED                    [ 23%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_invalid_key[\\x7f] PASSED                    [ 25%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_invalid_key[\\xc2\\x80] PASSED                [ 26%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_invalid_key[\\xc2\\x9f] PASSED                [ 28%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_version FAILED                              [ 29%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_flush_all FAILED                            [ 31%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_set_get FAILED                              [ 32%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_gets FAILED                                 [ 34%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_multi_get FAILED                            [ 35%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_multi_get_doubling_keys FAILED              [ 37%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_set_expire FAILED                           [ 38%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_set_errors FAILED                           [ 40%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_gets_cas FAILED                             [ 41%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_cas_missing FAILED                          [ 43%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_add FAILED                                  [ 44%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_replace FAILED                              [ 46%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_append FAILED                               [ 47%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_prepend FAILED                              [ 49%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_delete FAILED                               [ 50%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_delete_key_not_exists FAILED                [ 52%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_incr FAILED                                 [ 53%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_incr_errors FAILED                          [ 55%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_decr FAILED                                 [ 56%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_decr_errors FAILED                          [ 58%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_stats FAILED                                [ 59%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_touch FAILED                                [ 61%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_close PASSED                                [ 62%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_flag_helper[key] FAILED                     [ 64%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_flag_helper[bkey] FAILED                    [ 65%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_flag_helper[False] FAILED                   [ 67%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_flag_helper[1] FAILED                       [ 68%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_flag_helper[None] FAILED                    [ 70%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_flag_helper[0.5] FAILED                     [ 71%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_flag_helper[value6] FAILED                  [ 73%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_flag_helper[value7] FAILED                  [ 74%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_flag_helper[value8] FAILED                  [ 76%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_flag_helper[!@#] FAILED                     [ 77%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_flag_helper[\\xec\\x95\\x88\\xeb\\x85\\x95\\xed\\x95\\x98\\xec\\x84\\xb8\\xec\\x9a\\x94] FAILED [ 79%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_objects_not_supported_without_flag_handler FAILED [ 80%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py::test_flag_handler_invoked_only_when_expected FAILED [ 82%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/conn_args_test.py::test_params_forwarded_from_client SKIPPED (...) [ 83%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/conn_args_test.py::test_ssl_client_fails_against_plaintext_server FAILED [ 85%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/pool_test.py::test_pool_creation PASSED                            [ 86%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/pool_test.py::test_pool_acquire_release FAILED                     [ 88%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/pool_test.py::test_pool_acquire_release2 FAILED                    [ 89%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/pool_test.py::test_pool_clear FAILED                               [ 91%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/pool_test.py::test_acquire_dont_create_new_connection_if_have_conn_in_pool FAILED [ 92%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/pool_test.py::test_acquire_limit_maxsize FAILED                    [ 94%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/pool_test.py::test_acquire_task_cancellation FAILED                [ 95%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/pool_test.py::test_maxsize_greater_than_minsize FAILED             [ 97%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/pool_test.py::test_0_minsize FAILED                                [ 98%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/pool_test.py::test_bad_connection PASSED                           [100%]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | =================================== FAILURES ===================================\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _________________________________ test_version _________________________________\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache = <aiomcache.client.Client object at 0x7ffa54d608d0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     async def test_version(mcache: Client) -> None:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >       version = await mcache.version()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache     = <aiomcache.client.Client object at 0x7ffa54d608d0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py:49: \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/client.py:40: in wrapper\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     conn = await self._pool.acquire()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         args       = ()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         func       = <function FlagClient.version at 0x7ffa54cc03b0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwargs     = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.client.Client object at 0x7ffa54d608d0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:40: in acquire\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     _conn = await self._create_new_conn()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa54d60790>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:71: in _create_new_conn\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     self._host, self._port, **self.conn_args)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa54d60790>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/streams.py:77: in open_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     lambda: protocol, host, port, **kwds)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwds       = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         limit      = 65536\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         loop       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol   = <asyncio.streams.StreamReaderProtocol object at 0x7ffa567690d0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         reader     = <StreamReader>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:962: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     raise exceptions[0]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa54da5a70>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:949: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     await self.sock_connect(sock, address)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa54da5a70>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:473: in sock_connect\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     return await fut\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         _          = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         resolved   = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     def _sock_connect_cb(self, fut, sock, address):\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         if fut.cancelled():\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             return\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         try:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             if err != 0:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |                 # Jump to any except clause below.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >               raise OSError(err, f'Connect call failed {address}')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | err        = 111\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:503: ConnectionRefusedError\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | ________________________________ test_flush_all ________________________________\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache = <aiomcache.client.Client object at 0x7ffa5494f7d0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     async def test_flush_all(mcache: Client) -> None:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         key, value = b'key:flush_all', b'flush_all_value'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >       await mcache.set(key, value)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | key        = b'key:flush_all'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache     = <aiomcache.client.Client object at 0x7ffa5494f7d0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | value      = b'flush_all_value'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py:66: \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/client.py:40: in wrapper\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     conn = await self._pool.acquire()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         args       = (b'key:flush_all', b'flush_all_value')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         func       = <function FlagClient.set at 0x7ffa54e248c0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwargs     = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.client.Client object at 0x7ffa5494f7d0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:40: in acquire\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     _conn = await self._create_new_conn()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa5494f850>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:71: in _create_new_conn\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     self._host, self._port, **self.conn_args)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa5494f850>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/streams.py:77: in open_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     lambda: protocol, host, port, **kwds)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwds       = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         limit      = 65536\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         loop       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol   = <asyncio.streams.StreamReaderProtocol object at 0x7ffa5494fc50>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         reader     = <StreamReader>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:962: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     raise exceptions[0]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa5495c710>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:949: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     await self.sock_connect(sock, address)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa5495c710>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:473: in sock_connect\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     return await fut\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         _          = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         resolved   = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     def _sock_connect_cb(self, fut, sock, address):\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         if fut.cancelled():\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             return\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         try:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             if err != 0:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |                 # Jump to any except clause below.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >               raise OSError(err, f'Connect call failed {address}')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | err        = 111\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:503: ConnectionRefusedError\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _________________________________ test_set_get _________________________________\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache = <aiomcache.client.Client object at 0x7ffa54d607d0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     async def test_set_get(mcache: Client) -> None:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         key, value = b'key:set', b'1'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >       await mcache.set(key, value)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | key        = b'key:set'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache     = <aiomcache.client.Client object at 0x7ffa54d607d0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | value      = b'1'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py:86: \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/client.py:40: in wrapper\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     conn = await self._pool.acquire()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         args       = (b'key:set', b'1')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         func       = <function FlagClient.set at 0x7ffa54e248c0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwargs     = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.client.Client object at 0x7ffa54d607d0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:40: in acquire\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     _conn = await self._create_new_conn()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa54d60750>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:71: in _create_new_conn\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     self._host, self._port, **self.conn_args)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa54d60750>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/streams.py:77: in open_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     lambda: protocol, host, port, **kwds)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwds       = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         limit      = 65536\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         loop       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol   = <asyncio.streams.StreamReaderProtocol object at 0x7ffa54c28810>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         reader     = <StreamReader>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:962: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     raise exceptions[0]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa5495cd40>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:949: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     await self.sock_connect(sock, address)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa5495cd40>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:473: in sock_connect\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     return await fut\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         _          = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         resolved   = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     def _sock_connect_cb(self, fut, sock, address):\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         if fut.cancelled():\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             return\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         try:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             if err != 0:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |                 # Jump to any except clause below.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >               raise OSError(err, f'Connect call failed {address}')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | err        = 111\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:503: ConnectionRefusedError\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | __________________________________ test_gets ___________________________________\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache = <aiomcache.client.Client object at 0x7ffa54d441d0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     async def test_gets(mcache: Client) -> None:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         key, value = b'key:set', b'1'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >       await mcache.set(key, value)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | key        = b'key:set'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache     = <aiomcache.client.Client object at 0x7ffa54d441d0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | value      = b'1'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py:104: \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/client.py:40: in wrapper\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     conn = await self._pool.acquire()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         args       = (b'key:set', b'1')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         func       = <function FlagClient.set at 0x7ffa54e248c0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwargs     = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.client.Client object at 0x7ffa54d441d0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:40: in acquire\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     _conn = await self._create_new_conn()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa54d44050>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:71: in _create_new_conn\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     self._host, self._port, **self.conn_args)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa54d44050>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/streams.py:77: in open_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     lambda: protocol, host, port, **kwds)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwds       = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         limit      = 65536\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         loop       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol   = <asyncio.streams.StreamReaderProtocol object at 0x7ffa54d44a90>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         reader     = <StreamReader>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:962: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     raise exceptions[0]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa54add710>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:949: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     await self.sock_connect(sock, address)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa54add710>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:473: in sock_connect\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     return await fut\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         _          = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         resolved   = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     def _sock_connect_cb(self, fut, sock, address):\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         if fut.cancelled():\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             return\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         try:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             if err != 0:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |                 # Jump to any except clause below.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >               raise OSError(err, f'Connect call failed {address}')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | err        = 111\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:503: ConnectionRefusedError\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | ________________________________ test_multi_get ________________________________\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache = <aiomcache.client.Client object at 0x7ffa5494f810>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     async def test_multi_get(mcache: Client) -> None:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         key1, value1 = b'key:multi_get:1', b'1'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         key2, value2 = b'key:multi_get:2', b'2'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >       await mcache.set(key1, value1)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | key1       = b'key:multi_get:1'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | key2       = b'key:multi_get:2'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache     = <aiomcache.client.Client object at 0x7ffa5494f810>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | value1     = b'1'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | value2     = b'2'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py:122: \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/client.py:40: in wrapper\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     conn = await self._pool.acquire()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         args       = (b'key:multi_get:1', b'1')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         func       = <function FlagClient.set at 0x7ffa54e248c0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwargs     = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.client.Client object at 0x7ffa5494f810>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:40: in acquire\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     _conn = await self._create_new_conn()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa5494fd50>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:71: in _create_new_conn\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     self._host, self._port, **self.conn_args)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa5494fd50>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/streams.py:77: in open_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     lambda: protocol, host, port, **kwds)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwds       = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         limit      = 65536\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         loop       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol   = <asyncio.streams.StreamReaderProtocol object at 0x7ffa54ad4790>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         reader     = <StreamReader>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:962: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     raise exceptions[0]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa54addcb0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:949: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     await self.sock_connect(sock, address)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa54addcb0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:473: in sock_connect\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     return await fut\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         _          = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         resolved   = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     def _sock_connect_cb(self, fut, sock, address):\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         if fut.cancelled():\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             return\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         try:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             if err != 0:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |                 # Jump to any except clause below.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >               raise OSError(err, f'Connect call failed {address}')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | err        = 111\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:503: ConnectionRefusedError\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _________________________ test_multi_get_doubling_keys _________________________\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache = <aiomcache.client.Client object at 0x7ffa54063790>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     async def test_multi_get_doubling_keys(mcache: Client) -> None:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         key, value = b'key:multi_get:3', b'1'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >       await mcache.set(key, value)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | key        = b'key:multi_get:3'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache     = <aiomcache.client.Client object at 0x7ffa54063790>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | value      = b'1'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py:135: \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/client.py:40: in wrapper\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     conn = await self._pool.acquire()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         args       = (b'key:multi_get:3', b'1')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         func       = <function FlagClient.set at 0x7ffa54e248c0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwargs     = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.client.Client object at 0x7ffa54063790>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:40: in acquire\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     _conn = await self._create_new_conn()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa54063810>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:71: in _create_new_conn\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     self._host, self._port, **self.conn_args)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa54063810>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/streams.py:77: in open_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     lambda: protocol, host, port, **kwds)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwds       = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         limit      = 65536\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         loop       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol   = <asyncio.streams.StreamReaderProtocol object at 0x7ffa54063bd0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         reader     = <StreamReader>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:962: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     raise exceptions[0]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa4fe303b0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:949: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     await self.sock_connect(sock, address)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa4fe303b0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:473: in sock_connect\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     return await fut\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         _          = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         resolved   = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     def _sock_connect_cb(self, fut, sock, address):\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         if fut.cancelled():\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             return\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         try:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             if err != 0:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |                 # Jump to any except clause below.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >               raise OSError(err, f'Connect call failed {address}')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | err        = 111\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:503: ConnectionRefusedError\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _______________________________ test_set_expire ________________________________\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache = <aiomcache.client.Client object at 0x7ffa5492d310>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     async def test_set_expire(mcache: Client) -> None:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         key, value = b'key:set', b'1'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >       await mcache.set(key, value, exptime=1)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | key        = b'key:set'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache     = <aiomcache.client.Client object at 0x7ffa5492d310>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | value      = b'1'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py:143: \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/client.py:40: in wrapper\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     conn = await self._pool.acquire()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         args       = (b'key:set', b'1')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         func       = <function FlagClient.set at 0x7ffa54e248c0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwargs     = {'exptime': 1}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.client.Client object at 0x7ffa5492d310>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:40: in acquire\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     _conn = await self._create_new_conn()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa5492d3d0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:71: in _create_new_conn\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     self._host, self._port, **self.conn_args)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa5492d3d0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/streams.py:77: in open_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     lambda: protocol, host, port, **kwds)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwds       = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         limit      = 65536\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         loop       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol   = <asyncio.streams.StreamReaderProtocol object at 0x7ffa5492d950>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         reader     = <StreamReader>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:962: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     raise exceptions[0]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa4fe30d40>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:949: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     await self.sock_connect(sock, address)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa4fe30d40>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:473: in sock_connect\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     return await fut\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         _          = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         resolved   = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     def _sock_connect_cb(self, fut, sock, address):\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         if fut.cancelled():\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             return\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         try:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             if err != 0:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |                 # Jump to any except clause below.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >               raise OSError(err, f'Connect call failed {address}')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | err        = 111\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:503: ConnectionRefusedError\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _______________________________ test_set_errors ________________________________\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache = <aiomcache.client.Client object at 0x7ffa5494f390>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     async def test_set_errors(mcache: Client) -> None:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         key, value = b'key:set', b'1'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >       await mcache.set(key, value, exptime=1)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | key        = b'key:set'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache     = <aiomcache.client.Client object at 0x7ffa5494f390>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | value      = b'1'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py:155: \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/client.py:40: in wrapper\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     conn = await self._pool.acquire()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         args       = (b'key:set', b'1')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         func       = <function FlagClient.set at 0x7ffa54e248c0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwargs     = {'exptime': 1}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.client.Client object at 0x7ffa5494f390>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:40: in acquire\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     _conn = await self._create_new_conn()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa5494fb50>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:71: in _create_new_conn\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     self._host, self._port, **self.conn_args)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa5494fb50>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/streams.py:77: in open_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     lambda: protocol, host, port, **kwds)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwds       = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         limit      = 65536\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         loop       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol   = <asyncio.streams.StreamReaderProtocol object at 0x7ffa54b40910>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         reader     = <StreamReader>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:962: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     raise exceptions[0]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa54addcb0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:949: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     await self.sock_connect(sock, address)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa54addcb0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:473: in sock_connect\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     return await fut\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         _          = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         resolved   = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     def _sock_connect_cb(self, fut, sock, address):\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         if fut.cancelled():\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             return\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         try:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             if err != 0:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |                 # Jump to any except clause below.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >               raise OSError(err, f'Connect call failed {address}')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | err        = 111\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:503: ConnectionRefusedError\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | ________________________________ test_gets_cas _________________________________\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache = <aiomcache.client.Client object at 0x7ffa54cf2c50>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     async def test_gets_cas(mcache: Client) -> None:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         key, value = b'key:set', b'1'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >       await mcache.set(key, value)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | key        = b'key:set'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache     = <aiomcache.client.Client object at 0x7ffa54cf2c50>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | value      = b'1'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py:166: \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/client.py:40: in wrapper\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     conn = await self._pool.acquire()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         args       = (b'key:set', b'1')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         func       = <function FlagClient.set at 0x7ffa54e248c0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwargs     = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.client.Client object at 0x7ffa54cf2c50>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:40: in acquire\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     _conn = await self._create_new_conn()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa54cf27d0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:71: in _create_new_conn\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     self._host, self._port, **self.conn_args)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa54cf27d0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/streams.py:77: in open_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     lambda: protocol, host, port, **kwds)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwds       = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         limit      = 65536\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         loop       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol   = <asyncio.streams.StreamReaderProtocol object at 0x7ffa54cf2850>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         reader     = <StreamReader>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:962: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     raise exceptions[0]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa54adb680>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:949: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     await self.sock_connect(sock, address)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa54adb680>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:473: in sock_connect\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     return await fut\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         _          = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         resolved   = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     def _sock_connect_cb(self, fut, sock, address):\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         if fut.cancelled():\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             return\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         try:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             if err != 0:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |                 # Jump to any except clause below.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >               raise OSError(err, f'Connect call failed {address}')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | err        = 111\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:503: ConnectionRefusedError\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _______________________________ test_cas_missing _______________________________\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache = <aiomcache.client.Client object at 0x7ffa54a17a90>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     async def test_cas_missing(mcache: Client) -> None:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         key, value = b'key:set', b'1'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >       stored = await mcache.cas(key, value, 123)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | key        = b'key:set'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache     = <aiomcache.client.Client object at 0x7ffa54a17a90>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | value      = b'1'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py:181: \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/client.py:40: in wrapper\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     conn = await self._pool.acquire()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         args       = (b'key:set', b'1', 123)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         func       = <function FlagClient.cas at 0x7ffa54e249e0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwargs     = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.client.Client object at 0x7ffa54a17a90>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:40: in acquire\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     _conn = await self._create_new_conn()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa54a17510>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:71: in _create_new_conn\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     self._host, self._port, **self.conn_args)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa54a17510>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/streams.py:77: in open_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     lambda: protocol, host, port, **kwds)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwds       = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         limit      = 65536\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         loop       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol   = <asyncio.streams.StreamReaderProtocol object at 0x7ffa54a17990>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         reader     = <StreamReader>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:962: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     raise exceptions[0]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa54bbf050>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:949: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     await self.sock_connect(sock, address)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa54bbf050>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:473: in sock_connect\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     return await fut\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         _          = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         resolved   = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     def _sock_connect_cb(self, fut, sock, address):\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         if fut.cancelled():\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             return\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         try:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             if err != 0:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |                 # Jump to any except clause below.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >               raise OSError(err, f'Connect call failed {address}')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | err        = 111\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:503: ConnectionRefusedError\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | ___________________________________ test_add ___________________________________\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache = <aiomcache.client.Client object at 0x7ffa4ffa9c50>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     async def test_add(mcache: Client) -> None:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         key, value = b'key:add', b'1'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >       await mcache.set(key, value)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | key        = b'key:add'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache     = <aiomcache.client.Client object at 0x7ffa4ffa9c50>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | value      = b'1'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py:187: \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/client.py:40: in wrapper\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     conn = await self._pool.acquire()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         args       = (b'key:add', b'1')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         func       = <function FlagClient.set at 0x7ffa54e248c0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwargs     = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.client.Client object at 0x7ffa4ffa9c50>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:40: in acquire\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     _conn = await self._create_new_conn()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa4ffa9d50>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:71: in _create_new_conn\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     self._host, self._port, **self.conn_args)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa4ffa9d50>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/streams.py:77: in open_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     lambda: protocol, host, port, **kwds)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwds       = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         limit      = 65536\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         loop       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol   = <asyncio.streams.StreamReaderProtocol object at 0x7ffa54d607d0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         reader     = <StreamReader>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:962: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     raise exceptions[0]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa54adb680>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:949: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     await self.sock_connect(sock, address)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa54adb680>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:473: in sock_connect\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     return await fut\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         _          = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         resolved   = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     def _sock_connect_cb(self, fut, sock, address):\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         if fut.cancelled():\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             return\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         try:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             if err != 0:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |                 # Jump to any except clause below.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >               raise OSError(err, f'Connect call failed {address}')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | err        = 111\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:503: ConnectionRefusedError\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _________________________________ test_replace _________________________________\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache = <aiomcache.client.Client object at 0x7ffa54a23a90>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     async def test_replace(mcache: Client) -> None:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         key, value = b'key:replace', b'1'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >       await mcache.set(key, value)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | key        = b'key:replace'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache     = <aiomcache.client.Client object at 0x7ffa54a23a90>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | value      = b'1'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py:201: \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/client.py:40: in wrapper\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     conn = await self._pool.acquire()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         args       = (b'key:replace', b'1')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         func       = <function FlagClient.set at 0x7ffa54e248c0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwargs     = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.client.Client object at 0x7ffa54a23a90>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:40: in acquire\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     _conn = await self._create_new_conn()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa54a23810>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:71: in _create_new_conn\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     self._host, self._port, **self.conn_args)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa54a23810>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/streams.py:77: in open_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     lambda: protocol, host, port, **kwds)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwds       = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         limit      = 65536\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         loop       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol   = <asyncio.streams.StreamReaderProtocol object at 0x7ffa54a23250>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         reader     = <StreamReader>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:962: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     raise exceptions[0]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa54bbf950>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:949: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     await self.sock_connect(sock, address)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa54bbf950>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:473: in sock_connect\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     return await fut\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         _          = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         resolved   = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     def _sock_connect_cb(self, fut, sock, address):\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         if fut.cancelled():\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             return\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         try:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             if err != 0:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |                 # Jump to any except clause below.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >               raise OSError(err, f'Connect call failed {address}')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | err        = 111\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:503: ConnectionRefusedError\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _________________________________ test_append __________________________________\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache = <aiomcache.client.Client object at 0x7ffa54ad4c50>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     async def test_append(mcache: Client) -> None:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         key, value = b'key:append', b'1'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >       await mcache.set(key, value)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | key        = b'key:append'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache     = <aiomcache.client.Client object at 0x7ffa54ad4c50>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | value      = b'1'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py:218: \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/client.py:40: in wrapper\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     conn = await self._pool.acquire()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         args       = (b'key:append', b'1')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         func       = <function FlagClient.set at 0x7ffa54e248c0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwargs     = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.client.Client object at 0x7ffa54ad4c50>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:40: in acquire\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     _conn = await self._create_new_conn()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa54ad48d0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:71: in _create_new_conn\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     self._host, self._port, **self.conn_args)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa54ad48d0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/streams.py:77: in open_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     lambda: protocol, host, port, **kwds)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwds       = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         limit      = 65536\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         loop       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol   = <asyncio.streams.StreamReaderProtocol object at 0x7ffa54ad4e50>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         reader     = <StreamReader>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:962: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     raise exceptions[0]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa54bbf440>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:949: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     await self.sock_connect(sock, address)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa54bbf440>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:473: in sock_connect\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     return await fut\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         _          = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         resolved   = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     def _sock_connect_cb(self, fut, sock, address):\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         if fut.cancelled():\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             return\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         try:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             if err != 0:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |                 # Jump to any except clause below.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >               raise OSError(err, f'Connect call failed {address}')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | err        = 111\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:503: ConnectionRefusedError\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _________________________________ test_prepend _________________________________\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache = <aiomcache.client.Client object at 0x7ffa5488ebd0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     async def test_prepend(mcache: Client) -> None:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         key, value = b'key:prepend', b'1'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >       await mcache.set(key, value)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | key        = b'key:prepend'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache     = <aiomcache.client.Client object at 0x7ffa5488ebd0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | value      = b'1'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py:236: \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/client.py:40: in wrapper\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     conn = await self._pool.acquire()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         args       = (b'key:prepend', b'1')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         func       = <function FlagClient.set at 0x7ffa54e248c0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwargs     = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.client.Client object at 0x7ffa5488ebd0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:40: in acquire\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     _conn = await self._create_new_conn()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa5488ed90>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:71: in _create_new_conn\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     self._host, self._port, **self.conn_args)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa5488ed90>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/streams.py:77: in open_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     lambda: protocol, host, port, **kwds)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwds       = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         limit      = 65536\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         loop       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol   = <asyncio.streams.StreamReaderProtocol object at 0x7ffa5488e3d0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         reader     = <StreamReader>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:962: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     raise exceptions[0]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa54bb15f0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:949: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     await self.sock_connect(sock, address)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa54bb15f0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:473: in sock_connect\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     return await fut\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         _          = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         resolved   = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     def _sock_connect_cb(self, fut, sock, address):\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         if fut.cancelled():\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             return\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         try:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             if err != 0:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |                 # Jump to any except clause below.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >               raise OSError(err, f'Connect call failed {address}')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | err        = 111\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:503: ConnectionRefusedError\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _________________________________ test_delete __________________________________\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache = <aiomcache.client.Client object at 0x7ffa54a0e8d0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     async def test_delete(mcache: Client) -> None:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         key, value = b'key:delete', b'value'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >       await mcache.set(key, value)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | key        = b'key:delete'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache     = <aiomcache.client.Client object at 0x7ffa54a0e8d0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | value      = b'value'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py:254: \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/client.py:40: in wrapper\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     conn = await self._pool.acquire()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         args       = (b'key:delete', b'value')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         func       = <function FlagClient.set at 0x7ffa54e248c0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwargs     = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.client.Client object at 0x7ffa54a0e8d0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:40: in acquire\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     _conn = await self._create_new_conn()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa54a0ed50>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:71: in _create_new_conn\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     self._host, self._port, **self.conn_args)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa54a0ed50>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/streams.py:77: in open_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     lambda: protocol, host, port, **kwds)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwds       = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         limit      = 65536\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         loop       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol   = <asyncio.streams.StreamReaderProtocol object at 0x7ffa54a0ee90>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         reader     = <StreamReader>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:962: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     raise exceptions[0]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa54bb1f80>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:949: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     await self.sock_connect(sock, address)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa54bb1f80>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:473: in sock_connect\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     return await fut\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         _          = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         resolved   = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     def _sock_connect_cb(self, fut, sock, address):\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         if fut.cancelled():\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             return\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         try:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             if err != 0:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |                 # Jump to any except clause below.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >               raise OSError(err, f'Connect call failed {address}')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | err        = 111\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:503: ConnectionRefusedError\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | __________________________ test_delete_key_not_exists __________________________\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache = <aiomcache.client.Client object at 0x7ffa4ffa9310>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     async def test_delete_key_not_exists(mcache: Client) -> None:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >       is_deleted = await mcache.delete(b\"not:key\")\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache     = <aiomcache.client.Client object at 0x7ffa4ffa9310>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py:276: \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/client.py:40: in wrapper\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     conn = await self._pool.acquire()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         args       = (b'not:key',)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         func       = <function FlagClient.delete at 0x7ffa54e24290>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwargs     = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.client.Client object at 0x7ffa4ffa9310>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:40: in acquire\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     _conn = await self._create_new_conn()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa4ffa96d0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:71: in _create_new_conn\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     self._host, self._port, **self.conn_args)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa4ffa96d0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/streams.py:77: in open_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     lambda: protocol, host, port, **kwds)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwds       = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         limit      = 65536\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         loop       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol   = <asyncio.streams.StreamReaderProtocol object at 0x7ffa4ffa9490>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         reader     = <StreamReader>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:962: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     raise exceptions[0]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa54bbf560>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:949: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     await self.sock_connect(sock, address)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa54bbf560>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:473: in sock_connect\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     return await fut\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         _          = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         resolved   = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     def _sock_connect_cb(self, fut, sock, address):\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         if fut.cancelled():\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             return\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         try:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             if err != 0:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |                 # Jump to any except clause below.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >               raise OSError(err, f'Connect call failed {address}')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | err        = 111\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:503: ConnectionRefusedError\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | __________________________________ test_incr ___________________________________\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache = <aiomcache.client.Client object at 0x7ffa4fefd850>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     async def test_incr(mcache: Client) -> None:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         key, value = b'key:incr:1', b'1'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >       await mcache.set(key, value)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | key        = b'key:incr:1'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache     = <aiomcache.client.Client object at 0x7ffa4fefd850>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | value      = b'1'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py:282: \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/client.py:40: in wrapper\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     conn = await self._pool.acquire()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         args       = (b'key:incr:1', b'1')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         func       = <function FlagClient.set at 0x7ffa54e248c0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwargs     = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.client.Client object at 0x7ffa4fefd850>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:40: in acquire\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     _conn = await self._create_new_conn()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa4fefd8d0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:71: in _create_new_conn\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     self._host, self._port, **self.conn_args)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa4fefd8d0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/streams.py:77: in open_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     lambda: protocol, host, port, **kwds)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwds       = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         limit      = 65536\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         loop       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol   = <asyncio.streams.StreamReaderProtocol object at 0x7ffa4fefdbd0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         reader     = <StreamReader>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:962: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     raise exceptions[0]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa54bce8c0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:949: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     await self.sock_connect(sock, address)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa54bce8c0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:473: in sock_connect\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     return await fut\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         _          = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         resolved   = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     def _sock_connect_cb(self, fut, sock, address):\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         if fut.cancelled():\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             return\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         try:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             if err != 0:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |                 # Jump to any except clause below.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >               raise OSError(err, f'Connect call failed {address}')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | err        = 111\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:503: ConnectionRefusedError\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _______________________________ test_incr_errors _______________________________\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache = <aiomcache.client.Client object at 0x7ffa4fed5610>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     async def test_incr_errors(mcache: Client) -> None:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         key, value = b'key:incr:2', b'string'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >       await mcache.set(key, value)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | key        = b'key:incr:2'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache     = <aiomcache.client.Client object at 0x7ffa4fed5610>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | value      = b'string'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py:294: \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/client.py:40: in wrapper\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     conn = await self._pool.acquire()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         args       = (b'key:incr:2', b'string')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         func       = <function FlagClient.set at 0x7ffa54e248c0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwargs     = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.client.Client object at 0x7ffa4fed5610>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:40: in acquire\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     _conn = await self._create_new_conn()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa4fed5750>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:71: in _create_new_conn\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     self._host, self._port, **self.conn_args)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa4fed5750>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/streams.py:77: in open_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     lambda: protocol, host, port, **kwds)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwds       = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         limit      = 65536\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         loop       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol   = <asyncio.streams.StreamReaderProtocol object at 0x7ffa4fed5a90>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         reader     = <StreamReader>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:962: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     raise exceptions[0]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa54c84290>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:949: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     await self.sock_connect(sock, address)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa54c84290>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:473: in sock_connect\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     return await fut\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         _          = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         resolved   = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     def _sock_connect_cb(self, fut, sock, address):\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         if fut.cancelled():\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             return\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         try:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             if err != 0:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |                 # Jump to any except clause below.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >               raise OSError(err, f'Connect call failed {address}')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | err        = 111\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:503: ConnectionRefusedError\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | __________________________________ test_decr ___________________________________\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache = <aiomcache.client.Client object at 0x7ffa5488ef10>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     async def test_decr(mcache: Client) -> None:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         key, value = b'key:decr:1', b'17'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >       await mcache.set(key, value)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | key        = b'key:decr:1'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache     = <aiomcache.client.Client object at 0x7ffa5488ef10>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | value      = b'17'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py:305: \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/client.py:40: in wrapper\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     conn = await self._pool.acquire()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         args       = (b'key:decr:1', b'17')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         func       = <function FlagClient.set at 0x7ffa54e248c0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwargs     = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.client.Client object at 0x7ffa5488ef10>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:40: in acquire\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     _conn = await self._create_new_conn()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa5488e2d0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:71: in _create_new_conn\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     self._host, self._port, **self.conn_args)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa5488e2d0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/streams.py:77: in open_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     lambda: protocol, host, port, **kwds)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwds       = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         limit      = 65536\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         loop       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol   = <asyncio.streams.StreamReaderProtocol object at 0x7ffa5488ead0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         reader     = <StreamReader>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:962: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     raise exceptions[0]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa54bce290>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:949: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     await self.sock_connect(sock, address)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa54bce290>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:473: in sock_connect\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     return await fut\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         _          = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         resolved   = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     def _sock_connect_cb(self, fut, sock, address):\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         if fut.cancelled():\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             return\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         try:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             if err != 0:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |                 # Jump to any except clause below.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >               raise OSError(err, f'Connect call failed {address}')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | err        = 111\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:503: ConnectionRefusedError\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _______________________________ test_decr_errors _______________________________\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache = <aiomcache.client.Client object at 0x7ffa54cfbad0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     async def test_decr_errors(mcache: Client) -> None:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         key, value = b'key:decr:2', b'string'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >       await mcache.set(key, value)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | key        = b'key:decr:2'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache     = <aiomcache.client.Client object at 0x7ffa54cfbad0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | value      = b'string'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py:319: \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/client.py:40: in wrapper\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     conn = await self._pool.acquire()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         args       = (b'key:decr:2', b'string')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         func       = <function FlagClient.set at 0x7ffa54e248c0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwargs     = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.client.Client object at 0x7ffa54cfbad0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:40: in acquire\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     _conn = await self._create_new_conn()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa54cfbd90>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:71: in _create_new_conn\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     self._host, self._port, **self.conn_args)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa54cfbd90>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/streams.py:77: in open_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     lambda: protocol, host, port, **kwds)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwds       = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         limit      = 65536\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         loop       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol   = <asyncio.streams.StreamReaderProtocol object at 0x7ffa54cfb5d0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         reader     = <StreamReader>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:962: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     raise exceptions[0]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa54c84b90>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:949: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     await self.sock_connect(sock, address)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa54c84b90>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:473: in sock_connect\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     return await fut\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         _          = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         resolved   = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     def _sock_connect_cb(self, fut, sock, address):\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         if fut.cancelled():\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             return\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         try:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             if err != 0:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |                 # Jump to any except clause below.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >               raise OSError(err, f'Connect call failed {address}')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | err        = 111\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:503: ConnectionRefusedError\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | __________________________________ test_stats __________________________________\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache = <aiomcache.client.Client object at 0x7ffa54cfef90>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     async def test_stats(mcache: Client) -> None:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >       stats = await mcache.stats()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache     = <aiomcache.client.Client object at 0x7ffa54cfef90>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py:329: \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/client.py:40: in wrapper\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     conn = await self._pool.acquire()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         args       = ()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         func       = <function FlagClient.stats at 0x7ffa54e24710>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwargs     = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.client.Client object at 0x7ffa54cfef90>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:40: in acquire\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     _conn = await self._create_new_conn()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa54cfea50>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:71: in _create_new_conn\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     self._host, self._port, **self.conn_args)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa54cfea50>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/streams.py:77: in open_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     lambda: protocol, host, port, **kwds)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwds       = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         limit      = 65536\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         loop       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol   = <asyncio.streams.StreamReaderProtocol object at 0x7ffa54cfe6d0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         reader     = <StreamReader>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:962: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     raise exceptions[0]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa54c84200>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:949: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     await self.sock_connect(sock, address)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa54c84200>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:473: in sock_connect\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     return await fut\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         _          = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         resolved   = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     def _sock_connect_cb(self, fut, sock, address):\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         if fut.cancelled():\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             return\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         try:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             if err != 0:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |                 # Jump to any except clause below.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >               raise OSError(err, f'Connect call failed {address}')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | err        = 111\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:503: ConnectionRefusedError\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | __________________________________ test_touch __________________________________\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache = <aiomcache.client.Client object at 0x7ffa54cf2ad0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     async def test_touch(mcache: Client) -> None:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         key, value = b'key:touch:1', b'17'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >       await mcache.set(key, value)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | key        = b'key:touch:1'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache     = <aiomcache.client.Client object at 0x7ffa54cf2ad0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | value      = b'17'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py:335: \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/client.py:40: in wrapper\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     conn = await self._pool.acquire()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         args       = (b'key:touch:1', b'17')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         func       = <function FlagClient.set at 0x7ffa54e248c0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwargs     = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.client.Client object at 0x7ffa54cf2ad0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:40: in acquire\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     _conn = await self._create_new_conn()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa54cf2d10>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:71: in _create_new_conn\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     self._host, self._port, **self.conn_args)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa54cf2d10>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/streams.py:77: in open_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     lambda: protocol, host, port, **kwds)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwds       = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         limit      = 65536\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         loop       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol   = <asyncio.streams.StreamReaderProtocol object at 0x7ffa54cf2bd0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         reader     = <StreamReader>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:962: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     raise exceptions[0]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa54ba9830>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:949: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     await self.sock_connect(sock, address)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa54ba9830>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:473: in sock_connect\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     return await fut\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         _          = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         resolved   = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     def _sock_connect_cb(self, fut, sock, address):\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         if fut.cancelled():\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             return\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         try:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             if err != 0:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |                 # Jump to any except clause below.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >               raise OSError(err, f'Connect call failed {address}')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | err        = 111\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:503: ConnectionRefusedError\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | ____________________________ test_flag_helper[key] _____________________________\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache_flag_client = <aiomcache.client.FlagClient object at 0x7ffa54d29390>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | value = 'key'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     @pytest.mark.parametrize(\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         \"value\",\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         [\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             \"key\",\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             b\"bkey\",\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             False,\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             1,\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             None,\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             0.5,\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             [1, 2, 3],\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             tuple([1, 2, 3]),\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             [datetime.date(2015, 12, 28)],\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             bytes(\"!@#\", \"utf-8\"),\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             bytes(\"\uc548\ub155\ud558\uc138\uc694\", \"utf-8\"),\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     )\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     async def test_flag_helper(\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             mcache_flag_client: FlagClient[Any], value: object) -> None:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         key = b\"key:test_flag_helper\"\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >       await mcache_flag_client.set(key, value)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | key        = b'key:test_flag_helper'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache_flag_client = <aiomcache.client.FlagClient object at 0x7ffa54d29390>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | value      = 'key'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py:385: \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/client.py:40: in wrapper\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     conn = await self._pool.acquire()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         args       = (b'key:test_flag_helper', 'key')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         func       = <function FlagClient.set at 0x7ffa54e248c0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwargs     = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.client.FlagClient object at 0x7ffa54d29390>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:40: in acquire\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     _conn = await self._create_new_conn()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa54d29b50>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:71: in _create_new_conn\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     self._host, self._port, **self.conn_args)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa54d29b50>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/streams.py:77: in open_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     lambda: protocol, host, port, **kwds)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwds       = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         limit      = 65536\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         loop       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol   = <asyncio.streams.StreamReaderProtocol object at 0x7ffa54d294d0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         reader     = <StreamReader>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:962: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     raise exceptions[0]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa4fed95f0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:949: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     await self.sock_connect(sock, address)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa4fed95f0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:473: in sock_connect\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     return await fut\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         _          = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         resolved   = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     def _sock_connect_cb(self, fut, sock, address):\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         if fut.cancelled():\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             return\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         try:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             if err != 0:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |                 # Jump to any except clause below.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >               raise OSError(err, f'Connect call failed {address}')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | err        = 111\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:503: ConnectionRefusedError\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | ____________________________ test_flag_helper[bkey] ____________________________\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache_flag_client = <aiomcache.client.FlagClient object at 0x7ffa4ffa9d10>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | value = b'bkey'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     @pytest.mark.parametrize(\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         \"value\",\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         [\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             \"key\",\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             b\"bkey\",\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             False,\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             1,\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             None,\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             0.5,\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             [1, 2, 3],\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             tuple([1, 2, 3]),\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             [datetime.date(2015, 12, 28)],\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             bytes(\"!@#\", \"utf-8\"),\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             bytes(\"\uc548\ub155\ud558\uc138\uc694\", \"utf-8\"),\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     )\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     async def test_flag_helper(\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             mcache_flag_client: FlagClient[Any], value: object) -> None:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         key = b\"key:test_flag_helper\"\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >       await mcache_flag_client.set(key, value)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | key        = b'key:test_flag_helper'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache_flag_client = <aiomcache.client.FlagClient object at 0x7ffa4ffa9d10>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | value      = b'bkey'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py:385: \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/client.py:40: in wrapper\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     conn = await self._pool.acquire()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         args       = (b'key:test_flag_helper', b'bkey')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         func       = <function FlagClient.set at 0x7ffa54e248c0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwargs     = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.client.FlagClient object at 0x7ffa4ffa9d10>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:40: in acquire\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     _conn = await self._create_new_conn()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa4ffa9750>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:71: in _create_new_conn\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     self._host, self._port, **self.conn_args)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa4ffa9750>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/streams.py:77: in open_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     lambda: protocol, host, port, **kwds)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwds       = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         limit      = 65536\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         loop       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol   = <asyncio.streams.StreamReaderProtocol object at 0x7ffa4fe77c90>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         reader     = <StreamReader>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:962: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     raise exceptions[0]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa4fed9170>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:949: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     await self.sock_connect(sock, address)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa4fed9170>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:473: in sock_connect\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     return await fut\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         _          = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         resolved   = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     def _sock_connect_cb(self, fut, sock, address):\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         if fut.cancelled():\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             return\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         try:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             if err != 0:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |                 # Jump to any except clause below.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >               raise OSError(err, f'Connect call failed {address}')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | err        = 111\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:503: ConnectionRefusedError\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | ___________________________ test_flag_helper[False] ____________________________\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache_flag_client = <aiomcache.client.FlagClient object at 0x7ffa54dc4e50>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | value = False\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     @pytest.mark.parametrize(\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         \"value\",\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         [\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             \"key\",\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             b\"bkey\",\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             False,\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             1,\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             None,\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             0.5,\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             [1, 2, 3],\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             tuple([1, 2, 3]),\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             [datetime.date(2015, 12, 28)],\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             bytes(\"!@#\", \"utf-8\"),\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             bytes(\"\uc548\ub155\ud558\uc138\uc694\", \"utf-8\"),\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     )\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     async def test_flag_helper(\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             mcache_flag_client: FlagClient[Any], value: object) -> None:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         key = b\"key:test_flag_helper\"\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >       await mcache_flag_client.set(key, value)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | key        = b'key:test_flag_helper'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache_flag_client = <aiomcache.client.FlagClient object at 0x7ffa54dc4e50>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | value      = False\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py:385: \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/client.py:40: in wrapper\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     conn = await self._pool.acquire()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         args       = (b'key:test_flag_helper', False)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         func       = <function FlagClient.set at 0x7ffa54e248c0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwargs     = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.client.FlagClient object at 0x7ffa54dc4e50>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:40: in acquire\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     _conn = await self._create_new_conn()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa54dc4a10>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:71: in _create_new_conn\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     self._host, self._port, **self.conn_args)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa54dc4a10>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/streams.py:77: in open_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     lambda: protocol, host, port, **kwds)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwds       = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         limit      = 65536\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         loop       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol   = <asyncio.streams.StreamReaderProtocol object at 0x7ffa54dc42d0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         reader     = <StreamReader>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:962: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     raise exceptions[0]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa4fed9ef0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:949: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     await self.sock_connect(sock, address)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa4fed9ef0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:473: in sock_connect\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     return await fut\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         _          = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         resolved   = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     def _sock_connect_cb(self, fut, sock, address):\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         if fut.cancelled():\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             return\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         try:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             if err != 0:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |                 # Jump to any except clause below.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >               raise OSError(err, f'Connect call failed {address}')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | err        = 111\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:503: ConnectionRefusedError\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _____________________________ test_flag_helper[1] ______________________________\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache_flag_client = <aiomcache.client.FlagClient object at 0x7ffa548a0210>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | value = 1\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     @pytest.mark.parametrize(\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         \"value\",\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         [\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             \"key\",\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             b\"bkey\",\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             False,\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             1,\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             None,\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             0.5,\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             [1, 2, 3],\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             tuple([1, 2, 3]),\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             [datetime.date(2015, 12, 28)],\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             bytes(\"!@#\", \"utf-8\"),\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             bytes(\"\uc548\ub155\ud558\uc138\uc694\", \"utf-8\"),\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     )\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     async def test_flag_helper(\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             mcache_flag_client: FlagClient[Any], value: object) -> None:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         key = b\"key:test_flag_helper\"\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >       await mcache_flag_client.set(key, value)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | key        = b'key:test_flag_helper'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache_flag_client = <aiomcache.client.FlagClient object at 0x7ffa548a0210>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | value      = 1\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py:385: \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/client.py:40: in wrapper\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     conn = await self._pool.acquire()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         args       = (b'key:test_flag_helper', 1)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         func       = <function FlagClient.set at 0x7ffa54e248c0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwargs     = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.client.FlagClient object at 0x7ffa548a0210>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:40: in acquire\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     _conn = await self._create_new_conn()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa548a0490>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:71: in _create_new_conn\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     self._host, self._port, **self.conn_args)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa548a0490>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/streams.py:77: in open_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     lambda: protocol, host, port, **kwds)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwds       = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         limit      = 65536\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         loop       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol   = <asyncio.streams.StreamReaderProtocol object at 0x7ffa548a0710>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         reader     = <StreamReader>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:962: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     raise exceptions[0]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa4fefc8c0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:949: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     await self.sock_connect(sock, address)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa4fefc8c0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:473: in sock_connect\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     return await fut\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         _          = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         resolved   = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     def _sock_connect_cb(self, fut, sock, address):\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         if fut.cancelled():\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             return\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         try:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             if err != 0:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |                 # Jump to any except clause below.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >               raise OSError(err, f'Connect call failed {address}')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | err        = 111\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:503: ConnectionRefusedError\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | ____________________________ test_flag_helper[None] ____________________________\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache_flag_client = <aiomcache.client.FlagClient object at 0x7ffa54d29210>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | value = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     @pytest.mark.parametrize(\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         \"value\",\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         [\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             \"key\",\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             b\"bkey\",\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             False,\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             1,\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             None,\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             0.5,\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             [1, 2, 3],\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             tuple([1, 2, 3]),\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             [datetime.date(2015, 12, 28)],\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             bytes(\"!@#\", \"utf-8\"),\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             bytes(\"\uc548\ub155\ud558\uc138\uc694\", \"utf-8\"),\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     )\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     async def test_flag_helper(\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             mcache_flag_client: FlagClient[Any], value: object) -> None:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         key = b\"key:test_flag_helper\"\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >       await mcache_flag_client.set(key, value)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | key        = b'key:test_flag_helper'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache_flag_client = <aiomcache.client.FlagClient object at 0x7ffa54d29210>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | value      = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py:385: \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/client.py:40: in wrapper\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     conn = await self._pool.acquire()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         args       = (b'key:test_flag_helper', None)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         func       = <function FlagClient.set at 0x7ffa54e248c0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwargs     = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.client.FlagClient object at 0x7ffa54d29210>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:40: in acquire\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     _conn = await self._create_new_conn()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa54d29d90>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:71: in _create_new_conn\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     self._host, self._port, **self.conn_args)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa54d29d90>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/streams.py:77: in open_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     lambda: protocol, host, port, **kwds)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwds       = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         limit      = 65536\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         loop       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol   = <asyncio.streams.StreamReaderProtocol object at 0x7ffa54d29c90>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         reader     = <StreamReader>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:962: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     raise exceptions[0]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa4fed9b90>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:949: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     await self.sock_connect(sock, address)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa4fed9b90>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:473: in sock_connect\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     return await fut\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         _          = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         resolved   = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     def _sock_connect_cb(self, fut, sock, address):\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         if fut.cancelled():\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             return\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         try:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             if err != 0:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |                 # Jump to any except clause below.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >               raise OSError(err, f'Connect call failed {address}')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | err        = 111\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:503: ConnectionRefusedError\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | ____________________________ test_flag_helper[0.5] _____________________________\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache_flag_client = <aiomcache.client.FlagClient object at 0x7ffa54b76750>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | value = 0.5\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     @pytest.mark.parametrize(\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         \"value\",\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         [\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             \"key\",\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             b\"bkey\",\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             False,\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             1,\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             None,\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             0.5,\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             [1, 2, 3],\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             tuple([1, 2, 3]),\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             [datetime.date(2015, 12, 28)],\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             bytes(\"!@#\", \"utf-8\"),\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             bytes(\"\uc548\ub155\ud558\uc138\uc694\", \"utf-8\"),\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     )\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     async def test_flag_helper(\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             mcache_flag_client: FlagClient[Any], value: object) -> None:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         key = b\"key:test_flag_helper\"\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >       await mcache_flag_client.set(key, value)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | key        = b'key:test_flag_helper'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache_flag_client = <aiomcache.client.FlagClient object at 0x7ffa54b76750>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | value      = 0.5\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py:385: \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/client.py:40: in wrapper\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     conn = await self._pool.acquire()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         args       = (b'key:test_flag_helper', 0.5)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         func       = <function FlagClient.set at 0x7ffa54e248c0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwargs     = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.client.FlagClient object at 0x7ffa54b76750>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:40: in acquire\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     _conn = await self._create_new_conn()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa54b76850>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:71: in _create_new_conn\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     self._host, self._port, **self.conn_args)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa54b76850>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/streams.py:77: in open_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     lambda: protocol, host, port, **kwds)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwds       = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         limit      = 65536\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         loop       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol   = <asyncio.streams.StreamReaderProtocol object at 0x7ffa54b763d0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         reader     = <StreamReader>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:962: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     raise exceptions[0]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa4fee2200>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:949: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     await self.sock_connect(sock, address)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa4fee2200>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:473: in sock_connect\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     return await fut\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         _          = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         resolved   = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     def _sock_connect_cb(self, fut, sock, address):\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         if fut.cancelled():\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             return\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         try:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             if err != 0:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |                 # Jump to any except clause below.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >               raise OSError(err, f'Connect call failed {address}')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | err        = 111\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:503: ConnectionRefusedError\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | ___________________________ test_flag_helper[value6] ___________________________\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache_flag_client = <aiomcache.client.FlagClient object at 0x7ffa54b84590>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | value = [1, 2, 3]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     @pytest.mark.parametrize(\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         \"value\",\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         [\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             \"key\",\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             b\"bkey\",\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             False,\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             1,\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             None,\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             0.5,\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             [1, 2, 3],\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             tuple([1, 2, 3]),\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             [datetime.date(2015, 12, 28)],\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             bytes(\"!@#\", \"utf-8\"),\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             bytes(\"\uc548\ub155\ud558\uc138\uc694\", \"utf-8\"),\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     )\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     async def test_flag_helper(\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             mcache_flag_client: FlagClient[Any], value: object) -> None:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         key = b\"key:test_flag_helper\"\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >       await mcache_flag_client.set(key, value)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | key        = b'key:test_flag_helper'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache_flag_client = <aiomcache.client.FlagClient object at 0x7ffa54b84590>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | value      = [1, 2, 3]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py:385: \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/client.py:40: in wrapper\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     conn = await self._pool.acquire()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         args       = (b'key:test_flag_helper', [1, 2, 3])\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         func       = <function FlagClient.set at 0x7ffa54e248c0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwargs     = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.client.FlagClient object at 0x7ffa54b84590>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:40: in acquire\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     _conn = await self._create_new_conn()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa54b84650>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:71: in _create_new_conn\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     self._host, self._port, **self.conn_args)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa54b84650>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/streams.py:77: in open_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     lambda: protocol, host, port, **kwds)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwds       = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         limit      = 65536\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         loop       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol   = <asyncio.streams.StreamReaderProtocol object at 0x7ffa54b84ad0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         reader     = <StreamReader>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:962: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     raise exceptions[0]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa4fee2440>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:949: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     await self.sock_connect(sock, address)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa4fee2440>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:473: in sock_connect\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     return await fut\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         _          = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         resolved   = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     def _sock_connect_cb(self, fut, sock, address):\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         if fut.cancelled():\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             return\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         try:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             if err != 0:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |                 # Jump to any except clause below.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >               raise OSError(err, f'Connect call failed {address}')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | err        = 111\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:503: ConnectionRefusedError\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | ___________________________ test_flag_helper[value7] ___________________________\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache_flag_client = <aiomcache.client.FlagClient object at 0x7ffa4fe9c410>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | value = (1, 2, 3)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     @pytest.mark.parametrize(\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         \"value\",\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         [\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             \"key\",\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             b\"bkey\",\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             False,\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             1,\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             None,\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             0.5,\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             [1, 2, 3],\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             tuple([1, 2, 3]),\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             [datetime.date(2015, 12, 28)],\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             bytes(\"!@#\", \"utf-8\"),\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             bytes(\"\uc548\ub155\ud558\uc138\uc694\", \"utf-8\"),\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     )\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     async def test_flag_helper(\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             mcache_flag_client: FlagClient[Any], value: object) -> None:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         key = b\"key:test_flag_helper\"\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >       await mcache_flag_client.set(key, value)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | key        = b'key:test_flag_helper'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache_flag_client = <aiomcache.client.FlagClient object at 0x7ffa4fe9c410>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | value      = (1, 2, 3)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py:385: \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/client.py:40: in wrapper\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     conn = await self._pool.acquire()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         args       = (b'key:test_flag_helper', (1, 2, 3))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         func       = <function FlagClient.set at 0x7ffa54e248c0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwargs     = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.client.FlagClient object at 0x7ffa4fe9c410>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:40: in acquire\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     _conn = await self._create_new_conn()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa4fe9c7d0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:71: in _create_new_conn\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     self._host, self._port, **self.conn_args)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa4fe9c7d0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/streams.py:77: in open_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     lambda: protocol, host, port, **kwds)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwds       = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         limit      = 65536\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         loop       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol   = <asyncio.streams.StreamReaderProtocol object at 0x7ffa4fe9cd10>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         reader     = <StreamReader>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:962: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     raise exceptions[0]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa4fee2e60>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:949: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     await self.sock_connect(sock, address)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa4fee2e60>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:473: in sock_connect\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     return await fut\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         _          = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         resolved   = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     def _sock_connect_cb(self, fut, sock, address):\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         if fut.cancelled():\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             return\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         try:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             if err != 0:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |                 # Jump to any except clause below.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >               raise OSError(err, f'Connect call failed {address}')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | err        = 111\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:503: ConnectionRefusedError\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | ___________________________ test_flag_helper[value8] ___________________________\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache_flag_client = <aiomcache.client.FlagClient object at 0x7ffa4ff67310>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | value = [datetime.date(2015, 12, 28)]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     @pytest.mark.parametrize(\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         \"value\",\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         [\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             \"key\",\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             b\"bkey\",\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             False,\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             1,\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             None,\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             0.5,\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             [1, 2, 3],\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             tuple([1, 2, 3]),\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             [datetime.date(2015, 12, 28)],\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             bytes(\"!@#\", \"utf-8\"),\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             bytes(\"\uc548\ub155\ud558\uc138\uc694\", \"utf-8\"),\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     )\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     async def test_flag_helper(\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             mcache_flag_client: FlagClient[Any], value: object) -> None:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         key = b\"key:test_flag_helper\"\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >       await mcache_flag_client.set(key, value)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | key        = b'key:test_flag_helper'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache_flag_client = <aiomcache.client.FlagClient object at 0x7ffa4ff67310>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | value      = [datetime.date(2015, 12, 28)]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py:385: \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/client.py:40: in wrapper\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     conn = await self._pool.acquire()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         args       = (b'key:test_flag_helper', [datetime.date(2015, 12, 28)])\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         func       = <function FlagClient.set at 0x7ffa54e248c0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwargs     = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.client.FlagClient object at 0x7ffa4ff67310>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:40: in acquire\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     _conn = await self._create_new_conn()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa4ff673d0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:71: in _create_new_conn\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     self._host, self._port, **self.conn_args)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa4ff673d0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/streams.py:77: in open_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     lambda: protocol, host, port, **kwds)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwds       = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         limit      = 65536\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         loop       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol   = <asyncio.streams.StreamReaderProtocol object at 0x7ffa4ff67910>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         reader     = <StreamReader>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:962: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     raise exceptions[0]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa5494a830>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:949: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     await self.sock_connect(sock, address)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa5494a830>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:473: in sock_connect\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     return await fut\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         _          = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         resolved   = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     def _sock_connect_cb(self, fut, sock, address):\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         if fut.cancelled():\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             return\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         try:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             if err != 0:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |                 # Jump to any except clause below.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >               raise OSError(err, f'Connect call failed {address}')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | err        = 111\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:503: ConnectionRefusedError\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | ____________________________ test_flag_helper[!@#] _____________________________\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache_flag_client = <aiomcache.client.FlagClient object at 0x7ffa54ca4d10>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | value = b'!@#'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     @pytest.mark.parametrize(\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         \"value\",\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         [\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             \"key\",\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             b\"bkey\",\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             False,\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             1,\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             None,\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             0.5,\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             [1, 2, 3],\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             tuple([1, 2, 3]),\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             [datetime.date(2015, 12, 28)],\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             bytes(\"!@#\", \"utf-8\"),\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             bytes(\"\uc548\ub155\ud558\uc138\uc694\", \"utf-8\"),\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     )\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     async def test_flag_helper(\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             mcache_flag_client: FlagClient[Any], value: object) -> None:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         key = b\"key:test_flag_helper\"\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >       await mcache_flag_client.set(key, value)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | key        = b'key:test_flag_helper'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache_flag_client = <aiomcache.client.FlagClient object at 0x7ffa54ca4d10>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | value      = b'!@#'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py:385: \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/client.py:40: in wrapper\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     conn = await self._pool.acquire()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         args       = (b'key:test_flag_helper', b'!@#')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         func       = <function FlagClient.set at 0x7ffa54e248c0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwargs     = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.client.FlagClient object at 0x7ffa54ca4d10>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:40: in acquire\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     _conn = await self._create_new_conn()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa54ca4cd0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:71: in _create_new_conn\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     self._host, self._port, **self.conn_args)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa54ca4cd0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/streams.py:77: in open_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     lambda: protocol, host, port, **kwds)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwds       = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         limit      = 65536\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         loop       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol   = <asyncio.streams.StreamReaderProtocol object at 0x7ffa54d29690>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         reader     = <StreamReader>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:962: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     raise exceptions[0]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa5494ab90>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:949: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     await self.sock_connect(sock, address)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa5494ab90>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:473: in sock_connect\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     return await fut\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         _          = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         resolved   = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     def _sock_connect_cb(self, fut, sock, address):\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         if fut.cancelled():\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             return\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         try:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             if err != 0:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |                 # Jump to any except clause below.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >               raise OSError(err, f'Connect call failed {address}')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | err        = 111\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:503: ConnectionRefusedError\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ test_flag_helper[\\xec\\x95\\x88\\xeb\\x85\\x95\\xed\\x95\\x98\\xec\\x84\\xb8\\xec\\x9a\\x94] _\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache_flag_client = <aiomcache.client.FlagClient object at 0x7ffa54925a50>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | value = b'\\xec\\x95\\x88\\xeb\\x85\\x95\\xed\\x95\\x98\\xec\\x84\\xb8\\xec\\x9a\\x94'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     @pytest.mark.parametrize(\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         \"value\",\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         [\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             \"key\",\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             b\"bkey\",\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             False,\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             1,\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             None,\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             0.5,\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             [1, 2, 3],\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             tuple([1, 2, 3]),\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             [datetime.date(2015, 12, 28)],\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             bytes(\"!@#\", \"utf-8\"),\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             bytes(\"\uc548\ub155\ud558\uc138\uc694\", \"utf-8\"),\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     )\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     async def test_flag_helper(\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             mcache_flag_client: FlagClient[Any], value: object) -> None:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         key = b\"key:test_flag_helper\"\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >       await mcache_flag_client.set(key, value)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | key        = b'key:test_flag_helper'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache_flag_client = <aiomcache.client.FlagClient object at 0x7ffa54925a50>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | value      = b'\\xec\\x95\\x88\\xeb\\x85\\x95\\xed\\x95\\x98\\xec\\x84\\xb8\\xec\\x9a\\x94'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py:385: \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/client.py:40: in wrapper\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     conn = await self._pool.acquire()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         args       = (b'key:test_flag_helper', b'\\xec\\x95\\x88\\xeb\\x85\\x95\\xed\\x95\\x98\\xec\\x84\\xb8\\xec\\x9a\\x94')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         func       = <function FlagClient.set at 0x7ffa54e248c0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwargs     = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.client.FlagClient object at 0x7ffa54925a50>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:40: in acquire\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     _conn = await self._create_new_conn()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa54925650>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:71: in _create_new_conn\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     self._host, self._port, **self.conn_args)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa54925650>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/streams.py:77: in open_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     lambda: protocol, host, port, **kwds)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwds       = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         limit      = 65536\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         loop       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol   = <asyncio.streams.StreamReaderProtocol object at 0x7ffa549253d0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         reader     = <StreamReader>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:962: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     raise exceptions[0]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa54927200>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:949: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     await self.sock_connect(sock, address)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa54927200>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:473: in sock_connect\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     return await fut\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         _          = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         resolved   = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     def _sock_connect_cb(self, fut, sock, address):\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         if fut.cancelled():\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             return\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         try:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             if err != 0:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |                 # Jump to any except clause below.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >               raise OSError(err, f'Connect call failed {address}')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | err        = 111\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:503: ConnectionRefusedError\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _______________ test_objects_not_supported_without_flag_handler ________________\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache = <aiomcache.client.Client object at 0x7ffa54bb8f90>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     async def test_objects_not_supported_without_flag_handler(mcache: Client) -> None:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         key = b\"key:test_objects_not_supported_without_flag_handler\"\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         date_value = datetime.date(2015, 12, 28)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         with pytest.raises(ValidationException):\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >           await mcache.set(key, date_value)  # type: ignore[arg-type]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | date_value = datetime.date(2015, 12, 28)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | key        = b'key:test_objects_not_supported_without_flag_handler'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache     = <aiomcache.client.Client object at 0x7ffa54bb8f90>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py:396: \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/client.py:40: in wrapper\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     conn = await self._pool.acquire()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         args       = (b'key:test_objects_not_supported_without_flag_handler', datetime.date(2015, 12, 28))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         func       = <function FlagClient.set at 0x7ffa54e248c0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwargs     = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.client.Client object at 0x7ffa54bb8f90>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:40: in acquire\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     _conn = await self._create_new_conn()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa54bb8b10>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:71: in _create_new_conn\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     self._host, self._port, **self.conn_args)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa54bb8b10>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/streams.py:77: in open_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     lambda: protocol, host, port, **kwds)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwds       = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         limit      = 65536\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         loop       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol   = <asyncio.streams.StreamReaderProtocol object at 0x7ffa54bb8610>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         reader     = <StreamReader>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:962: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     raise exceptions[0]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa54927950>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:949: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     await self.sock_connect(sock, address)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa54927950>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:473: in sock_connect\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     return await fut\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         _          = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         resolved   = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     def _sock_connect_cb(self, fut, sock, address):\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         if fut.cancelled():\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             return\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         try:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             if err != 0:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |                 # Jump to any except clause below.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >               raise OSError(err, f'Connect call failed {address}')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | err        = 111\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:503: ConnectionRefusedError\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _________________ test_flag_handler_invoked_only_when_expected _________________\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache_flag_client = <aiomcache.client.FlagClient object at 0x7ffa4fe79390>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | demo_flag_helper = <tests.flag_helper.FlagHelperDemo object at 0x7ffa54cc2810>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     async def test_flag_handler_invoked_only_when_expected(\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             mcache_flag_client: FlagClient[Any], demo_flag_helper: FlagHelperDemo) -> None:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         key = b\"key:test_flag_handler_invoked_only_when_expected\"\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         orig_get_count = demo_flag_helper.get_invocation_count\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         orig_set_count = demo_flag_helper.set_invocation_count\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         # should be invoked on non-byte values\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         date_value = datetime.date(2015, 12, 28)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >       await mcache_flag_client.set(key, date_value)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | date_value = datetime.date(2015, 12, 28)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | demo_flag_helper = <tests.flag_helper.FlagHelperDemo object at 0x7ffa54cc2810>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | key        = b'key:test_flag_handler_invoked_only_when_expected'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache_flag_client = <aiomcache.client.FlagClient object at 0x7ffa4fe79390>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | orig_get_count = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | orig_set_count = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/commands_test.py:413: \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/client.py:40: in wrapper\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     conn = await self._pool.acquire()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         args       = (b'key:test_flag_handler_invoked_only_when_expected', datetime.date(2015, 12, 28))\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         func       = <function FlagClient.set at 0x7ffa54e248c0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwargs     = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.client.FlagClient object at 0x7ffa4fe79390>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:40: in acquire\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     _conn = await self._create_new_conn()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa54026650>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:71: in _create_new_conn\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     self._host, self._port, **self.conn_args)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa54026650>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/streams.py:77: in open_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     lambda: protocol, host, port, **kwds)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwds       = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         limit      = 65536\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         loop       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol   = <asyncio.streams.StreamReaderProtocol object at 0x7ffa54026090>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         reader     = <StreamReader>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:962: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     raise exceptions[0]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa5494a4d0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:949: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     await self.sock_connect(sock, address)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa5494a4d0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:473: in sock_connect\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     return await fut\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         _          = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         resolved   = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     def _sock_connect_cb(self, fut, sock, address):\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         if fut.cancelled():\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             return\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         try:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             if err != 0:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |                 # Jump to any except clause below.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >               raise OSError(err, f'Connect call failed {address}')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | err        = 111\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:503: ConnectionRefusedError\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | ________________ test_ssl_client_fails_against_plaintext_server ________________\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache_params = {'host': 'localhost', 'port': 11211}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     async def test_ssl_client_fails_against_plaintext_server(\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         mcache_params: McacheParams,\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     ) -> None:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         client = Client(**mcache_params, conn_args={\"ssl\": True})\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         # If SSL was correctly enabled, this should\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         # fail, since SSL isn't enabled on the memcache\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         # server.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         with pytest.raises(ssl.SSLError):\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >           await client.get(b\"key\")\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | client     = <aiomcache.client.Client object at 0x7ffa4fed5f90>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache_params = {'host': 'localhost', 'port': 11211}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/conn_args_test.py:39: \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/client.py:40: in wrapper\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     conn = await self._pool.acquire()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         args       = (b'key',)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         func       = <function FlagClient.get at 0x7ffa54e243b0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwargs     = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.client.Client object at 0x7ffa4fed5f90>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:40: in acquire\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     _conn = await self._create_new_conn()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa4fed5950>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:71: in _create_new_conn\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     self._host, self._port, **self.conn_args)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa4fed5950>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/streams.py:77: in open_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     lambda: protocol, host, port, **kwds)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwds       = {'ssl': True}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         limit      = 65536\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         loop       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol   = <asyncio.streams.StreamReaderProtocol object at 0x7ffa4fed5d50>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         reader     = <StreamReader>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:962: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     raise exceptions[0]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa4ff1d5f0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = True\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:949: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     await self.sock_connect(sock, address)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa4ff1d5f0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = True\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:473: in sock_connect\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     return await fut\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         _          = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         resolved   = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     def _sock_connect_cb(self, fut, sock, address):\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         if fut.cancelled():\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             return\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         try:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             if err != 0:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |                 # Jump to any except clause below.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >               raise OSError(err, f'Connect call failed {address}')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | err        = 111\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:503: ConnectionRefusedError\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | __________________________ test_pool_acquire_release ___________________________\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache_params = {'host': 'localhost', 'port': 11211}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     async def test_pool_acquire_release(mcache_params: McacheParams) -> None:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         pool = MemcachePool(minsize=1, maxsize=5, **mcache_params)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >       conn = await pool.acquire()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache_params = {'host': 'localhost', 'port': 11211}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | pool       = <aiomcache.pool.MemcachePool object at 0x7ffa54b62d10>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/pool_test.py:20: \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:40: in acquire\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     _conn = await self._create_new_conn()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa54b62d10>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:71: in _create_new_conn\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     self._host, self._port, **self.conn_args)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa54b62d10>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/streams.py:77: in open_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     lambda: protocol, host, port, **kwds)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwds       = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         limit      = 65536\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         loop       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol   = <asyncio.streams.StreamReaderProtocol object at 0x7ffa54b62050>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         reader     = <StreamReader>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:962: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     raise exceptions[0]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa4ff1df80>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:949: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     await self.sock_connect(sock, address)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa4ff1df80>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:473: in sock_connect\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     return await fut\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         _          = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         resolved   = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     def _sock_connect_cb(self, fut, sock, address):\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         if fut.cancelled():\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             return\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         try:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             if err != 0:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |                 # Jump to any except clause below.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >               raise OSError(err, f'Connect call failed {address}')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | err        = 111\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:503: ConnectionRefusedError\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | __________________________ test_pool_acquire_release2 __________________________\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache_params = {'host': 'localhost', 'port': 11211}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     async def test_pool_acquire_release2(mcache_params: McacheParams) -> None:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         pool = MemcachePool(minsize=1, maxsize=5, **mcache_params)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         reader, writer = await asyncio.open_connection(\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >           mcache_params[\"host\"], mcache_params[\"port\"])\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache_params = {'host': 'localhost', 'port': 11211}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | pool       = <aiomcache.pool.MemcachePool object at 0x7ffa54b97590>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/pool_test.py:30: \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/streams.py:77: in open_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     lambda: protocol, host, port, **kwds)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwds       = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         limit      = 65536\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         loop       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol   = <asyncio.streams.StreamReaderProtocol object at 0x7ffa54b97350>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         reader     = <StreamReader>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:962: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     raise exceptions[0]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa4febd290>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:949: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     await self.sock_connect(sock, address)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa4febd290>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:473: in sock_connect\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     return await fut\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         _          = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         resolved   = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     def _sock_connect_cb(self, fut, sock, address):\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         if fut.cancelled():\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             return\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         try:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             if err != 0:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |                 # Jump to any except clause below.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >               raise OSError(err, f'Connect call failed {address}')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | err        = 111\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:503: ConnectionRefusedError\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _______________________________ test_pool_clear ________________________________\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache_params = {'host': 'localhost', 'port': 11211}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     async def test_pool_clear(mcache_params: McacheParams) -> None:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         pool = MemcachePool(minsize=1, maxsize=5, **mcache_params)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >       conn = await pool.acquire()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache_params = {'host': 'localhost', 'port': 11211}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | pool       = <aiomcache.pool.MemcachePool object at 0x7ffa54c2a510>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/pool_test.py:45: \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:40: in acquire\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     _conn = await self._create_new_conn()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa54c2a510>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:71: in _create_new_conn\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     self._host, self._port, **self.conn_args)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa54c2a510>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/streams.py:77: in open_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     lambda: protocol, host, port, **kwds)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwds       = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         limit      = 65536\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         loop       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol   = <asyncio.streams.StreamReaderProtocol object at 0x7ffa54c2a950>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         reader     = <StreamReader>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:962: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     raise exceptions[0]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa4febde60>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:949: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     await self.sock_connect(sock, address)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa4febde60>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:473: in sock_connect\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     return await fut\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         _          = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         resolved   = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     def _sock_connect_cb(self, fut, sock, address):\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         if fut.cancelled():\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             return\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         try:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             if err != 0:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |                 # Jump to any except clause below.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >               raise OSError(err, f'Connect call failed {address}')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | err        = 111\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:503: ConnectionRefusedError\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _________ test_acquire_dont_create_new_connection_if_have_conn_in_pool _________\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache_params = {'host': 'localhost', 'port': 11211}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     async def test_acquire_dont_create_new_connection_if_have_conn_in_pool(\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         mcache_params: McacheParams,\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     ) -> None:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         pool = MemcachePool(minsize=1, maxsize=5, **mcache_params)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         assert pool.size() == 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         # Add a valid connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >       _conn = await pool._create_new_conn()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache_params = {'host': 'localhost', 'port': 11211}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | pool       = <aiomcache.pool.MemcachePool object at 0x7ffa548a8d50>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/pool_test.py:59: \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:71: in _create_new_conn\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     self._host, self._port, **self.conn_args)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa548a8d50>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/streams.py:77: in open_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     lambda: protocol, host, port, **kwds)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwds       = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         limit      = 65536\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         loop       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol   = <asyncio.streams.StreamReaderProtocol object at 0x7ffa548a8350>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         reader     = <StreamReader>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:962: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     raise exceptions[0]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa54b9a8c0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:949: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     await self.sock_connect(sock, address)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa54b9a8c0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:473: in sock_connect\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     return await fut\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         _          = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         resolved   = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     def _sock_connect_cb(self, fut, sock, address):\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         if fut.cancelled():\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             return\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         try:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             if err != 0:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |                 # Jump to any except clause below.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >               raise OSError(err, f'Connect call failed {address}')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | err        = 111\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:503: ConnectionRefusedError\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | __________________________ test_acquire_limit_maxsize __________________________\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache_params = {'host': 'localhost', 'port': 11211}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     async def test_acquire_limit_maxsize(mcache_params: McacheParams) -> None:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         pool = MemcachePool(minsize=1, maxsize=1, **mcache_params)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         assert pool.size() == 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         # Create up to max connections\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >       _conn = await pool.acquire()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache_params = {'host': 'localhost', 'port': 11211}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | pool       = <aiomcache.pool.MemcachePool object at 0x7ffa54043050>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/pool_test.py:76: \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:40: in acquire\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     _conn = await self._create_new_conn()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa54043050>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:71: in _create_new_conn\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     self._host, self._port, **self.conn_args)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa54043050>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/streams.py:77: in open_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     lambda: protocol, host, port, **kwds)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwds       = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         limit      = 65536\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         loop       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol   = <asyncio.streams.StreamReaderProtocol object at 0x7ffa54043110>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         reader     = <StreamReader>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:962: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     raise exceptions[0]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa4ff1d170>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:949: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     await self.sock_connect(sock, address)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa4ff1d170>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:473: in sock_connect\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     return await fut\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         _          = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         resolved   = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     def _sock_connect_cb(self, fut, sock, address):\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         if fut.cancelled():\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             return\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         try:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             if err != 0:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |                 # Jump to any except clause below.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >               raise OSError(err, f'Connect call failed {address}')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | err        = 111\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:503: ConnectionRefusedError\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | ________________________ test_acquire_task_cancellation ________________________\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache_params = {'host': 'localhost', 'port': 11211}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     async def test_acquire_task_cancellation(mcache_params: McacheParams) -> None:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         class TestClient(Client):\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             def __init__(self, pool_size: int = 4):\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |                 self._pool = MemcachePool(\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |                     minsize=pool_size, maxsize=pool_size,\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |                     **mcache_params)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             @acquire\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             async def acquire_wait_release(self, conn: Connection) -> str:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |                 assert self._pool.size() <= pool_size\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |                 await asyncio.sleep(random.uniform(0.01, 0.02))  # noqa: S311\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |                 return \"foo\"\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         pool_size = 4\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         client = TestClient(pool_size=pool_size)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         tasks = [\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             asyncio.wait_for(\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |                 client.acquire_wait_release(),\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |                 random.uniform(1, 2)) for x in range(1000)  # noqa: S311\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         results = await asyncio.gather(*tasks, return_exceptions=True)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         assert client._pool.size() <= pool_size\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         assert len(client._pool._in_use) == 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >       assert \"foo\" in results\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | E       assert 'foo' in [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\"), ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\"), ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\"), ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\"), ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\"), ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\"), ...]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | TestClient = <class 'tests.pool_test.test_acquire_task_cancellation.<locals>.TestClient'>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | client     = <tests.pool_test.test_acquire_task_cancellation.<locals>.TestClient object at 0x7ffa54d0d190>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache_params = {'host': 'localhost', 'port': 11211}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | pool_size  = 4\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | results    = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\"), ConnectionRefusedError(111, \"Connect call fa...nnect call failed ('127.0.0.1', 11211)\"), ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\"), ...]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tasks      = [<coroutine object wait_for at 0x7ffa54b9ae60>, <coroutine object wait_for at 0x7ffa54b9af80>, <coroutine object wait_... at 0x7ffa54b93200>, <coroutine object wait_for at 0x7ffa54b93320>, <coroutine object wait_for at 0x7ffa54b93440>, ...]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/pool_test.py:120: AssertionError\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | ______________________ test_maxsize_greater_than_minsize _______________________\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache_params = {'host': 'localhost', 'port': 11211}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     async def test_maxsize_greater_than_minsize(mcache_params: McacheParams) -> None:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         pool = MemcachePool(minsize=5, maxsize=1, **mcache_params)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >       conn = await pool.acquire()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache_params = {'host': 'localhost', 'port': 11211}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | pool       = <aiomcache.pool.MemcachePool object at 0x7ffa54c28ed0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/pool_test.py:126: \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:40: in acquire\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     _conn = await self._create_new_conn()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa54c28ed0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:71: in _create_new_conn\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     self._host, self._port, **self.conn_args)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa54c28ed0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/streams.py:77: in open_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     lambda: protocol, host, port, **kwds)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwds       = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         limit      = 65536\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         loop       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol   = <asyncio.streams.StreamReaderProtocol object at 0x7ffa54c28210>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         reader     = <StreamReader>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:962: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     raise exceptions[0]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa4c4e08c0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:949: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     await self.sock_connect(sock, address)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa4c4e08c0>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:473: in sock_connect\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     return await fut\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         _          = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         resolved   = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     def _sock_connect_cb(self, fut, sock, address):\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         if fut.cancelled():\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             return\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         try:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             if err != 0:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |                 # Jump to any except clause below.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >               raise OSError(err, f'Connect call failed {address}')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | err        = 111\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:503: ConnectionRefusedError\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | ________________________________ test_0_minsize ________________________________\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache_params = {'host': 'localhost', 'port': 11211}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     async def test_0_minsize(mcache_params: McacheParams) -> None:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         pool = MemcachePool(minsize=0, maxsize=5, **mcache_params)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >       conn = await pool.acquire()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | mcache_params = {'host': 'localhost', 'port': 11211}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | pool       = <aiomcache.pool.MemcachePool object at 0x7ffa4c33f450>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | tests/pool_test.py:135: \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:40: in acquire\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     _conn = await self._create_new_conn()\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa4c33f450>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | aiomcache/pool.py:71: in _create_new_conn\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     self._host, self._port, **self.conn_args)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <aiomcache.pool.MemcachePool object at 0x7ffa4c33f450>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/streams.py:77: in open_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     lambda: protocol, host, port, **kwds)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         kwds       = {}\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         limit      = 65536\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         loop       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol   = <asyncio.streams.StreamReaderProtocol object at 0x7ffa4c33f410>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         reader     = <StreamReader>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:962: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     raise exceptions[0]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa2c56db00>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py:949: in create_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     await self.sock_connect(sock, address)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         cname      = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         exceptions = [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         family     = <AddressFamily.AF_INET: 2>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         flags      = 0\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         host       = 'localhost'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         infos      = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         local_addr = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         port       = 11211\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         proto      = 6\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         protocol_factory = <function open_connection.<locals>.<lambda> at 0x7ffa2c56db00>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         server_hostname = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl        = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         ssl_handshake_timeout = None\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         type       = <SocketKind.SOCK_STREAM: 1>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:473: in sock_connect\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     return await fut\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         _          = ''\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         resolved   = [(<AddressFamily.AF_INET: 2>, <SocketKind.SOCK_STREAM: 1>, 6, '', ('127.0.0.1', 11211))]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     def _sock_connect_cb(self, fut, sock, address):\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         if fut.cancelled():\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             return\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |     \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |         try:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             err = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |             if err != 0:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   |                 # Jump to any except clause below.\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | >               raise OSError(err, f'Connect call failed {address}')\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | E               ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | address    = ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | err        = 111\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | fut        = <Future finished exception=ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\")>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | self       = <_UnixSelectorEventLoop running=False closed=False debug=False>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | sock       = <socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6>\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/selector_events.py:503: ConnectionRefusedError\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | - generated xml file: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/aio-libs-aiomcache/report.xml -\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | ============================= slowest 10 durations =============================\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | 0.71s call     tests/pool_test.py::test_acquire_task_cancellation\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | 0.02s setup    tests/commands_test.py::test_close\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | 0.02s teardown tests/commands_test.py::test_add\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | 0.02s teardown tests/commands_test.py::test_flag_helper[!@#]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | 0.01s teardown tests/commands_test.py::test_flag_helper[1]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | 0.01s teardown tests/commands_test.py::test_set_errors\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | 0.01s teardown tests/pool_test.py::test_maxsize_greater_than_minsize\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | 0.01s teardown tests/pool_test.py::test_bad_connection\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | 0.01s setup    tests/commands_test.py::test_flag_handler_invoked_only_when_expected\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | 0.01s call     tests/commands_test.py::test_version\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | =========================== short test summary info ============================\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | SKIPPED [1] tests/conn_args_test.py:12: AsyncMock requires python3.8\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | FAILED tests/commands_test.py::test_version - ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | FAILED tests/commands_test.py::test_flush_all - ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | FAILED tests/commands_test.py::test_set_get - ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | FAILED tests/commands_test.py::test_gets - ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | FAILED tests/commands_test.py::test_multi_get - ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | FAILED tests/commands_test.py::test_multi_get_doubling_keys - ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | FAILED tests/commands_test.py::test_set_expire - ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | FAILED tests/commands_test.py::test_set_errors - ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | FAILED tests/commands_test.py::test_gets_cas - ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | FAILED tests/commands_test.py::test_cas_missing - ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | FAILED tests/commands_test.py::test_add - ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | FAILED tests/commands_test.py::test_replace - ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | FAILED tests/commands_test.py::test_append - ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | FAILED tests/commands_test.py::test_prepend - ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | FAILED tests/commands_test.py::test_delete - ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | FAILED tests/commands_test.py::test_delete_key_not_exists - ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | FAILED tests/commands_test.py::test_incr - ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | FAILED tests/commands_test.py::test_incr_errors - ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | FAILED tests/commands_test.py::test_decr - ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | FAILED tests/commands_test.py::test_decr_errors - ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | FAILED tests/commands_test.py::test_stats - ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | FAILED tests/commands_test.py::test_touch - ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | FAILED tests/commands_test.py::test_flag_helper[key] - ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | FAILED tests/commands_test.py::test_flag_helper[bkey] - ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | FAILED tests/commands_test.py::test_flag_helper[False] - ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | FAILED tests/commands_test.py::test_flag_helper[1] - ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | FAILED tests/commands_test.py::test_flag_helper[None] - ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | FAILED tests/commands_test.py::test_flag_helper[0.5] - ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | FAILED tests/commands_test.py::test_flag_helper[value6] - ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | FAILED tests/commands_test.py::test_flag_helper[value7] - ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | FAILED tests/commands_test.py::test_flag_helper[value8] - ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | FAILED tests/commands_test.py::test_flag_helper[!@#] - ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | FAILED tests/commands_test.py::test_flag_helper[\\xec\\x95\\x88\\xeb\\x85\\x95\\xed\\x95\\x98\\xec\\x84\\xb8\\xec\\x9a\\x94] - ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | FAILED tests/commands_test.py::test_objects_not_supported_without_flag_handler - ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | FAILED tests/commands_test.py::test_flag_handler_invoked_only_when_expected - ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | FAILED tests/conn_args_test.py::test_ssl_client_fails_against_plaintext_server - ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | FAILED tests/pool_test.py::test_pool_acquire_release - ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | FAILED tests/pool_test.py::test_pool_acquire_release2 - ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | FAILED tests/pool_test.py::test_pool_clear - ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | FAILED tests/pool_test.py::test_acquire_dont_create_new_connection_if_have_conn_in_pool - ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | FAILED tests/pool_test.py::test_acquire_limit_maxsize - ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | FAILED tests/pool_test.py::test_acquire_task_cancellation - assert 'foo' in [ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\"), ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\"), ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\"), ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\"), ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\"), ConnectionRefusedError(111, \"Connect call failed ('127.0.0.1', 11211)\"), ...]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | FAILED tests/pool_test.py::test_maxsize_greater_than_minsize - ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | FAILED tests/pool_test.py::test_0_minsize - ConnectionRefusedError: [Errno 111] Connect call failed ('127.0.0.1', 11211)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   | =================== 44 failed, 22 passed, 1 skipped in 7.01s ===================\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ]   \u274c  Failure - Main Run tests\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ] exitcode '1': failure\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Checking dist/aiomcache-0.8.1-py3-none-any.whl: \u001b[32mPASSED\u001b[0m\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Checking dist/aiomcache-0.8.1.tar.gz: \u001b[32mPASSED\u001b[0m\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \u2705  Success - Main Run twine checker\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Tests ] \ud83c\udfc1  Job failed\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter] \u2b50 Run Post Cache PyPI\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-cache@v2/dist/save/index.js] user= workdir=\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udcac  ::debug::Checking zstd --version\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udcac  ::debug::*** zstd command line interface 64-bits v1.5.0, by Yann Collet ***\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udcac  ::debug::Reserving Cache\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:43167/_apis/artifactcache/caches\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udcac  ::debug::Cache ID: 1\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udcac  ::debug::implicitDescendants 'false'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udcac  ::debug::followSymbolicLinks 'true'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udcac  ::debug::implicitDescendants 'false'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udcac  ::debug::omitBrokenSymbolicLinks 'true'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udcac  ::debug::Search path '/home/runneradmin/.cache/pip'\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udcac  ::debug::Matched: ../../../home/runneradmin/.cache/pip\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udcac  ::debug::Cache Paths:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udcac  ::debug::[\"../../../home/runneradmin/.cache/pip\"]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udcac  ::debug::Archive Path: /tmp/8204892f-c7ca-4aef-859a-4c64decb899c/cache.tzst\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | [command]/usr/bin/tar --posix --use-compress-program zstd -T0 -cf cache.tzst -P -C /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/aio-libs-aiomcache --files-from manifest.txt\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udcac  ::debug::File Size: 26475983\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udcac  ::debug::Saving Cache (ID: 1)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udcac  ::debug::Upload cache\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:43167/_apis/artifactcache/caches/1\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udcac  ::debug::Upload concurrency: 4\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udcac  ::debug::Upload chunk size: 33554432\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udcac  ::debug::Awaiting all uploads\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udcac  ::debug::Uploading chunk of size 26475983 bytes at offset 0 with content range: bytes 0-26475982/*\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udcac  ::debug::Commiting cache\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | Cache Size: ~25 MB (26475983 B)\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:43167/_apis/artifactcache/caches/1\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udcac  ::debug::commitCache - Attempt 1 of 2 failed with error: Cache service responded with 500\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udcac  ::debug::commitCache - Error is not retryable\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   | [warning]commitCache failed: Cache service responded with 500\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \u2705  Success - Post Cache PyPI\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter] \u2b50 Run Post Setup Python\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v2/dist/cache-save/index.js] user= workdir=\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter]   \u2705  Success - Post Setup Python\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/Linter] \ud83c\udfc1  Job succeeded\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/check ] \ud83d\ude80  Start image=crawlergpt:latest\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/check ]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/check ]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/check ]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/check ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/aio-libs-aiomcache] user=0 workdir=\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/check ]   \u2601  git clone 'https://github.com/re-actors/alls-green' # ref=release/v1\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/check ] \u2b50 Run Pre Decide whether the needed jobs succeeded or failed\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/check ]   \u2705  Success - Pre Decide whether the needed jobs succeeded or failed\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/check ] \u2b50 Run Main Decide whether the needed jobs succeeded or failed\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/check ]   \ud83d\udc33  docker cp src=/tmp/act-cache/8111104d-8449-4159-a6b0-18044a8b5466/act/re-actors-alls-green@release-v1/ dst=/var/run/act/actions/re-actors-alls-green@release-v1/\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/check ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/re-actors-alls-green@release-v1/] user=0 workdir=\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/check ] \u2b50 Run Main Decide whether the input jobs succeeded or failed\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/check ]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/0-composite-outcome.sh] user= workdir=\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/check ]   | # \u274c Some of the required to succeed jobs failed \ud83d\ude22\ud83d\ude22\ud83d\ude22\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/check ]   | \n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/check ]   | \ud83d\udcdd Job statuses:\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/check ]   | \ud83d\udcdd lint \u2192 \u2713 success [required to succeed]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/check ]   | \ud83d\udcdd test \u2192 \u274c failure [required to succeed]\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/check ]   \u274c  Failure - Main Decide whether the input jobs succeeded or failed\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/check ]   \u2699  ::set-output:: result=failure\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/check ]   \u2699  ::set-output:: success=false\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/check ]   \u2699  ::set-output:: failure=true\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/check ] exitcode '1': failure\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/check ]   \u2699  ::set-output:: result=failure\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/check ]   \u2699  ::set-output:: success=false\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/check ]   \u2699  ::set-output:: failure=true\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/check ]   \u274c  Failure - Main Decide whether the needed jobs succeeded or failed\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/check ]   \u2699  ::set-output:: failure=true\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/check ]   \u2699  ::set-output:: result=failure\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/check ]   \u2699  ::set-output:: success=false\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/check ] exitcode '1': failure\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/check ] \u2b50 Run Post Decide whether the needed jobs succeeded or failed\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/check ]   \ud83d\udc33  docker cp src=/tmp/act-cache/8111104d-8449-4159-a6b0-18044a8b5466/act/re-actors-alls-green@release-v1/ dst=/var/run/act/actions/re-actors-alls-green@release-v1/\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/check ]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/re-actors-alls-green@release-v1/] user=0 workdir=\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/check ]   \u2705  Success - Post Decide whether the needed jobs succeeded or failed\n[86d2b504-8d5b-4ec7-a655-7146c8e96a20/check ] \ud83c\udfc1  Job failed\n",
        "stderr": "time=\"2023-06-28T12:31:03+02:00\" level=error msg=\"POST /_apis/artifactcache/caches/1: broken file: 26475983 != 0\" module=artifactcache\nError: Job 'Tests' failed\n",
        "workflow": "/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/aio-libs-aiomcache/.github/workflows/ci-crawler.yaml",
        "build_tool": "pytest",
        "elapsed_time": 435.67172932624817
    }
}