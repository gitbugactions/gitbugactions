{
    "repository": "cenpy-devs/cenpy",
    "stars": 168,
    "language": "python",
    "size": 23308,
    "clone_url": "https://github.com/cenpy-devs/cenpy.git",
    "timestamp": "2023-07-01T10:25:33.056290Z",
    "clone_success": true,
    "number_of_actions": 1,
    "number_of_test_actions": 1,
    "actions_successful": true,
    "actions_build_tools": [
        "pytest"
    ],
    "actions_test_build_tools": [
        "pytest"
    ],
    "actions_run": {
        "failed": false,
        "tests": [
            {
                "classname": "cenpy.tests.test_explorer.TestExplorer",
                "name": "test_available",
                "time": 0.131,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "cenpy.tests.test_explorer.TestExplorer",
                "name": "test_explain",
                "time": 0.108,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "cenpy.tests.test_explorer.TestExplorer",
                "name": "test_fipstable",
                "time": 0.561,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "cenpy.tests.test_functional",
                "name": "test_all",
                "time": 14.929,
                "results": [
                    {
                        "result": "Failure",
                        "message": "KeyError: 'Response from API is malformed. You may have submitted too many queries, formatted the request incorrectly, or experienced significant network connectivity issues. Check to make sure that your inputs, like placenames, are spelled correctly, and that your geographies match the level at which you intend to query. The original error from the Census is:\\\\n(API ERROR 400:Unable to complete operation.([]))'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "cenpy.tests.test_functional_products",
                "name": "test_all",
                "time": 29.121,
                "results": [
                    {
                        "result": "Failure",
                        "message": "TypeError: sjoin() got an unexpected keyword argument 'predicate'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "cenpy.tests.test_parser.Geoparser_Test",
                "name": "test_pysal_holed_multi_polygon",
                "time": 9.873,
                "results": [
                    {
                        "result": "Failure",
                        "message": "KeyError: 'Response from API is malformed. You may have submitted too many queries, formatted the request incorrectly, or experienced significant network connectivity issues. Check to make sure that your inputs, like placenames, are spelled correctly, and that your geographies match the level at which you intend to query. The original error from the Census is:\\\\n(API ERROR 400:Unable to complete operation.([]))'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "cenpy.tests.test_parser.Geoparser_Test",
                "name": "test_pysal_holed_polygon",
                "time": 8.603,
                "results": [
                    {
                        "result": "Failure",
                        "message": "KeyError: 'Response from API is malformed. You may have submitted too many queries, formatted the request incorrectly, or experienced significant network connectivity issues. Check to make sure that your inputs, like placenames, are spelled correctly, and that your geographies match the level at which you intend to query. The original error from the Census is:\\\\n(API ERROR 400:Unable to complete operation.([]))'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "cenpy.tests.test_parser.Geoparser_Test",
                "name": "test_pysal_multi_polygon",
                "time": 8.546,
                "results": [
                    {
                        "result": "Failure",
                        "message": "KeyError: 'Response from API is malformed. You may have submitted too many queries, formatted the request incorrectly, or experienced significant network connectivity issues. Check to make sure that your inputs, like placenames, are spelled correctly, and that your geographies match the level at which you intend to query. The original error from the Census is:\\\\n(API ERROR 400:Unable to complete operation.([]))'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "cenpy.tests.test_parser.Geoparser_Test",
                "name": "test_pysal_polygon",
                "time": 11.134,
                "results": [
                    {
                        "result": "Failure",
                        "message": "KeyError: 'Response from API is malformed. You may have submitted too many queries, formatted the request incorrectly, or experienced significant network connectivity issues. Check to make sure that your inputs, like placenames, are spelled correctly, and that your geographies match the level at which you intend to query. The original error from the Census is:\\\\n(API ERROR 400:Unable to complete operation.([]))'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "cenpy.tests.test_parser.Geoparser_Test",
                "name": "test_shapely_conversion",
                "time": 7.786,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "cenpy.tests.test_remote.test_remote",
                "name": "test_connection",
                "time": 2.933,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "cenpy.tests.test_tiger.test_tiger",
                "name": "test_connection",
                "time": 11.421,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            }
        ],
        "stdout": "[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)] \ud83d\ude80  Start image=crawlergpt:latest\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/558156d8-17ed-11ee-8a50-bb14de238602/cenpy-devs-cenpy] user=0 workdir=\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \u2601  git clone 'https://github.com/mamba-org/provision-with-micromamba' # ref=main\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)] \ud83e\uddea  Matrix: map[environment-file:.ci/py36.yml os:ubuntu-latest]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)] \u2b50 Run Main Checkout repo\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \u2705  Success - Main Checkout repo\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)] \u2b50 Run Main Setup micromamba\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \ud83d\udc33  docker cp src=/tmp/act-cache/14295d68-9f18-47c4-8f35-2b81defbd793/act/mamba-org-provision-with-micromamba@main/ dst=/var/run/act/actions/mamba-org-provision-with-micromamba@main/\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/mamba-org-provision-with-micromamba@main/] user=0 workdir=\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/mamba-org-provision-with-micromamba@main/dist/main/index.js] user= workdir=\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \ud83d\udea7  ::warning::This action is deprecated and no longer maintained. Please use mamba-org/setup-micromamba instead. See `https://github.com/mamba-org/provision-with-micromamba#migration-to-setup-micromamba` for a migration guide.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \ud83d\udcac  ::debug::Contents of /home/runneradmin/.condarc%0Achannel_priority: strict%0Achannels:%0A  - conda-forge%0A\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \u2753  ::group::Install micromamba ...\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \ud83d\udcac  ::debug::Resolved Keys:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \ud83d\udcac  ::debug::[\"micromamba-bin https://micro.mamba.pm/api/micromamba/linux-64/latest Sat Jul 01 2023 YYY\"]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \ud83d\udcac  ::debug::Checking zstd --version\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \ud83d\udcac  ::debug::*** zstd command line interface 64-bits v1.5.0, by Yann Collet ***\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:42481/_apis/artifactcache/cache?keys=micromamba-bin%2520https%253A%252F%252Fmicro.mamba.pm%252Fapi%252Fmicromamba%252Flinux-64%252Flatest%2520Sat%2520Jul%252001%25202023%2520YYY&version=40cd471e258f8d42c1b6f93422de32dc9780571a713394832b85a5dd2c8cc2a6\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \ud83d\udcac  ::debug::Failed to delete archive: Error: ENOENT: no such file or directory, unlink ''\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Cache miss for key 'micromamba-bin https://micro.mamba.pm/api/micromamba/linux-64/latest Sat Jul 01 2023 YYY'\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \ud83d\udcac  ::debug::Running shell command [\"bash\",[\"-eo\",\"pipefail\",\"-c\",\"curl https://micro.mamba.pm/api/micromamba/linux-64/latest -Ls --retry 5 --retry-delay 1 | tar -xj -O bin/micromamba > /home/runneradmin/micromamba-bin/micromamba\"]]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | [command]/usr/bin/bash -eo pipefail -c curl https://micro.mamba.pm/api/micromamba/linux-64/latest -Ls --retry 5 --retry-delay 1 | tar -xj -O bin/micromamba > /home/runneradmin/micromamba-bin/micromamba\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Will save to cache with key micromamba-bin https://micro.mamba.pm/api/micromamba/linux-64/latest Sat Jul 01 2023 YYY\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \ud83d\udcac  ::debug::Running shell command [\"/home/runneradmin/micromamba-bin/micromamba\",[\"shell\",\"init\",\"-s\",\"zsh\",\"-p\",\"/home/runneradmin/micromamba-root\",\"-y\",\"--log-level\",\"warning\"]]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | [command]/home/runneradmin/micromamba-bin/micromamba shell init -s zsh -p /home/runneradmin/micromamba-root -y --log-level warning\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Modifying RC file \"/home/runneradmin/.zshrc\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Generating config for root prefix \u001b[1m\"/home/runneradmin/micromamba-root\"\u001b[0m\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Setting mamba executable to: \u001b[1m\"/home/runneradmin/micromamba-bin/micromamba\"\u001b[0m\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Adding (or replacing) the following in your \"/home/runneradmin/.zshrc\" file\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | # >>> mamba initialize >>>\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | # !! Contents within this block are managed by 'mamba init' !!\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | export MAMBA_EXE=\"/home/runneradmin/micromamba-bin/micromamba\";\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | export MAMBA_ROOT_PREFIX=\"/home/runneradmin/micromamba-root\";\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | __mamba_setup=\"$(\"$MAMBA_EXE\" shell hook --shell zsh --root-prefix \"$MAMBA_ROOT_PREFIX\" 2> /dev/null)\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | if [ $? -eq 0 ]; then\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     eval \"$__mamba_setup\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | else\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     if [ -f \"/home/runneradmin/micromamba-root/etc/profile.d/micromamba.sh\" ]; then\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         . \"/home/runneradmin/micromamba-root/etc/profile.d/micromamba.sh\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     else\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         export  PATH=\"/home/runneradmin/micromamba-root/bin:$PATH\"  # extra space after export prevents interference from conda init\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     fi\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | fi\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | unset __mamba_setup\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | # <<< mamba initialize <<<\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \ud83d\udcac  ::debug::Running shell command [\"/home/runneradmin/micromamba-bin/micromamba\",[\"shell\",\"init\",\"-s\",\"bash\",\"-p\",\"/home/runneradmin/micromamba-root\",\"-y\",\"--log-level\",\"warning\"]]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | [command]/home/runneradmin/micromamba-bin/micromamba shell init -s bash -p /home/runneradmin/micromamba-root -y --log-level warning\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Modifying RC file \"/tmp/micromamba-jwdbLG/.bashrc\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Generating config for root prefix \u001b[1m\"/home/runneradmin/micromamba-root\"\u001b[0m\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Setting mamba executable to: \u001b[1m\"/home/runneradmin/micromamba-bin/micromamba\"\u001b[0m\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Adding (or replacing) the following in your \"/tmp/micromamba-jwdbLG/.bashrc\" file\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | # >>> mamba initialize >>>\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | # !! Contents within this block are managed by 'mamba init' !!\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | export MAMBA_EXE=\"/home/runneradmin/micromamba-bin/micromamba\";\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | export MAMBA_ROOT_PREFIX=\"/home/runneradmin/micromamba-root\";\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | __mamba_setup=\"$(\"$MAMBA_EXE\" shell hook --shell bash --root-prefix \"$MAMBA_ROOT_PREFIX\" 2> /dev/null)\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | if [ $? -eq 0 ]; then\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     eval \"$__mamba_setup\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | else\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     if [ -f \"/home/runneradmin/micromamba-root/etc/profile.d/micromamba.sh\" ]; then\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         . \"/home/runneradmin/micromamba-root/etc/profile.d/micromamba.sh\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     else\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         export  PATH=\"/home/runneradmin/micromamba-root/bin:$PATH\"  # extra space after export prevents interference from conda init\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     fi\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | fi\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | unset __mamba_setup\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | # <<< mamba initialize <<<\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \u2753  ::endgroup::\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \u2753  ::group::Install environment tests from /tmp/558156d8-17ed-11ee-8a50-bb14de238602/cenpy-devs-cenpy/.ci/py36.yml ...\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | create env tests\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \ud83d\udcac  ::debug::Running shell command [\"/home/runneradmin/micromamba-bin/micromamba create -n tests -y --log-level warning -f /tmp/558156d8-17ed-11ee-8a50-bb14de238602/cenpy-devs-cenpy/.ci/py36.yml\"]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | [command]/home/runneradmin/micromamba-bin/micromamba create -n tests -y --log-level warning -f /tmp/558156d8-17ed-11ee-8a50-bb14de238602/cenpy-devs-cenpy/.ci/py36.yml\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Transaction\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   Prefix: /home/runneradmin/micromamba-root/envs/tests\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   Updating specs:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |    - python=3.6\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |    - geopandas\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |    - fuzzywuzzy\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |    - libpysal\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |    - numpy\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |    - pandas\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |    - pytest\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |    - requests\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |    - rtree\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |    - scipy\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |    - six\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   Package                    Version  Build                Channel          Size\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   Install:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + _libgcc_mutex                0.1  conda_forge          conda-forge       3kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + _openmp_mutex                4.5  2_gnu                conda-forge      24kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + attrs                     22.2.0  pyh71513ae_0         conda-forge      54kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + beautifulsoup4            4.12.2  pyha770c72_0         conda-forge     115kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + boost-cpp                 1.74.0  hc6e9bd1_3           conda-forge      17MB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + brotlipy                   0.7.0  py36h8f6f2f9_1001    conda-forge     349kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + bs4                       4.12.2  hd8ed1ab_0           conda-forge       7kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + bzip2                      1.0.8  h7f98852_4           conda-forge     496kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + c-ares                    1.19.1  hd590300_0           conda-forge     113kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + ca-certificates         2023.5.7  hbcca054_0           conda-forge     148kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + cairo                     1.16.0  h6cf1ce9_1008        conda-forge       2MB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + certifi                2021.5.30  py36h5fab9bb_0       conda-forge     145kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + cffi                      1.14.6  py36hd8eec40_1       conda-forge     230kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + cfitsio                    3.470  hb418390_7           conda-forge       1MB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + charset-normalizer         2.1.1  pyhd8ed1ab_0         conda-forge      36kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + click                      7.1.2  pyh9f0ad1d_0         conda-forge      65kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + click-plugins              1.1.1  py_0                 conda-forge       9kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + cligj                      0.7.2  pyhd8ed1ab_1         conda-forge      10kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + cryptography              35.0.0  py36hb60f036_0       conda-forge       2MB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + curl                      7.86.0  h7bff187_1           conda-forge      93kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + cycler                    0.11.0  pyhd8ed1ab_0         conda-forge      10kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + expat                      2.5.0  hcb278e6_1           conda-forge     137kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + fiona                     1.8.20  py36he9df7c8_1       conda-forge       1MB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + fontconfig                2.14.2  h14ed4e7_0           conda-forge     272kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + freetype                  2.12.1  hca18f0e_1           conda-forge     626kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + freexl                     1.0.6  h166bdaf_1           conda-forge      50kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + fuzzywuzzy                0.18.0  pyhd8ed1ab_0         conda-forge      22kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + gdal                       3.3.0  py36h5febb71_1       conda-forge       2MB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + geopandas                  0.9.0  pyhd8ed1ab_1         conda-forge       5kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + geopandas-base             0.9.0  pyhd8ed1ab_1         conda-forge     972kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + geos                       3.9.1  h9c3ff4c_2           conda-forge       1MB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + geotiff                    1.6.0  hcf90da6_5           conda-forge     303kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + gettext                   0.21.1  h27087fc_0           conda-forge       4MB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + giflib                     5.2.1  h0b41bf4_3           conda-forge      77kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + hdf4                      4.2.15  h9772cbc_5           conda-forge     974kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + hdf5                      1.10.6  nompi_h6a2412b_1114  conda-forge       3MB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + icu                         68.2  h9c3ff4c_0           conda-forge      14MB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + idna                         3.4  pyhd8ed1ab_0         conda-forge      57kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + importlib-metadata         4.8.1  py36h5fab9bb_0       conda-forge      33kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + importlib_metadata         4.8.1  hd8ed1ab_1           conda-forge       4kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + iniconfig                  1.1.1  pyh9f0ad1d_0         conda-forge       8kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + jinja2                     3.0.3  pyhd8ed1ab_0         conda-forge     102kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + joblib                     1.3.0  pyhd8ed1ab_0         conda-forge     221kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + jpeg                          9e  h0b41bf4_3           conda-forge     240kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + json-c                      0.15  h98cffda_0           conda-forge     281kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + kealib                    1.4.14  hcc255d8_2           conda-forge     191kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + keyutils                   1.6.1  h166bdaf_0           conda-forge     118kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + kiwisolver                 1.3.1  py36h605e78d_1       conda-forge      80kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + krb5                      1.19.3  h3790be6_0           conda-forge       2MB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + lcms2                       2.12  hddcbb42_0           conda-forge     453kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + ld_impl_linux-64            2.40  h41732ed_0           conda-forge     705kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + libblas                    3.9.0  17_linux64_openblas  conda-forge      14kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + libcblas                   3.9.0  17_linux64_openblas  conda-forge      14kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + libcurl                   7.86.0  h7bff187_1           conda-forge     357kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + libdap4                   3.20.6  hd7c4107_2           conda-forge      12MB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + libedit             3.1.20191231  he28a2e2_2           conda-forge     124kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + libev                       4.33  h516909a_1           conda-forge     106kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + libexpat                   2.5.0  hcb278e6_1           conda-forge      78kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + libffi                     3.4.2  h7f98852_5           conda-forge      58kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + libgcc-ng                 13.1.0  he5830b7_0           conda-forge     776kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + libgdal                    3.3.0  h679344c_1           conda-forge      14MB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + libgfortran-ng            13.1.0  h69a702a_0           conda-forge      23kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + libgfortran5              13.1.0  h15d22d2_0           conda-forge       1MB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + libglib                   2.76.3  hebfc3b9_0           conda-forge       3MB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + libgomp                   13.1.0  he5830b7_0           conda-forge     419kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + libiconv                    1.17  h166bdaf_0           conda-forge       1MB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + libkml                     1.3.0  h238a007_1014        conda-forge     605kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + liblapack                  3.9.0  17_linux64_openblas  conda-forge      14kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + libnetcdf                  4.8.0  nompi_hcd642e3_103   conda-forge       2MB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + libnghttp2                1.51.0  hdcd2b5c_0           conda-forge     623kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + libnsl                     2.0.0  h7f98852_0           conda-forge      31kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + libopenblas               0.3.23  pthreads_h80387f5_0  conda-forge       5MB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + libpng                    1.6.39  h753d276_0           conda-forge     283kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + libpq                       13.5  hd57d9b9_1           conda-forge       3MB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + libpysal                   4.5.1  pyhd8ed1ab_0         conda-forge       2MB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + librttopo                  1.1.0  h1185371_6           conda-forge     240kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + libspatialindex            1.9.3  h9c3ff4c_4           conda-forge       5MB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + libspatialite              5.0.1  h20cb978_4           conda-forge       5MB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + libsqlite                 3.42.0  h2797004_0           conda-forge     829kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + libssh2                   1.10.0  haa6b8db_3           conda-forge     239kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + libstdcxx-ng              13.1.0  hfd8a6a1_0           conda-forge       4MB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + libtiff                    4.2.0  hbd63e13_2           conda-forge     655kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + libuuid                   2.38.1  h0b41bf4_0           conda-forge      34kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + libwebp-base               1.3.1  hd590300_0           conda-forge     400kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + libxcb                      1.15  h0b41bf4_0           conda-forge     384kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + libxml2                   2.9.12  h72842e0_0           conda-forge     791kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + libzip                     1.9.2  hc869a4a_1           conda-forge      99kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + libzlib                   1.2.13  hd590300_5           conda-forge      62kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + lz4-c                      1.9.3  h9c3ff4c_1           conda-forge     184kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + mapclassify                2.5.0  pyhd8ed1ab_1         conda-forge      39kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + markupsafe                 2.0.1  py36h8f6f2f9_0       conda-forge      23kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + matplotlib-base            3.3.4  py36hd391965_0       conda-forge       7MB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + more-itertools             9.1.0  pyhd8ed1ab_0         conda-forge      52kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + munch                      2.5.0  py_0                 conda-forge      13kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + ncurses                      6.4  hcb278e6_0           conda-forge     881kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + networkx                     2.7  pyhd8ed1ab_0         conda-forge       2MB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + numpy                     1.19.5  py36hfc0c790_2       conda-forge       6MB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + olefile                     0.46  pyh9f0ad1d_1         conda-forge      33kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + openjpeg                   2.4.0  hb52868f_1           conda-forge     455kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + openssl                   1.1.1u  hd590300_0           conda-forge       2MB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + packaging                   21.3  pyhd8ed1ab_0         conda-forge      36kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + pandas                     1.1.5  py36h284efc9_0       conda-forge      12MB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + pcre                        8.45  h9c3ff4c_0           conda-forge     259kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + pcre2                      10.40  hc3806b6_0           conda-forge       2MB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + pillow                     8.2.0  py36ha6010c0_1       conda-forge     705kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + pip                       21.3.1  pyhd8ed1ab_0         conda-forge       1MB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + pixman                    0.40.0  h36c2ea0_0           conda-forge     643kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + pluggy                     1.0.0  py36h5fab9bb_1       conda-forge      25kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + poppler                  21.03.0  h93df280_0           conda-forge      17MB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + poppler-data              0.4.12  hd8ed1ab_0           conda-forge       2MB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + postgresql                  13.5  h2510834_1           conda-forge       6MB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + proj                       8.0.0  h277dcde_0           conda-forge       3MB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + pthread-stubs                0.4  h36c2ea0_1001        conda-forge       6kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + py                        1.11.0  pyh6c4a22f_0         conda-forge      76kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + pycparser                   2.21  pyhd8ed1ab_0         conda-forge     103kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + pyopenssl                 22.0.0  pyhd8ed1ab_1         conda-forge     123kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + pyparsing                  3.1.0  pyhd8ed1ab_0         conda-forge      89kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + pyproj                     3.0.1  py36h6e9aebd_1       conda-forge     490kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + pysocks                    1.7.1  py36h5fab9bb_3       conda-forge      28kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + pytest                     6.2.5  py36h5fab9bb_0       conda-forge     441kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + python                    3.6.15  hb7a2778_0_cpython   conda-forge      40MB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + python-dateutil            2.8.2  pyhd8ed1ab_0         conda-forge     246kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + python-levenshtein        0.12.2  py36h8f6f2f9_0       conda-forge      82kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + python_abi                   3.6  2_cp36m              conda-forge       4kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + pytz                      2023.3  pyhd8ed1ab_0         conda-forge     187kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + readline                     8.2  h8228510_1           conda-forge     281kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + requests                  2.28.1  pyhd8ed1ab_0         conda-forge      54kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + rtree                      0.9.7  py36hb415506_1       conda-forge      46kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + scikit-learn              0.24.2  py36hc89565f_1       conda-forge       8MB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + scipy                      1.5.3  py36h81d768a_1       conda-forge      20MB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + setuptools                58.0.4  py36h5fab9bb_2       conda-forge     989kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + shapely                    1.7.1  py36hff28ebb_5       conda-forge     464kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + six                       1.16.0  pyh6c4a22f_0         conda-forge      14kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + soupsieve            2.3.2.post1  pyhd8ed1ab_0         conda-forge      35kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + sqlite                    3.42.0  h2c6b66d_0           conda-forge     818kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + threadpoolctl              3.1.0  pyh8a188c0_0         conda-forge      18kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + tiledb                     2.2.9  h91fcb0e_0           conda-forge       4MB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + tk                        8.6.12  h27826a3_0           conda-forge       3MB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + toml                      0.10.2  pyhd8ed1ab_0         conda-forge      18kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + tornado                      6.1  py36h8f6f2f9_1       conda-forge     659kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + typing_extensions          4.1.1  pyha770c72_0         conda-forge      30kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + tzcode                     2023c  h0b41bf4_0           conda-forge      69kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + tzdata                     2023c  h71feb2d_0           conda-forge     118kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + urllib3                  1.26.15  pyhd8ed1ab_0         conda-forge     113kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + wheel                     0.37.1  pyhd8ed1ab_0         conda-forge      32kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + xerces-c                   3.2.3  h9d8b166_3           conda-forge       2MB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + xorg-kbproto               1.0.7  h7f98852_1002        conda-forge      27kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + xorg-libice                1.1.1  hd590300_0           conda-forge      58kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + xorg-libsm                 1.2.4  h7391055_0           conda-forge      27kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + xorg-libx11                1.8.6  h8ee46fc_0           conda-forge     829kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + xorg-libxau               1.0.11  hd590300_0           conda-forge      14kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + xorg-libxdmcp              1.1.3  h7f98852_0           conda-forge      19kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + xorg-libxext               1.3.4  h0b41bf4_2           conda-forge      50kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + xorg-libxrender           0.9.10  h7f98852_1003        conda-forge      33kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + xorg-renderproto          0.11.1  h7f98852_1002        conda-forge      10kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + xorg-xextproto             7.3.0  h0b41bf4_1003        conda-forge      30kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + xorg-xproto               7.0.31  h7f98852_1007        conda-forge      75kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + xz                         5.2.6  h166bdaf_0           conda-forge     418kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + zipp                       3.6.0  pyhd8ed1ab_0         conda-forge      12kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + zlib                      1.2.13  hd590300_5           conda-forge      93kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   + zstd                       1.4.9  ha95c52a_0           conda-forge     442kB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   Summary:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   Install: 161 packages\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   Total download: 269MB\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Transaction starting\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking _libgcc_mutex-0.1-conda_forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking libstdcxx-ng-13.1.0-hfd8a6a1_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking libgfortran5-13.1.0-h15d22d2_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking ld_impl_linux-64-2.40-h41732ed_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking ca-certificates-2023.5.7-hbcca054_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking libgomp-13.1.0-he5830b7_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking libgfortran-ng-13.1.0-h69a702a_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking _openmp_mutex-4.5-2_gnu\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking libgcc-ng-13.1.0-he5830b7_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking xorg-renderproto-0.11.1-h7f98852_1002\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking xorg-libxdmcp-1.1.3-h7f98852_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking pthread-stubs-0.4-h36c2ea0_1001\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking xorg-xproto-7.0.31-h7f98852_1007\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking xorg-kbproto-1.0.7-h7f98852_1002\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking tzcode-2023c-h0b41bf4_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking xorg-libxau-1.0.11-hd590300_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking xorg-xextproto-7.3.0-h0b41bf4_1003\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking xorg-libice-1.1.1-hd590300_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking pcre-8.45-h9c3ff4c_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking libiconv-1.17-h166bdaf_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking gettext-0.21.1-h27087fc_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking pixman-0.40.0-h36c2ea0_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking bzip2-1.0.8-h7f98852_4\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking libev-4.33-h516909a_1\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking c-ares-1.19.1-hd590300_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking libuuid-2.38.1-h0b41bf4_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking icu-68.2-h9c3ff4c_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking giflib-5.2.1-h0b41bf4_3\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking geos-3.9.1-h9c3ff4c_2\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking freexl-1.0.6-h166bdaf_1\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking libexpat-2.5.0-hcb278e6_1\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking json-c-0.15-h98cffda_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking libwebp-base-1.3.1-hd590300_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking jpeg-9e-h0b41bf4_3\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking keyutils-1.6.1-h166bdaf_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking openssl-1.1.1u-hd590300_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking ncurses-6.4-hcb278e6_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking libffi-3.4.2-h7f98852_5\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking libspatialindex-1.9.3-h9c3ff4c_4\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking libopenblas-0.3.23-pthreads_h80387f5_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking libzlib-1.2.13-hd590300_5\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking xz-5.2.6-h166bdaf_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking lz4-c-1.9.3-h9c3ff4c_1\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking libnsl-2.0.0-h7f98852_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking libxcb-1.15-h0b41bf4_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking xorg-libsm-1.2.4-h7391055_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking librttopo-1.1.0-h1185371_6\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking expat-2.5.0-hcb278e6_1\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking libedit-3.1.20191231-he28a2e2_2\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking readline-8.2-h8228510_1\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking libblas-3.9.0-17_linux64_openblas\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking libzip-1.9.2-hc869a4a_1\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking pcre2-10.40-hc3806b6_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking libpng-1.6.39-h753d276_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking libssh2-1.10.0-haa6b8db_3\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking libnghttp2-1.51.0-hdcd2b5c_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking tk-8.6.12-h27826a3_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking libsqlite-3.42.0-h2797004_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking zlib-1.2.13-hd590300_5\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking xerces-c-3.2.3-h9d8b166_3\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking xorg-libx11-1.8.6-h8ee46fc_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking krb5-1.19.3-h3790be6_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking libcblas-3.9.0-17_linux64_openblas\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking liblapack-3.9.0-17_linux64_openblas\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking libglib-2.76.3-hebfc3b9_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking freetype-2.12.1-hca18f0e_1\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking sqlite-3.42.0-h2c6b66d_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking libxml2-2.9.12-h72842e0_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking hdf4-4.2.15-h9772cbc_5\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking zstd-1.4.9-ha95c52a_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking xorg-libxext-1.3.4-h0b41bf4_2\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking xorg-libxrender-0.9.10-h7f98852_1003\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking libpq-13.5-hd57d9b9_1\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking libcurl-7.86.0-h7bff187_1\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking fontconfig-2.14.2-h14ed4e7_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking python-3.6.15-hb7a2778_0_cpython\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking boost-cpp-1.74.0-hc6e9bd1_3\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking tiledb-2.2.9-h91fcb0e_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking libtiff-4.2.0-hbd63e13_2\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking cfitsio-3.470-hb418390_7\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking hdf5-1.10.6-nompi_h6a2412b_1114\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking curl-7.86.0-h7bff187_1\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking cairo-1.16.0-h6cf1ce9_1008\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking python_abi-3.6-2_cp36m\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking libkml-1.3.0-h238a007_1014\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking lcms2-2.12-hddcbb42_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking openjpeg-2.4.0-hb52868f_1\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking proj-8.0.0-h277dcde_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking kealib-1.4.14-hcc255d8_2\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking libnetcdf-4.8.0-nompi_hcd642e3_103\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking libdap4-3.20.6-hd7c4107_2\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking setuptools-58.0.4-py36h5fab9bb_2\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking libspatialite-5.0.1-h20cb978_4\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking geotiff-1.6.0-hcf90da6_5\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking poppler-data-0.4.12-hd8ed1ab_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking tzdata-2023c-h71feb2d_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking wheel-0.37.1-pyhd8ed1ab_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking pip-21.3.1-pyhd8ed1ab_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking threadpoolctl-3.1.0-pyh8a188c0_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking joblib-1.3.0-pyhd8ed1ab_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking olefile-0.46-pyh9f0ad1d_1\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking pycparser-2.21-pyhd8ed1ab_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking cycler-0.11.0-pyhd8ed1ab_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking pyparsing-3.1.0-pyhd8ed1ab_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking soupsieve-2.3.2.post1-pyhd8ed1ab_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking click-7.1.2-pyh9f0ad1d_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking zipp-3.6.0-pyhd8ed1ab_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking typing_extensions-4.1.1-pyha770c72_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking pytz-2023.3-pyhd8ed1ab_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking py-1.11.0-pyh6c4a22f_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking iniconfig-1.1.1-pyh9f0ad1d_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking attrs-22.2.0-pyh71513ae_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking toml-0.10.2-pyhd8ed1ab_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking more-itertools-9.1.0-pyhd8ed1ab_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking charset-normalizer-2.1.1-pyhd8ed1ab_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking idna-3.4-pyhd8ed1ab_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking six-1.16.0-pyh6c4a22f_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking packaging-21.3-pyhd8ed1ab_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking beautifulsoup4-4.12.2-pyha770c72_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking cligj-0.7.2-pyhd8ed1ab_1\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking click-plugins-1.1.1-py_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking munch-2.5.0-py_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking python-dateutil-2.8.2-pyhd8ed1ab_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking bs4-4.12.2-hd8ed1ab_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking poppler-21.03.0-h93df280_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking postgresql-13.5-h2510834_1\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking tornado-6.1-py36h8f6f2f9_1\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking kiwisolver-1.3.1-py36h605e78d_1\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking python-levenshtein-0.12.2-py36h8f6f2f9_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking pysocks-1.7.1-py36h5fab9bb_3\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking markupsafe-2.0.1-py36h8f6f2f9_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking certifi-2021.5.30-py36h5fab9bb_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking rtree-0.9.7-py36hb415506_1\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking numpy-1.19.5-py36hfc0c790_2\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking pillow-8.2.0-py36ha6010c0_1\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking cffi-1.14.6-py36hd8eec40_1\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking importlib-metadata-4.8.1-py36h5fab9bb_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking libgdal-3.3.0-h679344c_1\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking pyproj-3.0.1-py36h6e9aebd_1\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking shapely-1.7.1-py36hff28ebb_5\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking scipy-1.5.3-py36h81d768a_1\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking pandas-1.1.5-py36h284efc9_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking matplotlib-base-3.3.4-py36hd391965_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking brotlipy-0.7.0-py36h8f6f2f9_1001\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking cryptography-35.0.0-py36hb60f036_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking gdal-3.3.0-py36h5febb71_1\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking scikit-learn-0.24.2-py36hc89565f_1\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking fiona-1.8.20-py36he9df7c8_1\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking fuzzywuzzy-0.18.0-pyhd8ed1ab_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking jinja2-3.0.3-pyhd8ed1ab_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking importlib_metadata-4.8.1-hd8ed1ab_1\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking geopandas-base-0.9.0-pyhd8ed1ab_1\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking networkx-2.7-pyhd8ed1ab_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking pyopenssl-22.0.0-pyhd8ed1ab_1\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking mapclassify-2.5.0-pyhd8ed1ab_1\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking urllib3-1.26.15-pyhd8ed1ab_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking geopandas-0.9.0-pyhd8ed1ab_1\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking requests-2.28.1-pyhd8ed1ab_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking libpysal-4.5.1-pyhd8ed1ab_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking pluggy-1.0.0-py36h5fab9bb_1\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Linking pytest-6.2.5-py36h5fab9bb_0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Transaction finished\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | To activate this environment, use:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     micromamba activate tests\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Or to execute a single command in this environment, use:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     micromamba run -n tests mycommand\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | --- Contents of /home/runneradmin/.bash_profile ---\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | # >>> mamba initialize >>>\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | # !! Contents within this block are managed by 'mamba init' !!\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | export MAMBA_EXE=\"/home/runneradmin/micromamba-bin/micromamba\";\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | export MAMBA_ROOT_PREFIX=\"/home/runneradmin/micromamba-root\";\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | __mamba_setup=\"$(\"$MAMBA_EXE\" shell hook --shell bash --root-prefix \"$MAMBA_ROOT_PREFIX\" 2> /dev/null)\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | if [ $? -eq 0 ]; then\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     eval \"$__mamba_setup\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | else\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     if [ -f \"/home/runneradmin/micromamba-root/etc/profile.d/micromamba.sh\" ]; then\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         . \"/home/runneradmin/micromamba-root/etc/profile.d/micromamba.sh\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     else\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         export  PATH=\"/home/runneradmin/micromamba-root/bin:$PATH\"  # extra space after export prevents interference from conda init\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     fi\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | fi\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | unset __mamba_setup\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | # <<< mamba initialize <<<\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | set -eo pipefail; micromamba activate tests;\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | --- End contents of /home/runneradmin/.bash_profile ---\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \ud83d\udcac  ::debug::Running shell command [\"bash\",[\"-eo\",\"pipefail\",\"-l\",\"-c\",\"micromamba info --json\"]]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | [command]/usr/bin/bash -eo pipefail -l -c micromamba info --json\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | {\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \"base environment\": \"/home/runneradmin/micromamba-root\",\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \"channels\": [\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         \"https://conda.anaconda.org/conda-forge/linux-64\",\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         \"https://conda.anaconda.org/conda-forge/noarch\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     ],\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \"curl version\": \"libcurl/7.88.1 OpenSSL/3.1.1 zlib/1.2.13 zstd/1.5.2 libssh2/1.11.0 nghttp2/1.52.0\",\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \"env location\": \"/home/runneradmin/micromamba-root/envs/tests\",\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \"environment\": \"tests (active)\",\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \"envs directories\": [\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         \"/home/runneradmin/micromamba-root/envs\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     ],\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \"libarchive version\": \"libarchive 3.6.2 zlib/1.2.13 bz2lib/1.0.8 libzstd/1.5.2\",\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \"libmamba version\": \"1.4.6\",\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \"micromamba version\": \"1.4.6\",\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \"package cache\": [\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         \"/home/runneradmin/micromamba-root/pkgs\",\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         \"/home/runneradmin/.mamba/pkgs\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     ],\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \"platform\": \"linux-64\",\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \"populated config files\": [\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         \"/home/runneradmin/.condarc\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     ],\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \"user config files\": [\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         \"/home/runneradmin/.mambarc\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     ],\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \"virtual packages\": [\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         \"__unix=0=0\",\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         \"__linux=5.4.0=0\",\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         \"__glibc=2.31=0\",\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         \"__archspec=1=x86_64\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     ]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | }\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \u2753  ::endgroup::\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \u2753  ::group::Environment info\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \ud83d\udcac  ::debug::Running shell command [\"bash\",[\"-eo\",\"pipefail\",\"-l\",\"-c\",\"micromamba info --log-level warning\"]]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | [command]/usr/bin/bash -eo pipefail -l -c micromamba info --log-level warning\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |        libmamba version : 1.4.6\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |      micromamba version : 1.4.6\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |            curl version : libcurl/7.88.1 OpenSSL/3.1.1 zlib/1.2.13 zstd/1.5.2 libssh2/1.11.0 nghttp2/1.52.0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |      libarchive version : libarchive 3.6.2 zlib/1.2.13 bz2lib/1.0.8 libzstd/1.5.2\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |        envs directories : /home/runneradmin/micromamba-root/envs\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |           package cache : /home/runneradmin/micromamba-root/pkgs\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                           /home/runneradmin/.mamba/pkgs\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             environment : tests (active)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |            env location : /home/runneradmin/micromamba-root/envs/tests\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |       user config files : /home/runneradmin/.mambarc\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |  populated config files : /home/runneradmin/.condarc\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |        virtual packages : __unix=0=0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                           __linux=5.4.0=0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                           __glibc=2.31=0\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                           __archspec=1=x86_64\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                channels : https://conda.anaconda.org/conda-forge/linux-64\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                           https://conda.anaconda.org/conda-forge/noarch\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |        base environment : /home/runneradmin/micromamba-root\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                platform : linux-64\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \ud83d\udcac  ::debug::Running shell command [\"bash\",[\"-eo\",\"pipefail\",\"-l\",\"-c\",\"micromamba list --log-level warning\"]]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | [command]/usr/bin/bash -eo pipefail -l -c micromamba list --log-level warning\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | List of packages in environment: \"/home/runneradmin/micromamba-root/envs/tests\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   Name                Version       Build                Channel    \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   _libgcc_mutex       0.1           conda_forge          conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   _openmp_mutex       4.5           2_gnu                conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   attrs               22.2.0        pyh71513ae_0         conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   beautifulsoup4      4.12.2        pyha770c72_0         conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   boost-cpp           1.74.0        hc6e9bd1_3           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   brotlipy            0.7.0         py36h8f6f2f9_1001    conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   bs4                 4.12.2        hd8ed1ab_0           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   bzip2               1.0.8         h7f98852_4           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   c-ares              1.19.1        hd590300_0           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   ca-certificates     2023.5.7      hbcca054_0           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   cairo               1.16.0        h6cf1ce9_1008        conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   certifi             2021.5.30     py36h5fab9bb_0       conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   cffi                1.14.6        py36hd8eec40_1       conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   cfitsio             3.470         hb418390_7           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   charset-normalizer  2.1.1         pyhd8ed1ab_0         conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   click               7.1.2         pyh9f0ad1d_0         conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   click-plugins       1.1.1         py_0                 conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   cligj               0.7.2         pyhd8ed1ab_1         conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   cryptography        35.0.0        py36hb60f036_0       conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   curl                7.86.0        h7bff187_1           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   cycler              0.11.0        pyhd8ed1ab_0         conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   expat               2.5.0         hcb278e6_1           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   fiona               1.8.20        py36he9df7c8_1       conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   fontconfig          2.14.2        h14ed4e7_0           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   freetype            2.12.1        hca18f0e_1           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   freexl              1.0.6         h166bdaf_1           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   fuzzywuzzy          0.18.0        pyhd8ed1ab_0         conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   gdal                3.3.0         py36h5febb71_1       conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   geopandas           0.9.0         pyhd8ed1ab_1         conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   geopandas-base      0.9.0         pyhd8ed1ab_1         conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   geos                3.9.1         h9c3ff4c_2           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   geotiff             1.6.0         hcf90da6_5           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   gettext             0.21.1        h27087fc_0           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   giflib              5.2.1         h0b41bf4_3           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   hdf4                4.2.15        h9772cbc_5           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   hdf5                1.10.6        nompi_h6a2412b_1114  conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   icu                 68.2          h9c3ff4c_0           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   idna                3.4           pyhd8ed1ab_0         conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   importlib-metadata  4.8.1         py36h5fab9bb_0       conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   importlib_metadata  4.8.1         hd8ed1ab_1           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   iniconfig           1.1.1         pyh9f0ad1d_0         conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   jinja2              3.0.3         pyhd8ed1ab_0         conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   joblib              1.3.0         pyhd8ed1ab_0         conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   jpeg                9e            h0b41bf4_3           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   json-c              0.15          h98cffda_0           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   kealib              1.4.14        hcc255d8_2           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   keyutils            1.6.1         h166bdaf_0           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   kiwisolver          1.3.1         py36h605e78d_1       conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   krb5                1.19.3        h3790be6_0           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   lcms2               2.12          hddcbb42_0           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   ld_impl_linux-64    2.40          h41732ed_0           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   libblas             3.9.0         17_linux64_openblas  conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   libcblas            3.9.0         17_linux64_openblas  conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   libcurl             7.86.0        h7bff187_1           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   libdap4             3.20.6        hd7c4107_2           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   libedit             3.1.20191231  he28a2e2_2           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   libev               4.33          h516909a_1           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   libexpat            2.5.0         hcb278e6_1           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   libffi              3.4.2         h7f98852_5           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   libgcc-ng           13.1.0        he5830b7_0           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   libgdal             3.3.0         h679344c_1           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   libgfortran-ng      13.1.0        h69a702a_0           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   libgfortran5        13.1.0        h15d22d2_0           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   libglib             2.76.3        hebfc3b9_0           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   libgomp             13.1.0        he5830b7_0           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   libiconv            1.17          h166bdaf_0           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   libkml              1.3.0         h238a007_1014        conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   liblapack           3.9.0         17_linux64_openblas  conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   libnetcdf           4.8.0         nompi_hcd642e3_103   conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   libnghttp2          1.51.0        hdcd2b5c_0           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   libnsl              2.0.0         h7f98852_0           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   libopenblas         0.3.23        pthreads_h80387f5_0  conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   libpng              1.6.39        h753d276_0           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   libpq               13.5          hd57d9b9_1           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   libpysal            4.5.1         pyhd8ed1ab_0         conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   librttopo           1.1.0         h1185371_6           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   libspatialindex     1.9.3         h9c3ff4c_4           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   libspatialite       5.0.1         h20cb978_4           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   libsqlite           3.42.0        h2797004_0           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   libssh2             1.10.0        haa6b8db_3           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   libstdcxx-ng        13.1.0        hfd8a6a1_0           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   libtiff             4.2.0         hbd63e13_2           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   libuuid             2.38.1        h0b41bf4_0           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   libwebp-base        1.3.1         hd590300_0           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   libxcb              1.15          h0b41bf4_0           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   libxml2             2.9.12        h72842e0_0           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   libzip              1.9.2         hc869a4a_1           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   libzlib             1.2.13        hd590300_5           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   lz4-c               1.9.3         h9c3ff4c_1           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   mapclassify         2.5.0         pyhd8ed1ab_1         conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   markupsafe          2.0.1         py36h8f6f2f9_0       conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   matplotlib-base     3.3.4         py36hd391965_0       conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   more-itertools      9.1.0         pyhd8ed1ab_0         conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   munch               2.5.0         py_0                 conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   ncurses             6.4           hcb278e6_0           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   networkx            2.7           pyhd8ed1ab_0         conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   numpy               1.19.5        py36hfc0c790_2       conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   olefile             0.46          pyh9f0ad1d_1         conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   openjpeg            2.4.0         hb52868f_1           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   openssl             1.1.1u        hd590300_0           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   packaging           21.3          pyhd8ed1ab_0         conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   pandas              1.1.5         py36h284efc9_0       conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   pcre                8.45          h9c3ff4c_0           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   pcre2               10.40         hc3806b6_0           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   pillow              8.2.0         py36ha6010c0_1       conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   pip                 21.3.1        pyhd8ed1ab_0         conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   pixman              0.40.0        h36c2ea0_0           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   pluggy              1.0.0         py36h5fab9bb_1       conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   poppler             21.03.0       h93df280_0           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   poppler-data        0.4.12        hd8ed1ab_0           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   postgresql          13.5          h2510834_1           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   proj                8.0.0         h277dcde_0           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   pthread-stubs       0.4           h36c2ea0_1001        conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   py                  1.11.0        pyh6c4a22f_0         conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   pycparser           2.21          pyhd8ed1ab_0         conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   pyopenssl           22.0.0        pyhd8ed1ab_1         conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   pyparsing           3.1.0         pyhd8ed1ab_0         conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   pyproj              3.0.1         py36h6e9aebd_1       conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   pysocks             1.7.1         py36h5fab9bb_3       conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   pytest              6.2.5         py36h5fab9bb_0       conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   python              3.6.15        hb7a2778_0_cpython   conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   python-dateutil     2.8.2         pyhd8ed1ab_0         conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   python-levenshtein  0.12.2        py36h8f6f2f9_0       conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   python_abi          3.6           2_cp36m              conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   pytz                2023.3        pyhd8ed1ab_0         conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   readline            8.2           h8228510_1           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   requests            2.28.1        pyhd8ed1ab_0         conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   rtree               0.9.7         py36hb415506_1       conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   scikit-learn        0.24.2        py36hc89565f_1       conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   scipy               1.5.3         py36h81d768a_1       conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   setuptools          58.0.4        py36h5fab9bb_2       conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   shapely             1.7.1         py36hff28ebb_5       conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   six                 1.16.0        pyh6c4a22f_0         conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   soupsieve           2.3.2.post1   pyhd8ed1ab_0         conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   sqlite              3.42.0        h2c6b66d_0           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   threadpoolctl       3.1.0         pyh8a188c0_0         conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   tiledb              2.2.9         h91fcb0e_0           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   tk                  8.6.12        h27826a3_0           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   toml                0.10.2        pyhd8ed1ab_0         conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   tornado             6.1           py36h8f6f2f9_1       conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   typing_extensions   4.1.1         pyha770c72_0         conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   tzcode              2023c         h0b41bf4_0           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   tzdata              2023c         h71feb2d_0           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   urllib3             1.26.15       pyhd8ed1ab_0         conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   wheel               0.37.1        pyhd8ed1ab_0         conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   xerces-c            3.2.3         h9d8b166_3           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   xorg-kbproto        1.0.7         h7f98852_1002        conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   xorg-libice         1.1.1         hd590300_0           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   xorg-libsm          1.2.4         h7391055_0           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   xorg-libx11         1.8.6         h8ee46fc_0           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   xorg-libxau         1.0.11        hd590300_0           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   xorg-libxdmcp       1.1.3         h7f98852_0           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   xorg-libxext        1.3.4         h0b41bf4_2           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   xorg-libxrender     0.9.10        h7f98852_1003        conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   xorg-renderproto    0.11.1        h7f98852_1002        conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   xorg-xextproto      7.3.0         h0b41bf4_1003        conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   xorg-xproto         7.0.31        h7f98852_1007        conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   xz                  5.2.6         h166bdaf_0           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   zipp                3.6.0         pyhd8ed1ab_0         conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   zlib                1.2.13        hd590300_5           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |   zstd                1.4.9         ha95c52a_0           conda-forge\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \u2753  ::endgroup::\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \u2705  Success - Main Setup micromamba\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \u2699  ::set-env:: MSYS=winsymlinks:nativestrict\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \u2699  ::set-env:: MAMBA_ROOT_PREFIX=/home/runneradmin/micromamba-root\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \u2699  ::set-env:: MAMBA_EXE=/home/runneradmin/micromamba-bin/micromamba\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \u2699  ::add-path:: /home/runneradmin/micromamba-bin\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)] \u2b50 Run Main Test with pytest - bash\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \ud83d\udc33  docker exec cmd=[bash -l /var/run/act/workflow/2] user= workdir=\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | ============================= test session starts ==============================\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | platform linux -- Python 3.6.15, pytest-6.2.5, py-1.11.0, pluggy-1.0.0 -- /home/runneradmin/micromamba-root/envs/tests/bin/python\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | cachedir: .pytest_cache\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | rootdir: /tmp/558156d8-17ed-11ee-8a50-bb14de238602/cenpy-devs-cenpy\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | collecting ... collected 12 items\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | cenpy/tests/test_explorer.py::TestExplorer::test_available PASSED        [  8%]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | cenpy/tests/test_explorer.py::TestExplorer::test_explain PASSED          [ 16%]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | cenpy/tests/test_explorer.py::TestExplorer::test_fipstable PASSED        [ 25%]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | cenpy/tests/test_functional.py::test_all FAILED                          [ 33%]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | cenpy/tests/test_functional_products.py::test_all FAILED                 [ 41%]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | cenpy/tests/test_parser.py::Geoparser_Test::test_pysal_holed_multi_polygon FAILED [ 50%]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | cenpy/tests/test_parser.py::Geoparser_Test::test_pysal_holed_polygon FAILED [ 58%]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | cenpy/tests/test_parser.py::Geoparser_Test::test_pysal_multi_polygon FAILED [ 66%]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | cenpy/tests/test_parser.py::Geoparser_Test::test_pysal_polygon FAILED    [ 75%]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | cenpy/tests/test_parser.py::Geoparser_Test::test_shapely_conversion PASSED [ 83%]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | cenpy/tests/test_remote.py::test_remote::test_connection PASSED          [ 91%]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | cenpy/tests/test_tiger.py::test_tiger::test_connection PASSED            [100%]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | =================================== FAILURES ===================================\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | ___________________________________ test_all ___________________________________\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | self = (ESRILayer) Census Designated Places, raw = False, strict = False\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | kwargs = {'where': 'STATE = 04'}, k = 'where', v = 'STATE = 04'\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | qstring = 'where=STATE = 04&text=&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=&relationParam=&...rderByFields=&groupByFieldsForStatistics=&outStatistics=&returnZ=False&returnM=False&gdbVersion=&returnDistinctValues='\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | resp = <Response [200]>\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | datadict = {'error': {'code': 400, 'details': [], 'extendedCode': -2147220985, 'message': 'Unable to complete operation.'}}\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | code = 400\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     def query(self, raw=False, strict=False, **kwargs):\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         \"\"\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         A query function to extract data out of MapServer layers. I've exposed\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         every option here\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         Parameters\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         ----------\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         where: str, required\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     sql query string.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         out_fields: list or str\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     fields to pass from the header out (default: '*')\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         return_geometry: bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     bool describing whether to return geometry or just the\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     dataframe. (default: True)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         geometry_precision: str\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     a number of significant digits to which the output of the\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     query should be truncated (default: None)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         out_sr: int or str\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     ESRI WKID spatial reference into which to reproject\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     the geodata (default: None)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         return_ids_only: bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     bool stating to only return ObjectIDs. (default: False)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         return_z: bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                      whether to return z components of shp-z, (default: False)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         return_m: bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                      whether to return m components of shp-m, (default: False)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         strict  :   bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     whether to throw an error if invalid polygons are provided from the API (True)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     or just warn that at least one polygon is invalid (default: False)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         raw : bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |               whether to provide the raw geometries from the API  (default: False)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         Returns\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         -------\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         Dataframe or GeoDataFrame containing entries from the geodatabase\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         Notes\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         -----\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         Most of the time, this should be used leaning on the SQL \"where\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         argument:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         cxn.query(where='GEOID LIKE \"06*\"')\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         In most cases, you'll be querying against layers, not MapServices\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         overall.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         \"\"\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # parse args\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         kwargs = {\"\".join(k.split(\"_\")): v for k, v in diter(kwargs)}\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # construct query string\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         self._basequery = copy.deepcopy(_basequery)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         for k, v in diter(kwargs):\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             try:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 self._basequery[k] = v\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             except KeyError:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 raise KeyError(\"Option '{k}' not recognized, check parameters\")\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         qstring = \"&\".join([\"{}={}\".format(k, v) for k, v in diter(self._basequery)])\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         self._last_query = self._baseurl + \"/query?\" + qstring\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # run query\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         resp = r.get(self._last_query + \"&f=json\")\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         resp.raise_for_status()\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         datadict = resp.json()\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         if raw:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             return datadict\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         if kwargs.get(\"returnGeometry\", \"true\") == \"false\":\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             return pd.DataFrame.from_records(\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 [x[\"attributes\"] for x in datadict[\"features\"]]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             )\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # convert to output format\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         try:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | >           features = datadict[\"features\"]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | E           KeyError: 'features'\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | cenpy/tiger.py:192: KeyError\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | During handling of the above exception, another exception occurred:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     def test_all():\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         import cenpy as c\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         import pandas\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # On import, `explorer` requests all currently available APIs from the Census Bureau's [API listing](http://www.census.gov/data/developers/data-sets.html). In future, it will can also read a `JSON` collection describing the databases from disk, if asked.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         #\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # Explorer has two functions, `available` and `explain`. `available` will provide a list of the identifiers of all the APIs that `cenpy` knows about. If run with `verbose=True`, `cenpy` will also include the title of the database as a dictionary. It's a good idea to *not* process this directly, and instead use it to explore currently available APIs.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         #\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # Also, beware that the US Census Bureau can change the names of the resources. This means that the index of the following table is not necessarily stable over time; sometimes, the same resource can change its identifier, like when the 2010 decennial census changed from `2010sf1` to `DECENNIALSF12010`. So, consult the table built by `cenpy.explorer.available()` if the keys appear to have changed.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         #\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # Here, I'll just show the first five entries:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # In[2]:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         c.explorer.available().head()\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # The `explain` command provides the title and full description of the datasource. If run in verbose mode, the function returns the full `json` listing of the API.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # In[3]:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         c.explorer.explain(\"DECENNIALSF12010\")\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # To actually connect to a database resource, you create a `Connection`. A `Connection` works like a *very* simplified connection from the `sqlalchemy` world. The `Connection` class has a method, `query` that constructs a query string and requests it from the Census server. This result is then parsed into JSON and returned to the user.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # In[4]:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         conn = c.remote.APIConnection(\"DECENNIALSF12010\")\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # That may have taken longer than you'd've expected. This is because, when the `Connection` constructor is called, it populates the connection object with a bit of metadata that makes it possible to construct queries without referring to the census handbooks.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         #\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # For instance, a connection's `variables` represent all available search parameters for a given dataset.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # In[5]:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         conn.variables.head()\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # This dataframe is populated just like the census's table describing the variables on the corresponding [api website](https://api.census.gov/data/2010/dec/sf1/variables.html). Fortunately, this means that you can modify and filter this dataframe just like you can regular pandas dataframes, so working out what the exact codes to use in your query is easy.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         #\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # I've added a function, `varslike`, that globs variables that fit a regular expression pattern. It can use the builtin python `re` module, in addition to the `fnmatch` module. It also can use any filtering function you want.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         #\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # So, you can extract the rows of the variables using the `df.ix` method on the list of columns that match your expression:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # In[6]:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         conn.variables.loc[conn.varslike(\"H011[AB]\").index.tolist()]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # Likewise, the different levels of geographic scale are determined from the metadata in the overall API listing and recorded.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         #\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # However, many Census products have multiple possible geographical indexing systems, like the deprecated `fips` code system and the new *Geographical Names Information System*, `gnis`. Thus, the `geographies` property is a dictionary of dataframes, where each key is the name of the identifier system and the value is the dataframe describing the identifier system.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         #\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # For the 2010 census, the following systems are available:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # In[7]:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         conn.geographies.keys()\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # For an explanation of the geographic hierarchies, the `geographies` tables show the geographies at which the data is summarized:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # In[8]:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         conn.geographies[\"fips\"].head()\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # Note that some geographies in the `fips` system have a **requires** filter to prevent drawing too much data. This will get passed to the `query` method later.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # So, let's just grab the housing information from the 2010 Census Short Form. Using the variables table above, we picked out a subset of the fields we wanted. Since the variables table is indexed by the identifiers, we can grab the indexes of the filtered dataframe as query parameters.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         #\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # In addition, adding the `NAME` field smart-fills the table with the name of the geographic entity being pulled from the Census.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # In[9]:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         cols = conn.varslike(\"H00[012]*\", engine=\"fnmatch\").index.tolist()\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # In[10]:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         cols.append(\"NAME\")\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # In[11]:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         cols\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # Now the query. The query is constructed just like the API query, and works as follows.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         #\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # 1. cols - list of columns desired from the database, maps to census API's `get=`\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # 2. geo_unit - string denoting the unit of study to pull, maps to census API's `in=`\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # 3. geo_filter - dictionary containing groupings of geo_units, if required, maps to `for=`\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         #\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # To be specific, a fully query tells the server *what* columns to pull of *what* underlying geography from *what* aggregation units. It's structured using these heterogeneous datatypes so it's easy to change the smallest units quickly, while providing sufficient granularity to change the filters and columns as you go.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         #\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # This query below grabs the names, population, and housing estimates from the ACS, as well as their standard errors from census designated places in Arizona.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         #\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # In[12]:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         data = conn.query(cols, geo_unit=\"place:*\", geo_filter={\"state\": \"04\"})\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # Once constructed, the query executes as fast as your internet connection will move. This query has:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # In[13]:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         data.shape\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # 28 columns and 451 rows. So, rather fast.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         #\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # For validity and ease of use, we store the last executed query to the object. If you're dodgy about your census API key never being shown in plaintext, never print this property!\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # In[14]:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         conn.last_query\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # So, you have a dataframe with the information requested, plus the fields specified in the `geo_filter` and `geo_unit`. Sometimes, the `pandas.infer_objects()` function is not able to infer the types or structures of the data in the ways that you might expect. Thus, you may need to format the final data to ensure that the data types are correct.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         #\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # So, the following is a dataframe of the data requested. I've filtered it to only look at data where the population is larger than 40 thousand people.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         #\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # Pretty neat!\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # In[15]:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         data[data[\"H001001\"].astype(int) > 40000]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # And, just in case you're liable to forget your FIPS codes, the explorer module can look up some fips codes listings for you.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # In[16]:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         c.explorer.fips_table(\"place\", in_state=\"AZ\")\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # ### GEO & Tiger Integration\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # The Census TIGER geometry API is substantively different from every other API, in that it's an ArcGIS REST API. But, I've tried to expose a consistent interface. It works like this:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # In[17]:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         import cenpy.tiger as tiger\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # In[18]:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         tiger.available()\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # In some cases, it makes quite a bit of sense to \"attach\" a map server to your connection. In the case of the US Census 2010 we've been using, there is an obvious data product match in `tigerWMS_Census2010`. So, let's attach it to the connection.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # In[19]:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         conn.set_mapservice(\"tigerWMS_Census2010\")\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # In[20]:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         conn.mapservice\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # neat! this is the same as calling:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         #\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # `tiger.TigerConnection('tigerWMS_Census2010')`\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         #\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # but this attaches that object it to the connection you've been using. The connection also updates with this information:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # In[21]:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         conn\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # An ESRI MapServer is a big thing, and `cenpy` doesn't support all of its features. Since `cenpy` is designed to support retreival of data from the US Census, we only support `GET` statements for defined geographic units, and ignore the vaious other functionalities in the service.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         #\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # To work with a service, note that any map server is composed of layers:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # In[22]:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         conn.mapservice.layers\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # These layers are what actually implement query operations. For now, let's focus on the same \"class\" of units we were using before, Census Designated Places:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # In[23]:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         conn.mapservice.layers[36]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # A query function is implemented both at the mapservice level and the layer level. At the mapservice level, a layer ID is required in order to complete the query.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         #\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # Mapservice queries are driven by SQL. So, to grab all of the geodata that fits the CDPs we pulled before, you could start to construct it like this.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         #\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # First, just like the main connection, each layer has a set of variables:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # In[24]:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         conn.mapservice.layers[36].variables\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # Our prior query grabbed the places in AZ. So, we could use a SQL query that focuses on that.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         #\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # I try to pack the geometries into containers that people are used to using. Without knowing if GEOS is installed on a user's computer, I use `PySAL` as the target geometry type.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         #\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # If you do have GEOS, that means you can use Shapely or GeoPandas. So, to choose your backend, you can use the following two arguments to this query function. the `pkg` argument will let you choose the three types of python objects to output to.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         #\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # Pysal is default. If you select Shapely, the result will just be a pandas dataframe with Shapely geometries instead of pysal geometries. If you choose geopandas (or throw a gpize) option, cenpy will try to convert the pandas dataframe into a GeoPandas dataframe.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # In[25]:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | >       geodata = conn.mapservice.query(layer=36, where=\"STATE = 04\")\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | cenpy/tests/test_functional.py:201: \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | cenpy/tiger.py:272: in query\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     return self.layers[layer_result].query(**kwargs)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | self = (ESRILayer) Census Designated Places, raw = False, strict = False\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | kwargs = {'where': 'STATE = 04'}, k = 'where', v = 'STATE = 04'\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | qstring = 'where=STATE = 04&text=&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=&relationParam=&...rderByFields=&groupByFieldsForStatistics=&outStatistics=&returnZ=False&returnM=False&gdbVersion=&returnDistinctValues='\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | resp = <Response [200]>\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | datadict = {'error': {'code': 400, 'details': [], 'extendedCode': -2147220985, 'message': 'Unable to complete operation.'}}\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | code = 400\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     def query(self, raw=False, strict=False, **kwargs):\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         \"\"\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         A query function to extract data out of MapServer layers. I've exposed\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         every option here\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         Parameters\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         ----------\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         where: str, required\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     sql query string.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         out_fields: list or str\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     fields to pass from the header out (default: '*')\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         return_geometry: bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     bool describing whether to return geometry or just the\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     dataframe. (default: True)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         geometry_precision: str\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     a number of significant digits to which the output of the\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     query should be truncated (default: None)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         out_sr: int or str\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     ESRI WKID spatial reference into which to reproject\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     the geodata (default: None)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         return_ids_only: bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     bool stating to only return ObjectIDs. (default: False)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         return_z: bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                      whether to return z components of shp-z, (default: False)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         return_m: bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                      whether to return m components of shp-m, (default: False)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         strict  :   bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     whether to throw an error if invalid polygons are provided from the API (True)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     or just warn that at least one polygon is invalid (default: False)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         raw : bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |               whether to provide the raw geometries from the API  (default: False)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         Returns\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         -------\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         Dataframe or GeoDataFrame containing entries from the geodatabase\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         Notes\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         -----\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         Most of the time, this should be used leaning on the SQL \"where\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         argument:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         cxn.query(where='GEOID LIKE \"06*\"')\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         In most cases, you'll be querying against layers, not MapServices\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         overall.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         \"\"\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # parse args\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         kwargs = {\"\".join(k.split(\"_\")): v for k, v in diter(kwargs)}\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # construct query string\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         self._basequery = copy.deepcopy(_basequery)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         for k, v in diter(kwargs):\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             try:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 self._basequery[k] = v\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             except KeyError:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 raise KeyError(\"Option '{k}' not recognized, check parameters\")\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         qstring = \"&\".join([\"{}={}\".format(k, v) for k, v in diter(self._basequery)])\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         self._last_query = self._baseurl + \"/query?\" + qstring\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # run query\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         resp = r.get(self._last_query + \"&f=json\")\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         resp.raise_for_status()\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         datadict = resp.json()\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         if raw:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             return datadict\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         if kwargs.get(\"returnGeometry\", \"true\") == \"false\":\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             return pd.DataFrame.from_records(\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 [x[\"attributes\"] for x in datadict[\"features\"]]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             )\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # convert to output format\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         try:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             features = datadict[\"features\"]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         except KeyError:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             code, msg = datadict[\"error\"][\"code\"], datadict[\"error\"][\"message\"]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             details = datadict[\"error\"][\"details\"]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             if details is []:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 details = \"Mapserver provided no detailed error\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             raise KeyError(\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 (\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     r\"Response from API is malformed. You may have \"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     r\"submitted too many queries, formatted the request incorrectly, \"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     r\"or experienced significant network connectivity issues.\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     r\" Check to make sure that your inputs, like placenames, are spelled\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     r\" correctly, and that your geographies match the level at which you\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     r\" intend to query. The original error from the Census is:\\n\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | >                   r\"(API ERROR {}:{}({}))\".format(code, msg, details)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 )\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             )\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | E           KeyError: 'Response from API is malformed. You may have submitted too many queries, formatted the request incorrectly, or experienced significant network connectivity issues. Check to make sure that your inputs, like placenames, are spelled correctly, and that your geographies match the level at which you intend to query. The original error from the Census is:\\\\n(API ERROR 400:Unable to complete operation.([]))'\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | cenpy/tiger.py:206: KeyError\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | ___________________________________ test_all ___________________________________\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     def test_all():\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         from cenpy import products\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # In[2]:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         chicago = products.ACS(2017).from_place(\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | >           \"Chicago, IL\", level=\"tract\", variables=[\"B00002*\", \"B01002H_001E\"]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         )\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | cenpy/tests/test_functional_products.py:16: \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | cenpy/products.py:799: in from_place\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     replace_missing=replace_missing,\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | self = Connection to ACS 5-Year Detailed Tables(ID: https://api.census.gov/data/id/ACSDT5Y2017)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | With MapServer: Census ACS 2017 WMS\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | place = 'Chicago, IL'\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | variables = ['B00001_001E', 'B00002_001E', 'B01002H_001E', 'GEO_ID']\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | place_type = None, level = 'tract', return_geometry = True\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | geometry_precision = 2, strict_within = True, return_bounds = False\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | replace_missing = True\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     def from_place(\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         self,\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         place,\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         variables=None,\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         place_type=None,\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         level=\"tract\",\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         return_geometry=True,\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         geometry_precision=2,\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         strict_within=True,\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         return_bounds=False,\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         replace_missing=True,\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     ):\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         \"\"\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         Query the Census for the given place.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         Parameters\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         ---------\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         place               : str\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                               description of the place. Should be of the form\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                               \"place, state\" or \"place\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         place_type          : str\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                               type of place to focus on, Incorporated Place, County Subdivision, or Census Designated Place.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         variables           : list or str\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                               variable or set of variables to extract from the\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                               API. Can include regex columns, which will match\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                               to any column in the product. So, ['P001001', '^P002']\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                               will match to P001001 and any column that starts with P002.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         level               : str (default: 'tract')\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                               level at which to extract the geographic data. May be\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                               limited by some products to only involve tracts. (default: 'tract')\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         return_geometry     : bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                               whether to return the geometries of the queried records. True by default, this will ensure\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                               that the return type of from_place is a geopandas.GeoDataFrame. If False, then only the\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                               records are fetched; none of the records' geometries are requested from the server. (default: True)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         geometry_precision  : int\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                               number of decimal places to preserve when getting the geometric\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                               information around each observation in `level`. (default: 2)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         strict_within       : bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                               whether to retain only geometries that are fully within the\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                               target place.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         return_bounds       : bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                               whether to return the boundary of the place being queried. (default: False)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         replace_missing     : bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                               whether to replace missing values in the data with numpy.nan,\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                               according to the standard missing values used by the ACS. (default: True)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         Notes\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         ------\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         You should always try to provide a place_type. There is a significant amount of vagueness in what is meant\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         by \"place\" that you may not get the match you intend if you do not provide a place_type.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         \"\"\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         if variables is None:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             variables = [\"NAME\"]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         name = place.split(\",\")\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         assert isinstance(name, list)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         if len(name) < 2:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             warn(\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 'Uncertain place identifier \"{}\". The place identifier should '\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 'look something like \"placename, state\" or, for larger areas, '\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 \"like Combined Statistical Areas or Metropolitan Statistical Areas,\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 '\"placename1-placename2, state1-state2-state3\"'.format(place),\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 stacklevel=2,\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             )\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         if place_type != None:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             if place_type in [\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 \"Census Designated Place\",\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 \"Incorporated Place\",\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 \"County Subdivision\",\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             ]:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 searchtarget = _places[_places[\"TYPE\"] == place_type]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             else:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 raise Exception(\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     \"place_type must be on of Census Designated Place, Incorporated Place, County Subdivision\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 )\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         else:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             searchtarget = _places.assign(TypeOrder=_places[\"TYPE\"].apply(lambda x: {}))\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         if len(name) == 2:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             name, state = name\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             searchtarget = (\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 searchtarget.assign(state=_places.STATE.str.lower())\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 .query('state == \"{}\"'.format(state.strip().lower()))\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 .TARGETNAME\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             )\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         elif len(name) == 1:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             name = name[0]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             searchtarget = searchtarget.TARGETNAME\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         else:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             raise Exception()\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         placematch = _fuzzy_match(name.strip(), searchtarget)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         placerow = _places.loc[placematch.name]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         env_name = _fuzzy_match(\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             placerow.TYPE, [layer.__repr__() for layer in self._api.mapservice.layers]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         )\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         env_layer = self._api.mapservice.layers[env_name.name]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         if place_type == \"County Subdivision\":\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             placer = \"STATE='{}' AND COUSUB='{}'\".format(\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 placerow.STATEFP, placerow.TARGETFP\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             )\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         else:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             placer = \"STATE='{}' AND PLACE='{}'\".format(placerow.STATEFP, placerow.TARGETFP)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         env = env_layer.query(where=placer)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         print(\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             \"Matched: {} to {} \"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             \"within layer {}\".format(\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 place,\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 placematch.target,\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 env_layer.__repr__().replace(\"(ESRILayer) \", \"\"),\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             )\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         )\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         geoms, data = self._from_bbox(\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             env.to_crs(epsg=4326).total_bounds,\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             variables=variables,\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             level=level,\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             return_geometry=return_geometry,\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             geometry_precision=geometry_precision,\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             strict_within=False,\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             return_bounds=False,\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             replace_missing=replace_missing,\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         )\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         if strict_within:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | >           geoms = geopandas.sjoin(geoms, env[[\"geometry\"]], how=\"inner\", predicate=\"within\")\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | E           TypeError: sjoin() got an unexpected keyword argument 'predicate'\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | cenpy/products.py:222: TypeError\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | ----------------------------- Captured stdout call -----------------------------\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Matched: Chicago, IL to Chicago city within layer Incorporated Places\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | ________________ Geoparser_Test.test_pysal_holed_multi_polygon _________________\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | self = (ESRILayer) Census Designated Places, raw = False, strict = False\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | kwargs = {'where': 'PLACE=21012'}, k = 'where', v = 'PLACE=21012'\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | qstring = 'where=PLACE=21012&text=&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=&relationParam=...rderByFields=&groupByFieldsForStatistics=&outStatistics=&returnZ=False&returnM=False&gdbVersion=&returnDistinctValues='\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | resp = <Response [200]>\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | datadict = {'error': {'code': 400, 'details': [], 'extendedCode': -2147220985, 'message': 'Unable to complete operation.'}}\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | code = 400\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     def query(self, raw=False, strict=False, **kwargs):\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         \"\"\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         A query function to extract data out of MapServer layers. I've exposed\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         every option here\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         Parameters\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         ----------\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         where: str, required\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     sql query string.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         out_fields: list or str\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     fields to pass from the header out (default: '*')\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         return_geometry: bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     bool describing whether to return geometry or just the\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     dataframe. (default: True)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         geometry_precision: str\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     a number of significant digits to which the output of the\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     query should be truncated (default: None)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         out_sr: int or str\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     ESRI WKID spatial reference into which to reproject\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     the geodata (default: None)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         return_ids_only: bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     bool stating to only return ObjectIDs. (default: False)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         return_z: bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                      whether to return z components of shp-z, (default: False)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         return_m: bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                      whether to return m components of shp-m, (default: False)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         strict  :   bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     whether to throw an error if invalid polygons are provided from the API (True)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     or just warn that at least one polygon is invalid (default: False)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         raw : bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |               whether to provide the raw geometries from the API  (default: False)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         Returns\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         -------\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         Dataframe or GeoDataFrame containing entries from the geodatabase\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         Notes\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         -----\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         Most of the time, this should be used leaning on the SQL \"where\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         argument:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         cxn.query(where='GEOID LIKE \"06*\"')\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         In most cases, you'll be querying against layers, not MapServices\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         overall.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         \"\"\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # parse args\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         kwargs = {\"\".join(k.split(\"_\")): v for k, v in diter(kwargs)}\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # construct query string\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         self._basequery = copy.deepcopy(_basequery)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         for k, v in diter(kwargs):\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             try:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 self._basequery[k] = v\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             except KeyError:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 raise KeyError(\"Option '{k}' not recognized, check parameters\")\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         qstring = \"&\".join([\"{}={}\".format(k, v) for k, v in diter(self._basequery)])\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         self._last_query = self._baseurl + \"/query?\" + qstring\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # run query\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         resp = r.get(self._last_query + \"&f=json\")\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         resp.raise_for_status()\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         datadict = resp.json()\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         if raw:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             return datadict\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         if kwargs.get(\"returnGeometry\", \"true\") == \"false\":\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             return pd.DataFrame.from_records(\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 [x[\"attributes\"] for x in datadict[\"features\"]]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             )\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # convert to output format\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         try:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | >           features = datadict[\"features\"]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | E           KeyError: 'features'\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | cenpy/tiger.py:192: KeyError\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | During handling of the above exception, another exception occurred:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | self = <cenpy.tests.test_parser.Geoparser_Test testMethod=test_pysal_holed_multi_polygon>\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     def test_pysal_holed_multi_polygon(self):\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # East Porterville CDP, MultiPolygon with Holes\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | >       geodata = self.conn.mapservice.query(layer=36, where=\"PLACE=21012\")\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | cenpy/tests/test_parser.py:65: \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | cenpy/tiger.py:272: in query\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     return self.layers[layer_result].query(**kwargs)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | self = (ESRILayer) Census Designated Places, raw = False, strict = False\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | kwargs = {'where': 'PLACE=21012'}, k = 'where', v = 'PLACE=21012'\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | qstring = 'where=PLACE=21012&text=&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=&relationParam=...rderByFields=&groupByFieldsForStatistics=&outStatistics=&returnZ=False&returnM=False&gdbVersion=&returnDistinctValues='\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | resp = <Response [200]>\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | datadict = {'error': {'code': 400, 'details': [], 'extendedCode': -2147220985, 'message': 'Unable to complete operation.'}}\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | code = 400\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     def query(self, raw=False, strict=False, **kwargs):\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         \"\"\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         A query function to extract data out of MapServer layers. I've exposed\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         every option here\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         Parameters\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         ----------\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         where: str, required\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     sql query string.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         out_fields: list or str\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     fields to pass from the header out (default: '*')\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         return_geometry: bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     bool describing whether to return geometry or just the\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     dataframe. (default: True)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         geometry_precision: str\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     a number of significant digits to which the output of the\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     query should be truncated (default: None)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         out_sr: int or str\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     ESRI WKID spatial reference into which to reproject\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     the geodata (default: None)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         return_ids_only: bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     bool stating to only return ObjectIDs. (default: False)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         return_z: bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                      whether to return z components of shp-z, (default: False)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         return_m: bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                      whether to return m components of shp-m, (default: False)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         strict  :   bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     whether to throw an error if invalid polygons are provided from the API (True)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     or just warn that at least one polygon is invalid (default: False)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         raw : bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |               whether to provide the raw geometries from the API  (default: False)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         Returns\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         -------\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         Dataframe or GeoDataFrame containing entries from the geodatabase\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         Notes\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         -----\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         Most of the time, this should be used leaning on the SQL \"where\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         argument:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         cxn.query(where='GEOID LIKE \"06*\"')\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         In most cases, you'll be querying against layers, not MapServices\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         overall.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         \"\"\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # parse args\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         kwargs = {\"\".join(k.split(\"_\")): v for k, v in diter(kwargs)}\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # construct query string\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         self._basequery = copy.deepcopy(_basequery)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         for k, v in diter(kwargs):\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             try:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 self._basequery[k] = v\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             except KeyError:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 raise KeyError(\"Option '{k}' not recognized, check parameters\")\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         qstring = \"&\".join([\"{}={}\".format(k, v) for k, v in diter(self._basequery)])\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         self._last_query = self._baseurl + \"/query?\" + qstring\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # run query\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         resp = r.get(self._last_query + \"&f=json\")\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         resp.raise_for_status()\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         datadict = resp.json()\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         if raw:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             return datadict\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         if kwargs.get(\"returnGeometry\", \"true\") == \"false\":\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             return pd.DataFrame.from_records(\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 [x[\"attributes\"] for x in datadict[\"features\"]]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             )\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # convert to output format\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         try:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             features = datadict[\"features\"]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         except KeyError:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             code, msg = datadict[\"error\"][\"code\"], datadict[\"error\"][\"message\"]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             details = datadict[\"error\"][\"details\"]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             if details is []:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 details = \"Mapserver provided no detailed error\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             raise KeyError(\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 (\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     r\"Response from API is malformed. You may have \"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     r\"submitted too many queries, formatted the request incorrectly, \"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     r\"or experienced significant network connectivity issues.\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     r\" Check to make sure that your inputs, like placenames, are spelled\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     r\" correctly, and that your geographies match the level at which you\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     r\" intend to query. The original error from the Census is:\\n\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | >                   r\"(API ERROR {}:{}({}))\".format(code, msg, details)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 )\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             )\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | E           KeyError: 'Response from API is malformed. You may have submitted too many queries, formatted the request incorrectly, or experienced significant network connectivity issues. Check to make sure that your inputs, like placenames, are spelled correctly, and that your geographies match the level at which you intend to query. The original error from the Census is:\\\\n(API ERROR 400:Unable to complete operation.([]))'\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | cenpy/tiger.py:206: KeyError\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | ___________________ Geoparser_Test.test_pysal_holed_polygon ____________________\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | self = (ESRILayer) Census Designated Places, raw = False, strict = False\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | kwargs = {'where': 'PLACE=84578'}, k = 'where', v = 'PLACE=84578'\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | qstring = 'where=PLACE=84578&text=&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=&relationParam=...rderByFields=&groupByFieldsForStatistics=&outStatistics=&returnZ=False&returnM=False&gdbVersion=&returnDistinctValues='\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | resp = <Response [200]>\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | datadict = {'error': {'code': 400, 'details': [], 'extendedCode': -2147220985, 'message': 'Unable to complete operation.'}}\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | code = 400\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     def query(self, raw=False, strict=False, **kwargs):\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         \"\"\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         A query function to extract data out of MapServer layers. I've exposed\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         every option here\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         Parameters\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         ----------\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         where: str, required\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     sql query string.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         out_fields: list or str\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     fields to pass from the header out (default: '*')\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         return_geometry: bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     bool describing whether to return geometry or just the\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     dataframe. (default: True)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         geometry_precision: str\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     a number of significant digits to which the output of the\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     query should be truncated (default: None)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         out_sr: int or str\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     ESRI WKID spatial reference into which to reproject\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     the geodata (default: None)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         return_ids_only: bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     bool stating to only return ObjectIDs. (default: False)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         return_z: bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                      whether to return z components of shp-z, (default: False)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         return_m: bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                      whether to return m components of shp-m, (default: False)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         strict  :   bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     whether to throw an error if invalid polygons are provided from the API (True)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     or just warn that at least one polygon is invalid (default: False)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         raw : bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |               whether to provide the raw geometries from the API  (default: False)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         Returns\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         -------\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         Dataframe or GeoDataFrame containing entries from the geodatabase\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         Notes\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         -----\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         Most of the time, this should be used leaning on the SQL \"where\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         argument:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         cxn.query(where='GEOID LIKE \"06*\"')\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         In most cases, you'll be querying against layers, not MapServices\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         overall.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         \"\"\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # parse args\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         kwargs = {\"\".join(k.split(\"_\")): v for k, v in diter(kwargs)}\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # construct query string\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         self._basequery = copy.deepcopy(_basequery)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         for k, v in diter(kwargs):\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             try:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 self._basequery[k] = v\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             except KeyError:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 raise KeyError(\"Option '{k}' not recognized, check parameters\")\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         qstring = \"&\".join([\"{}={}\".format(k, v) for k, v in diter(self._basequery)])\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         self._last_query = self._baseurl + \"/query?\" + qstring\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # run query\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         resp = r.get(self._last_query + \"&f=json\")\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         resp.raise_for_status()\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         datadict = resp.json()\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         if raw:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             return datadict\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         if kwargs.get(\"returnGeometry\", \"true\") == \"false\":\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             return pd.DataFrame.from_records(\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 [x[\"attributes\"] for x in datadict[\"features\"]]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             )\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # convert to output format\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         try:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | >           features = datadict[\"features\"]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | E           KeyError: 'features'\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | cenpy/tiger.py:192: KeyError\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | During handling of the above exception, another exception occurred:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | self = <cenpy.tests.test_parser.Geoparser_Test testMethod=test_pysal_holed_polygon>\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     def test_pysal_holed_polygon(self):\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # West Modesto CDP, Polygon with Holes\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | >       geodata = self.conn.mapservice.query(layer=36, where=\"PLACE=84578\")\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | cenpy/tests/test_parser.py:57: \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | cenpy/tiger.py:272: in query\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     return self.layers[layer_result].query(**kwargs)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | self = (ESRILayer) Census Designated Places, raw = False, strict = False\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | kwargs = {'where': 'PLACE=84578'}, k = 'where', v = 'PLACE=84578'\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | qstring = 'where=PLACE=84578&text=&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=&relationParam=...rderByFields=&groupByFieldsForStatistics=&outStatistics=&returnZ=False&returnM=False&gdbVersion=&returnDistinctValues='\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | resp = <Response [200]>\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | datadict = {'error': {'code': 400, 'details': [], 'extendedCode': -2147220985, 'message': 'Unable to complete operation.'}}\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | code = 400\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     def query(self, raw=False, strict=False, **kwargs):\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         \"\"\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         A query function to extract data out of MapServer layers. I've exposed\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         every option here\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         Parameters\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         ----------\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         where: str, required\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     sql query string.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         out_fields: list or str\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     fields to pass from the header out (default: '*')\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         return_geometry: bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     bool describing whether to return geometry or just the\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     dataframe. (default: True)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         geometry_precision: str\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     a number of significant digits to which the output of the\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     query should be truncated (default: None)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         out_sr: int or str\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     ESRI WKID spatial reference into which to reproject\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     the geodata (default: None)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         return_ids_only: bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     bool stating to only return ObjectIDs. (default: False)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         return_z: bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                      whether to return z components of shp-z, (default: False)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         return_m: bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                      whether to return m components of shp-m, (default: False)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         strict  :   bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     whether to throw an error if invalid polygons are provided from the API (True)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     or just warn that at least one polygon is invalid (default: False)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         raw : bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |               whether to provide the raw geometries from the API  (default: False)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         Returns\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         -------\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         Dataframe or GeoDataFrame containing entries from the geodatabase\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         Notes\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         -----\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         Most of the time, this should be used leaning on the SQL \"where\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         argument:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         cxn.query(where='GEOID LIKE \"06*\"')\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         In most cases, you'll be querying against layers, not MapServices\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         overall.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         \"\"\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # parse args\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         kwargs = {\"\".join(k.split(\"_\")): v for k, v in diter(kwargs)}\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # construct query string\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         self._basequery = copy.deepcopy(_basequery)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         for k, v in diter(kwargs):\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             try:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 self._basequery[k] = v\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             except KeyError:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 raise KeyError(\"Option '{k}' not recognized, check parameters\")\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         qstring = \"&\".join([\"{}={}\".format(k, v) for k, v in diter(self._basequery)])\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         self._last_query = self._baseurl + \"/query?\" + qstring\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # run query\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         resp = r.get(self._last_query + \"&f=json\")\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         resp.raise_for_status()\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         datadict = resp.json()\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         if raw:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             return datadict\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         if kwargs.get(\"returnGeometry\", \"true\") == \"false\":\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             return pd.DataFrame.from_records(\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 [x[\"attributes\"] for x in datadict[\"features\"]]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             )\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # convert to output format\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         try:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             features = datadict[\"features\"]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         except KeyError:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             code, msg = datadict[\"error\"][\"code\"], datadict[\"error\"][\"message\"]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             details = datadict[\"error\"][\"details\"]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             if details is []:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 details = \"Mapserver provided no detailed error\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             raise KeyError(\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 (\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     r\"Response from API is malformed. You may have \"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     r\"submitted too many queries, formatted the request incorrectly, \"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     r\"or experienced significant network connectivity issues.\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     r\" Check to make sure that your inputs, like placenames, are spelled\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     r\" correctly, and that your geographies match the level at which you\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     r\" intend to query. The original error from the Census is:\\n\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | >                   r\"(API ERROR {}:{}({}))\".format(code, msg, details)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 )\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             )\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | E           KeyError: 'Response from API is malformed. You may have submitted too many queries, formatted the request incorrectly, or experienced significant network connectivity issues. Check to make sure that your inputs, like placenames, are spelled correctly, and that your geographies match the level at which you intend to query. The original error from the Census is:\\\\n(API ERROR 400:Unable to complete operation.([]))'\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | cenpy/tiger.py:206: KeyError\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | ___________________ Geoparser_Test.test_pysal_multi_polygon ____________________\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | self = (ESRILayer) Census Designated Places, raw = False, strict = False\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | kwargs = {'where': 'PLACE=21034'}, k = 'where', v = 'PLACE=21034'\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | qstring = 'where=PLACE=21034&text=&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=&relationParam=...rderByFields=&groupByFieldsForStatistics=&outStatistics=&returnZ=False&returnM=False&gdbVersion=&returnDistinctValues='\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | resp = <Response [200]>\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | datadict = {'error': {'code': 400, 'details': [], 'extendedCode': -2147220985, 'message': 'Unable to complete operation.'}}\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | code = 400\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     def query(self, raw=False, strict=False, **kwargs):\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         \"\"\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         A query function to extract data out of MapServer layers. I've exposed\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         every option here\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         Parameters\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         ----------\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         where: str, required\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     sql query string.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         out_fields: list or str\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     fields to pass from the header out (default: '*')\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         return_geometry: bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     bool describing whether to return geometry or just the\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     dataframe. (default: True)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         geometry_precision: str\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     a number of significant digits to which the output of the\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     query should be truncated (default: None)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         out_sr: int or str\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     ESRI WKID spatial reference into which to reproject\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     the geodata (default: None)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         return_ids_only: bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     bool stating to only return ObjectIDs. (default: False)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         return_z: bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                      whether to return z components of shp-z, (default: False)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         return_m: bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                      whether to return m components of shp-m, (default: False)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         strict  :   bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     whether to throw an error if invalid polygons are provided from the API (True)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     or just warn that at least one polygon is invalid (default: False)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         raw : bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |               whether to provide the raw geometries from the API  (default: False)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         Returns\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         -------\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         Dataframe or GeoDataFrame containing entries from the geodatabase\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         Notes\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         -----\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         Most of the time, this should be used leaning on the SQL \"where\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         argument:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         cxn.query(where='GEOID LIKE \"06*\"')\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         In most cases, you'll be querying against layers, not MapServices\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         overall.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         \"\"\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # parse args\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         kwargs = {\"\".join(k.split(\"_\")): v for k, v in diter(kwargs)}\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # construct query string\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         self._basequery = copy.deepcopy(_basequery)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         for k, v in diter(kwargs):\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             try:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 self._basequery[k] = v\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             except KeyError:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 raise KeyError(\"Option '{k}' not recognized, check parameters\")\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         qstring = \"&\".join([\"{}={}\".format(k, v) for k, v in diter(self._basequery)])\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         self._last_query = self._baseurl + \"/query?\" + qstring\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # run query\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         resp = r.get(self._last_query + \"&f=json\")\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         resp.raise_for_status()\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         datadict = resp.json()\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         if raw:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             return datadict\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         if kwargs.get(\"returnGeometry\", \"true\") == \"false\":\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             return pd.DataFrame.from_records(\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 [x[\"attributes\"] for x in datadict[\"features\"]]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             )\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # convert to output format\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         try:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | >           features = datadict[\"features\"]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | E           KeyError: 'features'\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | cenpy/tiger.py:192: KeyError\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | During handling of the above exception, another exception occurred:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | self = <cenpy.tests.test_parser.Geoparser_Test testMethod=test_pysal_multi_polygon>\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     def test_pysal_multi_polygon(self):\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # East Rancho Dominguez CDP, MultiPolygon\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | >       geodata = self.conn.mapservice.query(layer=36, where=\"PLACE=21034\")\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | cenpy/tests/test_parser.py:49: \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | cenpy/tiger.py:272: in query\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     return self.layers[layer_result].query(**kwargs)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | self = (ESRILayer) Census Designated Places, raw = False, strict = False\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | kwargs = {'where': 'PLACE=21034'}, k = 'where', v = 'PLACE=21034'\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | qstring = 'where=PLACE=21034&text=&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=&relationParam=...rderByFields=&groupByFieldsForStatistics=&outStatistics=&returnZ=False&returnM=False&gdbVersion=&returnDistinctValues='\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | resp = <Response [200]>\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | datadict = {'error': {'code': 400, 'details': [], 'extendedCode': -2147220985, 'message': 'Unable to complete operation.'}}\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | code = 400\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     def query(self, raw=False, strict=False, **kwargs):\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         \"\"\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         A query function to extract data out of MapServer layers. I've exposed\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         every option here\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         Parameters\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         ----------\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         where: str, required\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     sql query string.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         out_fields: list or str\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     fields to pass from the header out (default: '*')\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         return_geometry: bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     bool describing whether to return geometry or just the\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     dataframe. (default: True)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         geometry_precision: str\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     a number of significant digits to which the output of the\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     query should be truncated (default: None)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         out_sr: int or str\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     ESRI WKID spatial reference into which to reproject\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     the geodata (default: None)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         return_ids_only: bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     bool stating to only return ObjectIDs. (default: False)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         return_z: bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                      whether to return z components of shp-z, (default: False)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         return_m: bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                      whether to return m components of shp-m, (default: False)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         strict  :   bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     whether to throw an error if invalid polygons are provided from the API (True)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     or just warn that at least one polygon is invalid (default: False)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         raw : bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |               whether to provide the raw geometries from the API  (default: False)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         Returns\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         -------\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         Dataframe or GeoDataFrame containing entries from the geodatabase\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         Notes\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         -----\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         Most of the time, this should be used leaning on the SQL \"where\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         argument:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         cxn.query(where='GEOID LIKE \"06*\"')\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         In most cases, you'll be querying against layers, not MapServices\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         overall.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         \"\"\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # parse args\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         kwargs = {\"\".join(k.split(\"_\")): v for k, v in diter(kwargs)}\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # construct query string\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         self._basequery = copy.deepcopy(_basequery)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         for k, v in diter(kwargs):\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             try:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 self._basequery[k] = v\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             except KeyError:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 raise KeyError(\"Option '{k}' not recognized, check parameters\")\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         qstring = \"&\".join([\"{}={}\".format(k, v) for k, v in diter(self._basequery)])\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         self._last_query = self._baseurl + \"/query?\" + qstring\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # run query\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         resp = r.get(self._last_query + \"&f=json\")\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         resp.raise_for_status()\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         datadict = resp.json()\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         if raw:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             return datadict\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         if kwargs.get(\"returnGeometry\", \"true\") == \"false\":\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             return pd.DataFrame.from_records(\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 [x[\"attributes\"] for x in datadict[\"features\"]]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             )\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # convert to output format\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         try:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             features = datadict[\"features\"]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         except KeyError:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             code, msg = datadict[\"error\"][\"code\"], datadict[\"error\"][\"message\"]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             details = datadict[\"error\"][\"details\"]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             if details is []:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 details = \"Mapserver provided no detailed error\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             raise KeyError(\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 (\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     r\"Response from API is malformed. You may have \"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     r\"submitted too many queries, formatted the request incorrectly, \"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     r\"or experienced significant network connectivity issues.\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     r\" Check to make sure that your inputs, like placenames, are spelled\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     r\" correctly, and that your geographies match the level at which you\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     r\" intend to query. The original error from the Census is:\\n\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | >                   r\"(API ERROR {}:{}({}))\".format(code, msg, details)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 )\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             )\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | E           KeyError: 'Response from API is malformed. You may have submitted too many queries, formatted the request incorrectly, or experienced significant network connectivity issues. Check to make sure that your inputs, like placenames, are spelled correctly, and that your geographies match the level at which you intend to query. The original error from the Census is:\\\\n(API ERROR 400:Unable to complete operation.([]))'\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | cenpy/tiger.py:206: KeyError\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | ______________________ Geoparser_Test.test_pysal_polygon _______________________\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | self = (ESRILayer) Census Designated Places, raw = False, strict = False\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | kwargs = {'where': 'PLACE=36868'}, k = 'where', v = 'PLACE=36868'\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | qstring = 'where=PLACE=36868&text=&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=&relationParam=...rderByFields=&groupByFieldsForStatistics=&outStatistics=&returnZ=False&returnM=False&gdbVersion=&returnDistinctValues='\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | resp = <Response [200]>\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | datadict = {'error': {'code': 400, 'details': [], 'extendedCode': -2147220985, 'message': 'Unable to complete operation.'}}\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | code = 400\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     def query(self, raw=False, strict=False, **kwargs):\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         \"\"\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         A query function to extract data out of MapServer layers. I've exposed\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         every option here\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         Parameters\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         ----------\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         where: str, required\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     sql query string.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         out_fields: list or str\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     fields to pass from the header out (default: '*')\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         return_geometry: bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     bool describing whether to return geometry or just the\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     dataframe. (default: True)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         geometry_precision: str\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     a number of significant digits to which the output of the\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     query should be truncated (default: None)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         out_sr: int or str\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     ESRI WKID spatial reference into which to reproject\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     the geodata (default: None)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         return_ids_only: bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     bool stating to only return ObjectIDs. (default: False)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         return_z: bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                      whether to return z components of shp-z, (default: False)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         return_m: bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                      whether to return m components of shp-m, (default: False)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         strict  :   bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     whether to throw an error if invalid polygons are provided from the API (True)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     or just warn that at least one polygon is invalid (default: False)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         raw : bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |               whether to provide the raw geometries from the API  (default: False)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         Returns\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         -------\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         Dataframe or GeoDataFrame containing entries from the geodatabase\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         Notes\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         -----\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         Most of the time, this should be used leaning on the SQL \"where\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         argument:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         cxn.query(where='GEOID LIKE \"06*\"')\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         In most cases, you'll be querying against layers, not MapServices\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         overall.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         \"\"\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # parse args\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         kwargs = {\"\".join(k.split(\"_\")): v for k, v in diter(kwargs)}\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # construct query string\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         self._basequery = copy.deepcopy(_basequery)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         for k, v in diter(kwargs):\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             try:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 self._basequery[k] = v\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             except KeyError:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 raise KeyError(\"Option '{k}' not recognized, check parameters\")\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         qstring = \"&\".join([\"{}={}\".format(k, v) for k, v in diter(self._basequery)])\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         self._last_query = self._baseurl + \"/query?\" + qstring\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # run query\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         resp = r.get(self._last_query + \"&f=json\")\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         resp.raise_for_status()\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         datadict = resp.json()\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         if raw:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             return datadict\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         if kwargs.get(\"returnGeometry\", \"true\") == \"false\":\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             return pd.DataFrame.from_records(\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 [x[\"attributes\"] for x in datadict[\"features\"]]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             )\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # convert to output format\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         try:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | >           features = datadict[\"features\"]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | E           KeyError: 'features'\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | cenpy/tiger.py:192: KeyError\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | During handling of the above exception, another exception occurred:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | self = <cenpy.tests.test_parser.Geoparser_Test testMethod=test_pysal_polygon>\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     def test_pysal_polygon(self):\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # Isla Vista CDP, Polygon\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | >       geodata = self.conn.mapservice.query(layer=36, where=\"PLACE=36868\")\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | cenpy/tests/test_parser.py:41: \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | cenpy/tiger.py:272: in query\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     return self.layers[layer_result].query(**kwargs)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | self = (ESRILayer) Census Designated Places, raw = False, strict = False\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | kwargs = {'where': 'PLACE=36868'}, k = 'where', v = 'PLACE=36868'\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | qstring = 'where=PLACE=36868&text=&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=&relationParam=...rderByFields=&groupByFieldsForStatistics=&outStatistics=&returnZ=False&returnM=False&gdbVersion=&returnDistinctValues='\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | resp = <Response [200]>\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | datadict = {'error': {'code': 400, 'details': [], 'extendedCode': -2147220985, 'message': 'Unable to complete operation.'}}\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | code = 400\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     def query(self, raw=False, strict=False, **kwargs):\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         \"\"\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         A query function to extract data out of MapServer layers. I've exposed\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         every option here\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         Parameters\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         ----------\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         where: str, required\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     sql query string.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         out_fields: list or str\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     fields to pass from the header out (default: '*')\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         return_geometry: bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     bool describing whether to return geometry or just the\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     dataframe. (default: True)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         geometry_precision: str\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     a number of significant digits to which the output of the\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     query should be truncated (default: None)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         out_sr: int or str\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     ESRI WKID spatial reference into which to reproject\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     the geodata (default: None)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         return_ids_only: bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     bool stating to only return ObjectIDs. (default: False)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         return_z: bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                      whether to return z components of shp-z, (default: False)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         return_m: bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                      whether to return m components of shp-m, (default: False)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         strict  :   bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     whether to throw an error if invalid polygons are provided from the API (True)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     or just warn that at least one polygon is invalid (default: False)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         raw : bool\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |               whether to provide the raw geometries from the API  (default: False)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         Returns\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         -------\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         Dataframe or GeoDataFrame containing entries from the geodatabase\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         Notes\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         -----\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         Most of the time, this should be used leaning on the SQL \"where\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         argument:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         cxn.query(where='GEOID LIKE \"06*\"')\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         In most cases, you'll be querying against layers, not MapServices\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         overall.\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         \"\"\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # parse args\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         kwargs = {\"\".join(k.split(\"_\")): v for k, v in diter(kwargs)}\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |     \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # construct query string\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         self._basequery = copy.deepcopy(_basequery)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         for k, v in diter(kwargs):\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             try:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 self._basequery[k] = v\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             except KeyError:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 raise KeyError(\"Option '{k}' not recognized, check parameters\")\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         qstring = \"&\".join([\"{}={}\".format(k, v) for k, v in diter(self._basequery)])\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         self._last_query = self._baseurl + \"/query?\" + qstring\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # run query\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         resp = r.get(self._last_query + \"&f=json\")\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         resp.raise_for_status()\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         datadict = resp.json()\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         if raw:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             return datadict\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         if kwargs.get(\"returnGeometry\", \"true\") == \"false\":\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             return pd.DataFrame.from_records(\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 [x[\"attributes\"] for x in datadict[\"features\"]]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             )\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         # convert to output format\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         try:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             features = datadict[\"features\"]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |         except KeyError:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             code, msg = datadict[\"error\"][\"code\"], datadict[\"error\"][\"message\"]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             details = datadict[\"error\"][\"details\"]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             if details is []:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 details = \"Mapserver provided no detailed error\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             raise KeyError(\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 (\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     r\"Response from API is malformed. You may have \"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     r\"submitted too many queries, formatted the request incorrectly, \"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     r\"or experienced significant network connectivity issues.\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     r\" Check to make sure that your inputs, like placenames, are spelled\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     r\" correctly, and that your geographies match the level at which you\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                     r\" intend to query. The original error from the Census is:\\n\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | >                   r\"(API ERROR {}:{}({}))\".format(code, msg, details)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |                 )\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   |             )\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | E           KeyError: 'Response from API is malformed. You may have submitted too many queries, formatted the request incorrectly, or experienced significant network connectivity issues. Check to make sure that your inputs, like placenames, are spelled correctly, and that your geographies match the level at which you intend to query. The original error from the Census is:\\\\n(API ERROR 400:Unable to complete operation.([]))'\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | cenpy/tiger.py:206: KeyError\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | - generated xml file: /tmp/558156d8-17ed-11ee-8a50-bb14de238602/cenpy-devs-cenpy/report.xml -\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | =========================== short test summary info ============================\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | FAILED cenpy/tests/test_functional.py::test_all - KeyError: 'Response from AP...\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | FAILED cenpy/tests/test_functional_products.py::test_all - TypeError: sjoin()...\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | FAILED cenpy/tests/test_parser.py::Geoparser_Test::test_pysal_holed_multi_polygon\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | FAILED cenpy/tests/test_parser.py::Geoparser_Test::test_pysal_holed_polygon\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | FAILED cenpy/tests/test_parser.py::Geoparser_Test::test_pysal_multi_polygon\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | FAILED cenpy/tests/test_parser.py::Geoparser_Test::test_pysal_polygon - KeyEr...\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | =================== 6 failed, 6 passed in 120.87s (0:02:00) ====================\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \u274c  Failure - Main Test with pytest - bash\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)] exitcode '1': failure\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)] \u2b50 Run Post Setup micromamba\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/mamba-org-provision-with-micromamba@main/dist/post/index.js] user= workdir=\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \ud83d\udcac  ::debug::inputs.postDeinit: auto\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \ud83d\udcac  ::debug::inputs.micromambaVersion: latest\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \u2753  ::group::Deinitializing micromamba ...\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \ud83d\udcac  ::debug::Running shell command [\"/home/runneradmin/micromamba-bin/micromamba\",[\"shell\",\"deinit\",\"-s\",\"zsh\",\"-p\",\"/home/runneradmin/micromamba-root\",\"-y\",\"--log-level\",\"warning\"]]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | [command]/home/runneradmin/micromamba-bin/micromamba shell deinit -s zsh -p /home/runneradmin/micromamba-root -y --log-level warning\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Resetting RC file \"/home/runneradmin/.zshrc\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Deleting config for root prefix \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Clearing mamba executable environment variable\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Removing the following in your \"/home/runneradmin/.zshrc\" file\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | # >>> mamba initialize >>>\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | ...\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | # <<< mamba initialize <<<\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \ud83d\udcac  ::debug::Running shell command [\"/home/runneradmin/micromamba-bin/micromamba\",[\"shell\",\"deinit\",\"-s\",\"bash\",\"-p\",\"/home/runneradmin/micromamba-root\",\"-y\",\"--log-level\",\"warning\"]]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | [command]/home/runneradmin/micromamba-bin/micromamba shell deinit -s bash -p /home/runneradmin/micromamba-root -y --log-level warning\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Resetting RC file \"/home/runneradmin/.bashrc\"\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Deleting config for root prefix \n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Clearing mamba executable environment variable\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Removing the following in your \"/home/runneradmin/.bashrc\" file\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | # >>> mamba initialize >>>\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | ...\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | # <<< mamba initialize <<<\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \u2753  ::endgroup::\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \ud83d\udcac  ::debug::Checking zstd --version\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \ud83d\udcac  ::debug::*** zstd command line interface 64-bits v1.5.0, by Yann Collet ***\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \ud83d\udcac  ::debug::implicitDescendants 'false'\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \ud83d\udcac  ::debug::followSymbolicLinks 'true'\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \ud83d\udcac  ::debug::implicitDescendants 'false'\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \ud83d\udcac  ::debug::omitBrokenSymbolicLinks 'true'\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \ud83d\udcac  ::debug::Search path '/home/runneradmin/micromamba-bin'\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \ud83d\udcac  ::debug::Matched: ../../../home/runneradmin/micromamba-bin\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \ud83d\udcac  ::debug::Cache Paths:\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \ud83d\udcac  ::debug::[\"../../../home/runneradmin/micromamba-bin\"]\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \ud83d\udcac  ::debug::Archive Path: /tmp/6f0f1317-5b62-4dcb-b47e-1256afe17173/cache.tzst\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | [command]/usr/bin/tar --posix -cf cache.tzst --exclude cache.tzst -P -C /tmp/558156d8-17ed-11ee-8a50-bb14de238602/cenpy-devs-cenpy --files-from manifest.txt --use-compress-program zstdmt\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \ud83d\udcac  ::debug::File Size: 5461257\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \ud83d\udcac  ::debug::Reserving Cache\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:42481/_apis/artifactcache/caches\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \ud83d\udcac  ::debug::Saving Cache (ID: 1)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \ud83d\udcac  ::debug::Upload cache\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:42481/_apis/artifactcache/caches/1\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \ud83d\udcac  ::debug::Upload concurrency: 4\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \ud83d\udcac  ::debug::Upload chunk size: 33554432\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \ud83d\udcac  ::debug::Awaiting all uploads\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \ud83d\udcac  ::debug::Uploading chunk of size 5461257 bytes at offset 0 with content range: bytes 0-5461256/*\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \ud83d\udcac  ::debug::Commiting cache\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Cache Size: ~5 MB (5461257 B)\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:42481/_apis/artifactcache/caches/1\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Cache saved successfully\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   | Cache saved with key: micromamba-bin https://micro.mamba.pm/api/micromamba/linux-64/latest Sat Jul 01 2023 YYY\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \u2705  Success - Post Setup micromamba\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)]   \u2699  ::set-env:: MSYS=winsymlinks:nativestrict\n[b7d82ea6-4493-46c7-8130-5dd01e1bc83c/CenPy Tests (ubuntu-latest, .ci/py36.yml)] \ud83c\udfc1  Job failed\n",
        "stderr": "Error: Job 'CenPy Tests (${{ matrix.os }}, ${{ matrix.environment-file }})' failed\n",
        "workflow": {
            "path": "/tmp/558156d8-17ed-11ee-8a50-bb14de238602/cenpy-devs-cenpy/.github/workflows/build-crawler.yml",
            "type": "pytest"
        },
        "workflow_name": "b7d82ea6-4493-46c7-8130-5dd01e1bc83c",
        "build_tool": "pytest",
        "elapsed_time": 333.3510811328888
    }
}