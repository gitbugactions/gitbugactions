{
    "repository": "fsspec/adlfs",
    "stars": 130,
    "language": "python",
    "size": 1091,
    "clone_url": "https://github.com/fsspec/adlfs.git",
    "timestamp": "2023-06-28T12:24:56.603124Z",
    "clone_success": true,
    "number_of_actions": 3,
    "number_of_test_actions": 1,
    "actions_successful": false,
    "actions_build_tools": [
        "unknown",
        "unknown",
        "pytest"
    ],
    "actions_test_build_tools": [
        "pytest"
    ],
    "actions_run": {
        "failed": true,
        "tests": [
            {
                "classname": "adlfs.tests.test_fetch_range",
                "name": "test_fetch_entire_blob",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_fetch_range",
                "name": "test_fetch_first_half",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_fetch_range",
                "name": "test_fetch_second_half",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_fetch_range",
                "name": "test_fetch_middle",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_fetch_range",
                "name": "test_fetch_length_is_none",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_loop",
                "name": "test_fs_loop",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_loop",
                "name": "test_file_loop",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_connect",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_ls",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_ls_no_listings_cache",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_ls_versioned",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_info[False]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_info[True]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_info_missing[does-not-exist]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_info_missing[does-not-exist/foo]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_info_missing[data/does_not_exist]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_info_missing[data/root/does_not_exist]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_time_info",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_find",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_find_missing",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_glob",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_glob_full_uri",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_open_file",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_rm",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_rm_recursive",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_rm_multiple_items",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_mkdir",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_makedir",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_makedir_rmdir",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_append_operation",
                "time": 0.0,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "unconditional skip",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_mkdir_rm_recursive",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_deep_paths",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_large_blob",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_large_upload_overflow",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_dask_parquet",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_metadata_write",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_put_file",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_isdir",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_isfile",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_isfile_versioned",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_isdir_cache",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_cat",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_cat_file",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_cat_file_missing",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_cat_file_versioned",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_url",
                "time": 0.001,
                "results": [
                    {
                        "result": "Skipped",
                        "message": "Bug in Azurite Storage Emulator v3.15.0 gives 403 status_code",
                        "type": "pytest.skip"
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_url_versioned",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_cp_file",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_cp_file_versioned",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_exists",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_exists_directory",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_exists_versioned",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_find_with_prefix",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_strip_protocol[container/file-None]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_strip_protocol[container/file-abfs://]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_strip_protocol[container/file-az://]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_strip_protocol[container/file?versionid=1234-None]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_strip_protocol[container/file?versionid=1234-abfs://]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_strip_protocol[container/file?versionid=1234-az://]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_split_path[None-True-file-]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_split_path[None-True-file-abfs://]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_split_path[None-True-file-az://]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_split_path[None-True-dir/file-]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_split_path[None-True-dir/file-abfs://]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_split_path[None-True-dir/file-az://]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_split_path[None-False-file-]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_split_path[None-False-file-abfs://]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_split_path[None-False-file-az://]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_split_path[None-False-dir/file-]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_split_path[None-False-dir/file-abfs://]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_split_path[None-False-dir/file-az://]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_split_path[1970-01-01T00:00:00.0000000Z-True-file-]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_split_path[1970-01-01T00:00:00.0000000Z-True-file-abfs://]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_split_path[1970-01-01T00:00:00.0000000Z-True-file-az://]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_split_path[1970-01-01T00:00:00.0000000Z-True-dir/file-]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_split_path[1970-01-01T00:00:00.0000000Z-True-dir/file-abfs://]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_split_path[1970-01-01T00:00:00.0000000Z-True-dir/file-az://]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_split_path[1970-01-01T00:00:00.0000000Z-False-file-]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_split_path[1970-01-01T00:00:00.0000000Z-False-file-abfs://]",
                "time": 0.0,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_split_path[1970-01-01T00:00:00.0000000Z-False-file-az://]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_split_path[1970-01-01T00:00:00.0000000Z-False-dir/file-]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_split_path[1970-01-01T00:00:00.0000000Z-False-dir/file-abfs://]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_split_path[1970-01-01T00:00:00.0000000Z-False-dir/file-az://]",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_details_versioned",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_spec",
                "name": "test_get_file_versioned",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_uri_format",
                "name": "test_dask_parquet",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "adlfs.tests.test_uri_format",
                "name": "test_account_name_from_url",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            }
        ],
        "stdout": "[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests] \ud83d\ude80  Start image=crawlergpt:latest\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-adlfs] user=0 workdir=\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v4\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \u2601  git clone 'https://github.com/pre-commit/action' # ref=v3.0.0\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests] \u2b50 Run Pre lint\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \u2601  git clone 'https://github.com/actions/cache' # ref=v3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \u2705  Success - Pre lint\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \u2601  git clone 'https://github.com/codecov/codecov-action' # ref=v3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests] \ud83e\uddea  Matrix: map[os:ubuntu-latest pyv:3.8 reqs:earliest]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests] \u2b50 Run Main actions/checkout@v3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \u2705  Success - Main actions/checkout@v3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests] \u2b50 Run Main Set up Python\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udc33  docker cp src=/tmp/act-cache/dcb7d46b-e014-4b83-b27b-c6a972e30519/act/actions-setup-python@v4/ dst=/var/run/act/actions/actions-setup-python@v4/\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v4/] user=0 workdir=\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/setup/index.js] user= workdir=\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::Python is expected to be installed into /opt/hostedtoolcache\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \u2753  ::group::Installed versions\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::Semantic version spec of 3.8 is 3.8\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::isExplicit: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::explicit? false\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::explicit? true\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::explicit? true\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::explicit? true\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::explicit? true\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::explicit? true\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::explicit? true\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::evaluating 6 versions\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::matched: 3.8.11\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.8.11/x64\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::Found tool in cache Python 3.8.11 x64\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Successfully set up CPython (3.8.11)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \u2753  ::endgroup::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::followSymbolicLinks 'true'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::followSymbolicLinks 'true'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::implicitDescendants 'true'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::matchDirectories 'true'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::omitBrokenSymbolicLinks 'true'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::Search path '/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-adlfs/setup.cfg'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-adlfs/setup.cfg\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::Found 1 files to hash.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::OS Name: Ubuntu, Version: 20.04\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | [command]/opt/hostedtoolcache/Python/3.8.11/x64/bin/pip cache dir\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /home/runneradmin/.cache/pip\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::global cache directory path is /home/runneradmin/.cache/pip\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::Resolved Keys:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::[\"setup-python-Linux-20.04-Ubuntu-python-3.8.11-pip-1b64a1cc1f813dfd7d57d74a9aec7aede7f74afe0802c3c0033da2ba31eab499\",\"setup-python-Linux-20.04-Ubuntu-python-3.8.11-pip\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::Checking zstd --quiet --version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::1.5.0\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::zstd version: 1.5.0\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:42309/_apis/artifactcache/cache?keys=setup-python-Linux-20.04-Ubuntu-python-3.8.11-pip-1b64a1cc1f813dfd7d57d74a9aec7aede7f74afe0802c3c0033da2ba31eab499%252Csetup-python-Linux-20.04-Ubuntu-python-3.8.11-pip&version=79a244514713d0ea96d5d8aab70186082a897848df6e845ec8308965d2f82f4f\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::Failed to delete archive: Error: ENOENT: no such file or directory, unlink ''\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | pip cache is not found\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \u2753 add-matcher /run/act/actions/actions-setup-python@v4/.github/python.json\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \u2705  Success - Main Set up Python\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.8.11/x64\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \u2699  ::set-env:: PKG_CONFIG_PATH=/opt/hostedtoolcache/Python/3.8.11/x64/lib/pkgconfig\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \u2699  ::set-env:: Python_ROOT_DIR=/opt/hostedtoolcache/Python/3.8.11/x64\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \u2699  ::set-env:: Python2_ROOT_DIR=/opt/hostedtoolcache/Python/3.8.11/x64\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \u2699  ::set-env:: Python3_ROOT_DIR=/opt/hostedtoolcache/Python/3.8.11/x64\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.8.11/x64/lib\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \u2699  ::set-output:: python-version=3.8.11\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \u2699  ::set-output:: python-path=/opt/hostedtoolcache/Python/3.8.11/x64/bin/python\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \u2699  ::set-output:: cache-hit=false\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.8.11/x64\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.8.11/x64/bin\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests] \u2b50 Run Main install\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Requirement already satisfied: pip in /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages (21.2.4)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting pip\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading pip-23.1.2-py3-none-any.whl (2.1 MB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting wheel\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading wheel-0.40.0-py3-none-any.whl (64 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Installing collected packages: wheel, pip\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Attempting uninstall: pip\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     Found existing installation: pip 21.2.4\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     Uninstalling pip-21.2.4:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |       Successfully uninstalled pip-21.2.4\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Successfully installed pip-23.1.2 wheel-0.40.0\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting aiohttp (from -r requirements/base.txt (line 1))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading aiohttp-3.8.4-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.0 MB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 1.0/1.0 MB 13.9 MB/s eta 0:00:00\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting azure-identity (from -r requirements/base.txt (line 2))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading azure_identity-1.13.0-py3-none-any.whl (151 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 151.6/151.6 kB 11.4 MB/s eta 0:00:00\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting dask[dataframe] (from -r requirements/base.txt (line 3))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading dask-2023.5.0-py3-none-any.whl (1.2 MB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 1.2/1.2 MB 11.4 MB/s eta 0:00:00\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting docker (from -r requirements/base.txt (line 4))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading docker-6.1.3-py3-none-any.whl (148 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 148.1/148.1 kB 3.2 MB/s eta 0:00:00\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting msrestazure (from -r requirements/base.txt (line 5))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading msrestazure-0.6.4-py2.py3-none-any.whl (40 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 40.5/40.5 kB 804.7 kB/s eta 0:00:00\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting pyarrow (from -r requirements/base.txt (line 6))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading pyarrow-12.0.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (39.0 MB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 39.0/39.0 MB 20.8 MB/s eta 0:00:00\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting pytest (from -r requirements/base.txt (line 7))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading pytest-7.4.0-py3-none-any.whl (323 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 323.6/323.6 kB 27.3 MB/s eta 0:00:00\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting pytest-asyncio (from -r requirements/base.txt (line 8))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading pytest_asyncio-0.21.0-py3-none-any.whl (13 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting pytest-cov (from -r requirements/base.txt (line 9))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading pytest_cov-4.1.0-py3-none-any.whl (21 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting pytest-mock (from -r requirements/base.txt (line 10))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading pytest_mock-3.11.1-py3-none-any.whl (9.6 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting requests (from -r requirements/base.txt (line 11))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading requests-2.31.0-py3-none-any.whl (62 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 62.6/62.6 kB 5.4 MB/s eta 0:00:00\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting fsspec==2021.10.1 (from -r requirements/earliest.txt (line 2))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading fsspec-2021.10.1-py3-none-any.whl (125 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 125.6/125.6 kB 11.0 MB/s eta 0:00:00\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting azure-core==1.23.1 (from -r requirements/earliest.txt (line 3))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading azure_core-1.23.1-py3-none-any.whl (178 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 178.2/178.2 kB 3.6 MB/s eta 0:00:00\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting azure-datalake-store==0.0.46 (from -r requirements/earliest.txt (line 4))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading azure_datalake_store-0.0.46-py2.py3-none-any.whl (53 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 53.3/53.3 kB 4.0 MB/s eta 0:00:00\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting azure-storage-blob==12.12.0 (from -r requirements/earliest.txt (line 5))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading azure_storage_blob-12.12.0-py3-none-any.whl (366 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 366.4/366.4 kB 32.9 MB/s eta 0:00:00\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting six>=1.11.0 (from azure-core==1.23.1->-r requirements/earliest.txt (line 3))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading six-1.16.0-py2.py3-none-any.whl (11 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting typing-extensions>=4.0.1 (from azure-core==1.23.1->-r requirements/earliest.txt (line 3))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading typing_extensions-4.6.3-py3-none-any.whl (31 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting cffi (from azure-datalake-store==0.0.46->-r requirements/earliest.txt (line 4))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading cffi-1.15.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (442 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 442.7/442.7 kB 10.2 MB/s eta 0:00:00\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting adal>=0.4.2 (from azure-datalake-store==0.0.46->-r requirements/earliest.txt (line 4))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading adal-1.2.7-py2.py3-none-any.whl (55 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 55.5/55.5 kB 8.0 MB/s eta 0:00:00\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting msrest>=0.6.21 (from azure-storage-blob==12.12.0->-r requirements/earliest.txt (line 5))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading msrest-0.7.1-py3-none-any.whl (85 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 85.4/85.4 kB 5.2 MB/s eta 0:00:00\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting cryptography>=2.1.4 (from azure-storage-blob==12.12.0->-r requirements/earliest.txt (line 5))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading cryptography-41.0.1-cp37-abi3-manylinux_2_28_x86_64.whl (4.3 MB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 4.3/4.3 MB 21.5 MB/s eta 0:00:00\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting attrs>=17.3.0 (from aiohttp->-r requirements/base.txt (line 1))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading attrs-23.1.0-py3-none-any.whl (61 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 61.2/61.2 kB 941.3 kB/s eta 0:00:00\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting charset-normalizer<4.0,>=2.0 (from aiohttp->-r requirements/base.txt (line 1))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading charset_normalizer-3.1.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (195 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 195.9/195.9 kB 18.6 MB/s eta 0:00:00\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting multidict<7.0,>=4.5 (from aiohttp->-r requirements/base.txt (line 1))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading multidict-6.0.4-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (121 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 121.3/121.3 kB 11.7 MB/s eta 0:00:00\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting async-timeout<5.0,>=4.0.0a3 (from aiohttp->-r requirements/base.txt (line 1))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading async_timeout-4.0.2-py3-none-any.whl (5.8 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting yarl<2.0,>=1.0 (from aiohttp->-r requirements/base.txt (line 1))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading yarl-1.9.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (266 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 266.9/266.9 kB 12.7 MB/s eta 0:00:00\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting frozenlist>=1.1.1 (from aiohttp->-r requirements/base.txt (line 1))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading frozenlist-1.3.3-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (161 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 161.3/161.3 kB 4.0 MB/s eta 0:00:00\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting aiosignal>=1.1.2 (from aiohttp->-r requirements/base.txt (line 1))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading aiosignal-1.3.1-py3-none-any.whl (7.6 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting msal<2.0.0,>=1.20.0 (from azure-identity->-r requirements/base.txt (line 2))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading msal-1.22.0-py2.py3-none-any.whl (90 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 90.0/90.0 kB 4.2 MB/s eta 0:00:00\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting msal-extensions<2.0.0,>=0.3.0 (from azure-identity->-r requirements/base.txt (line 2))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading msal_extensions-1.0.0-py2.py3-none-any.whl (19 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting click>=8.0 (from dask[dataframe]->-r requirements/base.txt (line 3))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading click-8.1.3-py3-none-any.whl (96 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 96.6/96.6 kB 4.0 MB/s eta 0:00:00\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting cloudpickle>=1.5.0 (from dask[dataframe]->-r requirements/base.txt (line 3))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading cloudpickle-2.2.1-py3-none-any.whl (25 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting packaging>=20.0 (from dask[dataframe]->-r requirements/base.txt (line 3))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading packaging-23.1-py3-none-any.whl (48 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 48.9/48.9 kB 1.1 MB/s eta 0:00:00\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting partd>=1.2.0 (from dask[dataframe]->-r requirements/base.txt (line 3))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading partd-1.4.0-py3-none-any.whl (18 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting pyyaml>=5.3.1 (from dask[dataframe]->-r requirements/base.txt (line 3))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading PyYAML-6.0-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (701 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 701.2/701.2 kB 18.0 MB/s eta 0:00:00\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting toolz>=0.10.0 (from dask[dataframe]->-r requirements/base.txt (line 3))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading toolz-0.12.0-py3-none-any.whl (55 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 55.8/55.8 kB 5.5 MB/s eta 0:00:00\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting importlib-metadata>=4.13.0 (from dask[dataframe]->-r requirements/base.txt (line 3))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading importlib_metadata-6.7.0-py3-none-any.whl (22 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting numpy>=1.21 (from dask[dataframe]->-r requirements/base.txt (line 3))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading numpy-1.24.4-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (17.3 MB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 17.3/17.3 MB 26.6 MB/s eta 0:00:00\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting pandas>=1.3 (from dask[dataframe]->-r requirements/base.txt (line 3))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading pandas-2.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (12.3 MB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 12.3/12.3 MB 26.4 MB/s eta 0:00:00\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting urllib3>=1.26.0 (from docker->-r requirements/base.txt (line 4))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading urllib3-2.0.3-py3-none-any.whl (123 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 123.6/123.6 kB 11.8 MB/s eta 0:00:00\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting websocket-client>=0.32.0 (from docker->-r requirements/base.txt (line 4))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading websocket_client-1.6.1-py3-none-any.whl (56 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 56.9/56.9 kB 851.7 kB/s eta 0:00:00\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting iniconfig (from pytest->-r requirements/base.txt (line 7))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading iniconfig-2.0.0-py3-none-any.whl (5.9 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting pluggy<2.0,>=0.12 (from pytest->-r requirements/base.txt (line 7))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading pluggy-1.2.0-py3-none-any.whl (17 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting exceptiongroup>=1.0.0rc8 (from pytest->-r requirements/base.txt (line 7))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading exceptiongroup-1.1.1-py3-none-any.whl (14 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting tomli>=1.0.0 (from pytest->-r requirements/base.txt (line 7))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading tomli-2.0.1-py3-none-any.whl (12 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting coverage[toml]>=5.2.1 (from pytest-cov->-r requirements/base.txt (line 9))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading coverage-7.2.7-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (229 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 229.9/229.9 kB 12.2 MB/s eta 0:00:00\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting idna<4,>=2.5 (from requests->-r requirements/base.txt (line 11))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading idna-3.4-py3-none-any.whl (61 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 61.5/61.5 kB 1.8 MB/s eta 0:00:00\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting certifi>=2017.4.17 (from requests->-r requirements/base.txt (line 11))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading certifi-2023.5.7-py3-none-any.whl (156 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 157.0/157.0 kB 13.2 MB/s eta 0:00:00\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting PyJWT<3,>=1.0.0 (from adal>=0.4.2->azure-datalake-store==0.0.46->-r requirements/earliest.txt (line 4))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading PyJWT-2.7.0-py3-none-any.whl (22 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting python-dateutil<3,>=2.1.0 (from adal>=0.4.2->azure-datalake-store==0.0.46->-r requirements/earliest.txt (line 4))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading python_dateutil-2.8.2-py2.py3-none-any.whl (247 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 247.7/247.7 kB 6.0 MB/s eta 0:00:00\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting pycparser (from cffi->azure-datalake-store==0.0.46->-r requirements/earliest.txt (line 4))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading pycparser-2.21-py2.py3-none-any.whl (118 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 118.7/118.7 kB 6.3 MB/s eta 0:00:00\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting zipp>=0.5 (from importlib-metadata>=4.13.0->dask[dataframe]->-r requirements/base.txt (line 3))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading zipp-3.15.0-py3-none-any.whl (6.8 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting portalocker<3,>=1.0 (from msal-extensions<2.0.0,>=0.3.0->azure-identity->-r requirements/base.txt (line 2))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading portalocker-2.7.0-py2.py3-none-any.whl (15 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | INFO: pip is looking at multiple versions of msrest to determine which version is compatible with other requirements. This could take a while.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting msrest>=0.6.21 (from azure-storage-blob==12.12.0->-r requirements/earliest.txt (line 5))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading msrest-0.6.21-py2.py3-none-any.whl (85 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 85.2/85.2 kB 988.9 kB/s eta 0:00:00\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting requests-oauthlib>=0.5.0 (from msrest>=0.6.21->azure-storage-blob==12.12.0->-r requirements/earliest.txt (line 5))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading requests_oauthlib-1.3.1-py2.py3-none-any.whl (23 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting isodate>=0.6.0 (from msrest>=0.6.21->azure-storage-blob==12.12.0->-r requirements/earliest.txt (line 5))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading isodate-0.6.1-py2.py3-none-any.whl (41 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 41.7/41.7 kB 295.3 kB/s eta 0:00:00\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting pytz>=2020.1 (from pandas>=1.3->dask[dataframe]->-r requirements/base.txt (line 3))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading pytz-2023.3-py2.py3-none-any.whl (502 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 502.3/502.3 kB 7.5 MB/s eta 0:00:00\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting tzdata>=2022.1 (from pandas>=1.3->dask[dataframe]->-r requirements/base.txt (line 3))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading tzdata-2023.3-py2.py3-none-any.whl (341 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 341.8/341.8 kB 20.3 MB/s eta 0:00:00\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting locket (from partd>=1.2.0->dask[dataframe]->-r requirements/base.txt (line 3))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading locket-1.0.0-py2.py3-none-any.whl (4.4 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting oauthlib>=3.0.0 (from requests-oauthlib>=0.5.0->msrest>=0.6.21->azure-storage-blob==12.12.0->-r requirements/earliest.txt (line 5))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading oauthlib-3.2.2-py3-none-any.whl (151 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 151.7/151.7 kB 4.4 MB/s eta 0:00:00\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Installing collected packages: pytz, zipp, websocket-client, urllib3, tzdata, typing-extensions, toolz, tomli, six, pyyaml, PyJWT, pycparser, portalocker, pluggy, packaging, oauthlib, numpy, multidict, locket, iniconfig, idna, fsspec, frozenlist, exceptiongroup, coverage, cloudpickle, click, charset-normalizer, certifi, attrs, async-timeout, yarl, requests, python-dateutil, pytest, pyarrow, partd, isodate, importlib-metadata, cffi, aiosignal, requests-oauthlib, pytest-mock, pytest-cov, pytest-asyncio, pandas, docker, dask, cryptography, azure-core, aiohttp, msrest, adal, msrestazure, msal, azure-storage-blob, azure-datalake-store, msal-extensions, azure-identity\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Successfully installed PyJWT-2.7.0 adal-1.2.7 aiohttp-3.8.4 aiosignal-1.3.1 async-timeout-4.0.2 attrs-23.1.0 azure-core-1.23.1 azure-datalake-store-0.0.46 azure-identity-1.13.0 azure-storage-blob-12.12.0 certifi-2023.5.7 cffi-1.15.1 charset-normalizer-3.1.0 click-8.1.3 cloudpickle-2.2.1 coverage-7.2.7 cryptography-41.0.1 dask-2023.5.0 docker-6.1.3 exceptiongroup-1.1.1 frozenlist-1.3.3 fsspec-2021.10.1 idna-3.4 importlib-metadata-6.7.0 iniconfig-2.0.0 isodate-0.6.1 locket-1.0.0 msal-1.22.0 msal-extensions-1.0.0 msrest-0.6.21 msrestazure-0.6.4 multidict-6.0.4 numpy-1.24.4 oauthlib-3.2.2 packaging-23.1 pandas-2.0.2 partd-1.4.0 pluggy-1.2.0 portalocker-2.7.0 pyarrow-12.0.1 pycparser-2.21 pytest-7.4.0 pytest-asyncio-0.21.0 pytest-cov-4.1.0 pytest-mock-3.11.1 python-dateutil-2.8.2 pytz-2023.3 pyyaml-6.0 requests-2.31.0 requests-oauthlib-1.3.1 six-1.16.0 tomli-2.0.1 toolz-0.12.0 typing-extensions-4.6.3 tzdata-2023.3 urllib3-2.0.3 websocket-client-1.6.1 yarl-1.9.2 zipp-3.15.0\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | [notice] A new release of pip is available: 21.1.1 -> 23.1.2\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | [notice] To update, run: pip install --upgrade pip\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \u2705  Success - Main install\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests] \u2b50 Run Main lint\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udc33  docker cp src=/tmp/act-cache/dcb7d46b-e014-4b83-b27b-c6a972e30519/act/pre-commit-action@v3.0.0/ dst=/var/run/act/actions/pre-commit-action@v3.0.0/\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/pre-commit-action@v3.0.0/] user=0 workdir=\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests] \u2b50 Run Main python -m pip install pre-commit\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3-composite-0.sh] user= workdir=\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting pre-commit\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading pre_commit-3.3.3-py2.py3-none-any.whl (202 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 202.8/202.8 kB 5.2 MB/s eta 0:00:00\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting cfgv>=2.0.0 (from pre-commit)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading cfgv-3.3.1-py2.py3-none-any.whl (7.3 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting identify>=1.0.0 (from pre-commit)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading identify-2.5.24-py2.py3-none-any.whl (98 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 98.8/98.8 kB 8.8 MB/s eta 0:00:00\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting nodeenv>=0.11.1 (from pre-commit)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading nodeenv-1.8.0-py2.py3-none-any.whl (22 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Requirement already satisfied: pyyaml>=5.1 in /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages (from pre-commit) (6.0)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting virtualenv>=20.10.0 (from pre-commit)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading virtualenv-20.23.1-py3-none-any.whl (3.3 MB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 3.3/3.3 MB 24.5 MB/s eta 0:00:00\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Requirement already satisfied: setuptools in /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages (from nodeenv>=0.11.1->pre-commit) (56.0.0)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting distlib<1,>=0.3.6 (from virtualenv>=20.10.0->pre-commit)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading distlib-0.3.6-py2.py3-none-any.whl (468 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 468.5/468.5 kB 6.6 MB/s eta 0:00:00\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting filelock<4,>=3.12 (from virtualenv>=20.10.0->pre-commit)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading filelock-3.12.2-py3-none-any.whl (10 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Collecting platformdirs<4,>=3.5.1 (from virtualenv>=20.10.0->pre-commit)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |   Downloading platformdirs-3.8.0-py3-none-any.whl (16 kB)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Installing collected packages: distlib, platformdirs, nodeenv, identify, filelock, cfgv, virtualenv, pre-commit\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Successfully installed cfgv-3.3.1 distlib-0.3.6 filelock-3.12.2 identify-2.5.24 nodeenv-1.8.0 platformdirs-3.8.0 pre-commit-3.3.3 virtualenv-20.23.1\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | [notice] A new release of pip is available: 21.1.1 -> 23.1.2\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | [notice] To update, run: pip install --upgrade pip\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \u2705  Success - Main python -m pip install pre-commit\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests] \u2b50 Run Main python -m pip freeze --local\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3-composite-1.sh] user= workdir=\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adal==1.2.7\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | aiohttp==3.8.4\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | aiosignal==1.3.1\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | async-timeout==4.0.2\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | attrs==23.1.0\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | azure-core==1.23.1\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | azure-datalake-store==0.0.46\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | azure-identity==1.13.0\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | azure-storage-blob==12.12.0\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | certifi==2023.5.7\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | cffi==1.15.1\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | cfgv==3.3.1\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | charset-normalizer==3.1.0\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | click==8.1.3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | cloudpickle==2.2.1\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | coverage==7.2.7\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | cryptography==41.0.1\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | dask==2023.5.0\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | distlib==0.3.6\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | docker==6.1.3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | exceptiongroup==1.1.1\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | filelock==3.12.2\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | frozenlist==1.3.3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | fsspec==2021.10.1\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | identify==2.5.24\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | idna==3.4\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | importlib-metadata==6.7.0\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | iniconfig==2.0.0\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | isodate==0.6.1\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | locket==1.0.0\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | msal==1.22.0\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | msal-extensions==1.0.0\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | msrest==0.6.21\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | msrestazure==0.6.4\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | multidict==6.0.4\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | nodeenv==1.8.0\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | numpy==1.24.4\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | oauthlib==3.2.2\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | packaging==23.1\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | pandas==2.0.2\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | partd==1.4.0\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | platformdirs==3.8.0\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | pluggy==1.2.0\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | portalocker==2.7.0\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | pre-commit==3.3.3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | pyarrow==12.0.1\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | pycparser==2.21\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | PyJWT==2.7.0\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | pytest==7.4.0\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | pytest-asyncio==0.21.0\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | pytest-cov==4.1.0\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | pytest-mock==3.11.1\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | python-dateutil==2.8.2\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | pytz==2023.3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | PyYAML==6.0\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | requests==2.31.0\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | requests-oauthlib==1.3.1\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | six==1.16.0\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | tomli==2.0.1\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | toolz==0.12.0\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | typing_extensions==4.6.3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | tzdata==2023.3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | urllib3==2.0.3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | virtualenv==20.23.1\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | websocket-client==1.6.1\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | yarl==1.9.2\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | zipp==3.15.0\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \u2705  Success - Main python -m pip freeze --local\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests] \u2b50 Run Main actions/cache@v3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udc33  docker cp src=/tmp/act-cache/dcb7d46b-e014-4b83-b27b-c6a972e30519/act/actions-cache@v3/ dst=/var/run/act/actions/actions-cache@v3/\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-cache@v3/] user=0 workdir=\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-cache@v3/dist/restore/index.js] user= workdir=\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::Resolved Keys:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::[\"pre-commit-3|/opt/hostedtoolcache/Python/3.8.11/x64|3b3b576f827ba13bae217a25c6ca4c23f940683743555aa145fb4552afba228d\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::Checking zstd --quiet --version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::1.5.0\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::zstd version: 1.5.0\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:42309/_apis/artifactcache/cache?keys=pre-commit-3%257C%252Fopt%252Fhostedtoolcache%252FPython%252F3.8.11%252Fx64%257C3b3b576f827ba13bae217a25c6ca4c23f940683743555aa145fb4552afba228d&version=356db49e6bae2290b5c998bce2b5407d52ba33e30aa3d911773d957b563a16ad\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::Failed to delete archive: Error: ENOENT: no such file or directory, unlink ''\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Cache not found for input keys: pre-commit-3|/opt/hostedtoolcache/Python/3.8.11/x64|3b3b576f827ba13bae217a25c6ca4c23f940683743555aa145fb4552afba228d\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \u2705  Success - Main actions/cache@v3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests] \u2b50 Run Main pre-commit run --show-diff-on-failure --color=always --all-files\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3-composite-3.sh] user= workdir=\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | [INFO]\u001b[m Initializing environment for https://github.com/pycqa/isort.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | [INFO]\u001b[m Initializing environment for https://github.com/ambv/black.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | [INFO]\u001b[m Initializing environment for https://github.com/pre-commit/pre-commit-hooks.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | [INFO]\u001b[m Installing environment for https://github.com/pycqa/isort.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | [INFO]\u001b[m Once installed this environment will be reused.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | [INFO]\u001b[m This may take a few minutes...\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | [INFO]\u001b[m Installing environment for https://github.com/ambv/black.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | [INFO]\u001b[m Once installed this environment will be reused.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | [INFO]\u001b[m This may take a few minutes...\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | [INFO]\u001b[m Installing environment for https://github.com/pre-commit/pre-commit-hooks.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | [INFO]\u001b[m Once installed this environment will be reused.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | [INFO]\u001b[m This may take a few minutes...\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | isort....................................................................\u001b[42mPassed\u001b[m\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | black....................................................................\u001b[42mPassed\u001b[m\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Flake8...................................................................\u001b[42mPassed\u001b[m\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \u2705  Success - Main pre-commit run --show-diff-on-failure --color=always --all-files\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \u2705  Success - Main lint\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests] \u2b50 Run Main run tests\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4] user= workdir=\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ============================= test session starts ==============================\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | platform linux -- Python 3.8.11, pytest-7.4.0, pluggy-1.2.0 -- /opt/hostedtoolcache/Python/3.8.11/x64/bin/python\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | cachedir: .pytest_cache\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | rootdir: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-adlfs\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | configfile: setup.cfg\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | plugins: mock-3.11.1, cov-4.1.0, asyncio-0.21.0\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | asyncio: mode=auto\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | collecting ... collected 87 items\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_fetch_range.py::test_fetch_entire_blob ERROR            [  1%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_fetch_range.py::test_fetch_first_half ERROR             [  2%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_fetch_range.py::test_fetch_second_half ERROR            [  3%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_fetch_range.py::test_fetch_middle ERROR                 [  4%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_fetch_range.py::test_fetch_length_is_none ERROR         [  5%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_loop.py::test_fs_loop ERROR                             [  6%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_loop.py::test_file_loop ERROR                           [  8%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_connect ERROR                             [  9%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_ls ERROR                                  [ 10%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_ls_no_listings_cache ERROR                [ 11%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_ls_versioned ERROR                        [ 12%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_info[False] ERROR                         [ 13%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_info[True] ERROR                          [ 14%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_info_missing[does-not-exist] ERROR        [ 16%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_info_missing[does-not-exist/foo] ERROR    [ 17%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_info_missing[data/does_not_exist] ERROR   [ 18%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_info_missing[data/root/does_not_exist] ERROR [ 19%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_time_info ERROR                           [ 20%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_find ERROR                                [ 21%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_find_missing ERROR                        [ 22%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_glob ERROR                                [ 24%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_glob_full_uri ERROR                       [ 25%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_open_file ERROR                           [ 26%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_rm ERROR                                  [ 27%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_rm_recursive ERROR                        [ 28%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_rm_multiple_items ERROR                   [ 29%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_mkdir ERROR                               [ 31%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_makedir ERROR                             [ 32%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_makedir_rmdir ERROR                       [ 33%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_append_operation SKIPPED (uncondition...) [ 34%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_mkdir_rm_recursive ERROR                  [ 35%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_deep_paths ERROR                          [ 36%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_large_blob ERROR                          [ 37%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_large_upload_overflow ERROR               [ 39%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_dask_parquet ERROR                        [ 40%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_metadata_write ERROR                      [ 41%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_put_file ERROR                            [ 42%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_isdir ERROR                               [ 43%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_isfile ERROR                              [ 44%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_isfile_versioned ERROR                    [ 45%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_isdir_cache ERROR                         [ 47%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_cat ERROR                                 [ 48%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_cat_file ERROR                            [ 49%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_cat_file_missing ERROR                    [ 50%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_cat_file_versioned ERROR                  [ 51%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_url SKIPPED (Bug in Azurite Storage E...) [ 52%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_url_versioned ERROR                       [ 54%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_cp_file ERROR                             [ 55%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_cp_file_versioned ERROR                   [ 56%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_exists ERROR                              [ 57%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_exists_directory ERROR                    [ 58%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_exists_versioned ERROR                    [ 59%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_find_with_prefix ERROR                    [ 60%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_strip_protocol[container/file-None] ERROR [ 62%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_strip_protocol[container/file-abfs://] ERROR [ 63%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_strip_protocol[container/file-az://] ERROR [ 64%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_strip_protocol[container/file?versionid=1234-None] ERROR [ 65%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_strip_protocol[container/file?versionid=1234-abfs://] ERROR [ 66%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_strip_protocol[container/file?versionid=1234-az://] ERROR [ 67%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_split_path[None-True-file-] ERROR         [ 68%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_split_path[None-True-file-abfs://] ERROR  [ 70%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_split_path[None-True-file-az://] ERROR    [ 71%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_split_path[None-True-dir/file-] ERROR     [ 72%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_split_path[None-True-dir/file-abfs://] ERROR [ 73%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_split_path[None-True-dir/file-az://] ERROR [ 74%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_split_path[None-False-file-] ERROR        [ 75%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_split_path[None-False-file-abfs://] ERROR [ 77%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_split_path[None-False-file-az://] ERROR   [ 78%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_split_path[None-False-dir/file-] ERROR    [ 79%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_split_path[None-False-dir/file-abfs://] ERROR [ 80%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_split_path[None-False-dir/file-az://] ERROR [ 81%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_split_path[1970-01-01T00:00:00.0000000Z-True-file-] ERROR [ 82%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_split_path[1970-01-01T00:00:00.0000000Z-True-file-abfs://] ERROR [ 83%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_split_path[1970-01-01T00:00:00.0000000Z-True-file-az://] ERROR [ 85%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_split_path[1970-01-01T00:00:00.0000000Z-True-dir/file-] ERROR [ 86%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_split_path[1970-01-01T00:00:00.0000000Z-True-dir/file-abfs://] ERROR [ 87%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_split_path[1970-01-01T00:00:00.0000000Z-True-dir/file-az://] ERROR [ 88%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_split_path[1970-01-01T00:00:00.0000000Z-False-file-] ERROR [ 89%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_split_path[1970-01-01T00:00:00.0000000Z-False-file-abfs://] ERROR [ 90%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_split_path[1970-01-01T00:00:00.0000000Z-False-file-az://] ERROR [ 91%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_split_path[1970-01-01T00:00:00.0000000Z-False-dir/file-] ERROR [ 93%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_split_path[1970-01-01T00:00:00.0000000Z-False-dir/file-abfs://] ERROR [ 94%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_split_path[1970-01-01T00:00:00.0000000Z-False-dir/file-az://] ERROR [ 95%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_details_versioned ERROR                   [ 96%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_spec.py::test_get_file_versioned ERROR                  [ 97%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_uri_format.py::test_dask_parquet ERROR                  [ 98%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/test_uri_format.py::test_account_name_from_url ERROR         [100%]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ==================================== ERRORS ====================================\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ___________________ ERROR at setup of test_fetch_entire_blob ___________________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ---------------------------- Captured stdout setup -----------------------------\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Starting azurite docker container\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ___________________ ERROR at setup of test_fetch_first_half ____________________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ___________________ ERROR at setup of test_fetch_second_half ___________________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _____________________ ERROR at setup of test_fetch_middle ______________________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _________________ ERROR at setup of test_fetch_length_is_none __________________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ________________________ ERROR at setup of test_fs_loop ________________________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _______________________ ERROR at setup of test_file_loop _______________________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ________________________ ERROR at setup of test_connect ________________________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | __________________________ ERROR at setup of test_ls ___________________________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _________________ ERROR at setup of test_ls_no_listings_cache __________________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _____________________ ERROR at setup of test_ls_versioned ______________________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ______________________ ERROR at setup of test_info[False] ______________________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ______________________ ERROR at setup of test_info[True] _______________________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _____________ ERROR at setup of test_info_missing[does-not-exist] ______________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ___________ ERROR at setup of test_info_missing[does-not-exist/foo] ____________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ___________ ERROR at setup of test_info_missing[data/does_not_exist] ___________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ________ ERROR at setup of test_info_missing[data/root/does_not_exist] _________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _______________________ ERROR at setup of test_time_info _______________________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _________________________ ERROR at setup of test_find __________________________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _____________________ ERROR at setup of test_find_missing ______________________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _________________________ ERROR at setup of test_glob __________________________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _____________________ ERROR at setup of test_glob_full_uri _____________________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _______________________ ERROR at setup of test_open_file _______________________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | __________________________ ERROR at setup of test_rm ___________________________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _____________________ ERROR at setup of test_rm_recursive ______________________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ___________________ ERROR at setup of test_rm_multiple_items ___________________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _________________________ ERROR at setup of test_mkdir _________________________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ________________________ ERROR at setup of test_makedir ________________________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _____________________ ERROR at setup of test_makedir_rmdir _____________________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | __________________ ERROR at setup of test_mkdir_rm_recursive ___________________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ______________________ ERROR at setup of test_deep_paths _______________________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ______________________ ERROR at setup of test_large_blob _______________________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _________________ ERROR at setup of test_large_upload_overflow _________________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _____________________ ERROR at setup of test_dask_parquet ______________________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ____________________ ERROR at setup of test_metadata_write _____________________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _______________________ ERROR at setup of test_put_file ________________________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _________________________ ERROR at setup of test_isdir _________________________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ________________________ ERROR at setup of test_isfile _________________________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ___________________ ERROR at setup of test_isfile_versioned ____________________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ______________________ ERROR at setup of test_isdir_cache ______________________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | __________________________ ERROR at setup of test_cat __________________________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _______________________ ERROR at setup of test_cat_file ________________________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ___________________ ERROR at setup of test_cat_file_missing ____________________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | __________________ ERROR at setup of test_cat_file_versioned ___________________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _____________________ ERROR at setup of test_url_versioned _____________________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ________________________ ERROR at setup of test_cp_file ________________________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ___________________ ERROR at setup of test_cp_file_versioned ___________________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ________________________ ERROR at setup of test_exists _________________________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ___________________ ERROR at setup of test_exists_directory ____________________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ___________________ ERROR at setup of test_exists_versioned ____________________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ___________________ ERROR at setup of test_find_with_prefix ____________________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | __________ ERROR at setup of test_strip_protocol[container/file-None] __________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ________ ERROR at setup of test_strip_protocol[container/file-abfs://] _________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _________ ERROR at setup of test_strip_protocol[container/file-az://] __________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | __ ERROR at setup of test_strip_protocol[container/file?versionid=1234-None] ___\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ ERROR at setup of test_strip_protocol[container/file?versionid=1234-abfs://] _\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | __ ERROR at setup of test_strip_protocol[container/file?versionid=1234-az://] __\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ______________ ERROR at setup of test_split_path[None-True-file-] ______________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | __________ ERROR at setup of test_split_path[None-True-file-abfs://] ___________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ___________ ERROR at setup of test_split_path[None-True-file-az://] ____________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ____________ ERROR at setup of test_split_path[None-True-dir/file-] ____________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ________ ERROR at setup of test_split_path[None-True-dir/file-abfs://] _________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _________ ERROR at setup of test_split_path[None-True-dir/file-az://] __________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _____________ ERROR at setup of test_split_path[None-False-file-] ______________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | __________ ERROR at setup of test_split_path[None-False-file-abfs://] __________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ___________ ERROR at setup of test_split_path[None-False-file-az://] ___________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ___________ ERROR at setup of test_split_path[None-False-dir/file-] ____________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ________ ERROR at setup of test_split_path[None-False-dir/file-abfs://] ________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _________ ERROR at setup of test_split_path[None-False-dir/file-az://] _________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | __ ERROR at setup of test_split_path[1970-01-01T00:00:00.0000000Z-True-file-] __\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ ERROR at setup of test_split_path[1970-01-01T00:00:00.0000000Z-True-file-abfs://] _\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ ERROR at setup of test_split_path[1970-01-01T00:00:00.0000000Z-True-file-az://] _\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ ERROR at setup of test_split_path[1970-01-01T00:00:00.0000000Z-True-dir/file-] _\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ ERROR at setup of test_split_path[1970-01-01T00:00:00.0000000Z-True-dir/file-abfs://] _\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ ERROR at setup of test_split_path[1970-01-01T00:00:00.0000000Z-True-dir/file-az://] _\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ ERROR at setup of test_split_path[1970-01-01T00:00:00.0000000Z-False-file-] __\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ ERROR at setup of test_split_path[1970-01-01T00:00:00.0000000Z-False-file-abfs://] _\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ ERROR at setup of test_split_path[1970-01-01T00:00:00.0000000Z-False-file-az://] _\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ ERROR at setup of test_split_path[1970-01-01T00:00:00.0000000Z-False-dir/file-] _\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ ERROR at setup of test_split_path[1970-01-01T00:00:00.0000000Z-False-dir/file-abfs://] _\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ ERROR at setup of test_split_path[1970-01-01T00:00:00.0000000Z-False-dir/file-az://] _\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ___________________ ERROR at setup of test_details_versioned ___________________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | __________________ ERROR at setup of test_get_file_versioned ___________________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _____________________ ERROR at setup of test_dask_parquet ______________________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _________________ ERROR at setup of test_account_name_from_url _________________\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnectionPool object at 0x7f6d647dd5b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | method = 'GET', url = '/version', body = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | headers = {'User-Agent': 'docker-sdk-python/6.1.3', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | redirect = False, assert_same_host = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), pool_timeout = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | release_conn = False, chunked = False, body_pos = None, preload_content = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | decode_content = False, response_kw = {}\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | parsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/version', query=None, fragment=None)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | destination_scheme = None, conn = None, release_this_conn = True\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | http_tunnel_required = False, err = None, clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def urlopen(  # type: ignore[override]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         method: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url: str,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body: _TYPE_BODY | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         headers: typing.Mapping[str, str] | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         retries: Retry | bool | int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         redirect: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         assert_same_host: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         pool_timeout: int | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_conn: bool | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked: bool = False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos: _TYPE_BODY_POSITION | None = None,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         preload_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         decode_content: bool = True,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         **response_kw: typing.Any,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ) -> BaseHTTPResponse:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         Get a connection from the pool and perform an HTTP request. This is the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         lowest level call for making a request, so you'll need to specify all\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         the raw details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            More commonly, it's appropriate to use a convenience method\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            such as :meth:`request`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         .. note::\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `release_conn` will only behave as expected if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` because we want to make\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            `preload_content=False` the default behaviour someday soon without\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |            breaking backwards compatibility.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param method:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             HTTP request method (such as GET, POST, PUT, etc.)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param url:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             The URL to perform the request on.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param body:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Data to send in the request body, either :class:`str`, :class:`bytes`,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param headers:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Dictionary of custom headers to send, such as User-Agent,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If-None-Match, etc. If None, pool headers are used. If provided,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             these headers completely replace any pool-specific headers.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param retries:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Configure the number of retries to allow before raising a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.exceptions.MaxRetryError` exception.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass ``None`` to retry until you receive a response. Pass a\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`~urllib3.util.retry.Retry` object for fine-grained control\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             over different types of retries.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Pass an integer number to retry connection errors that many times,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             but no other types of errors. Pass zero to never retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``False``, then retries are disabled and any exception is raised\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             immediately. Also, instead of raising a MaxRetryError on redirects,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the redirect response will be returned.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param redirect:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, automatically handle redirects (status codes 301, 302,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             303, 307, 308). Each redirect counts as a retry. Disabling retries\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             will disable redirect, too.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param assert_same_host:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If ``True``, will make sure that the host of the pool requests is\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             consistent else will raise HostChangedError. When ``False``, you can\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             use the pool on an HTTP proxy and request foreign hosts.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If specified, overrides the default timeout for this one\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request. It may be a float (in seconds) or an instance of\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             :class:`urllib3.util.Timeout`.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param pool_timeout:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If set and the pool is set to block=True, then this method will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             connection is available within the time period.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool preload_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, the response's body will be preloaded into memory.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool decode_content:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, will attempt to decode the body based on the\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             'content-encoding' header.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param release_conn:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If False, then the urlopen call will not release the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool once a response is received (but will release if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             you read the entire contents of the response such as when\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             `preload_content=True`). This is useful if you're not preloading\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             the response's content immediately. You will need to call\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             ``r.release_conn()`` on the response ``r`` to return the connection\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             back into the pool. If None, it takes the value of ``preload_content``\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             which defaults to ``True``.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param bool chunked:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             If True, urllib3 will send the body using chunked transfer\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             encoding. Otherwise, urllib3 will send the body using the standard\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             content-length form. Defaults to False.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param int body_pos:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             Position to seek to in file-like body in the event of a retry or\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             redirect. Typically this won't need to be set because urllib3 will\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             auto-populate the value when needed.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         parsed_url = parse_url(url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         destination_scheme = parsed_url.scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if headers is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = self.headers\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not isinstance(retries, Retry):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if release_conn is None:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             release_conn = preload_content\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Check host\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if assert_same_host and not self.is_same_host(url):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise HostChangedError(self, url, retries)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Ensure that the URL we're connecting to is properly encoded\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if url.startswith(\"/\"):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(_encode_target(url))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             url = to_str(parsed_url.url)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         conn = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Track whether `conn` needs to be released before\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # returning/raising/recursing. Update this variable if necessary, and\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # leave `release_conn` constant throughout the function. That way, if\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # the function recurses, the original value of `release_conn` will be\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # passed down into the recursive call, and its value will be respected.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # See issue #651 [1] for details.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         #\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # [1] <https://github.com/urllib3/urllib3/issues/651>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         release_this_conn = release_conn\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         http_tunnel_required = connection_requires_http_tunnel(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             self.proxy, self.proxy_config, destination_scheme\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # have to copy the headers dict so we can safely change it without those\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # changes being reflected in anyone else's copy.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if not http_tunnel_required:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers = headers.copy()  # type: ignore[attr-defined]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             headers.update(self.proxy_headers)  # type: ignore[union-attr]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Must keep the exception bound to a separate variable or else Python 3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # complains about UnboundLocalError.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         err = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Keep track of whether we cleanly exited the except block. This\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # ensures we do proper cleanup in finally.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         clean_exit = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # Rewind body position, if needed. Record current position\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         # for future rewinds in the event of a redirect/retry.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         body_pos = set_file_position(body, body_pos)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Request a connection from the queue.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout_obj = self._get_timeout(timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self._get_conn(timeout=pool_timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn.timeout = timeout_obj.connect_timeout  # type: ignore[assignment]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Is this a closed/new connection that requires CONNECT tunnelling?\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             if self.proxy is not None and http_tunnel_required and conn.is_closed:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._prepare_proxy(conn)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 except (BaseSSLError, OSError, SocketTimeout) as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     self._raise_timeout(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                         err=e, url=self.proxy.url, timeout_value=conn.timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     raise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # If we're going to release the connection in ``finally:``, then\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # the response doesn't need to know about the connection. Otherwise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # it will also try to release it and we'll have a double-release\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # mess.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             response_conn = conn if not release_conn else None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             # Make the request on the HTTPConnection object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout_obj,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 response_conn=response_conn,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=preload_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=decode_content,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 **response_kw,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       PermissionError: [Errno 13] Permission denied\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: PermissionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:486: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:844: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     retries = retries.increment(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/retry.py:470: in increment\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise reraise(type(error), error, _stacktrace)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/util/util.py:38: in reraise\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     raise value.with_traceback(tb)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:790: in urlopen\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     response = self._make_request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connectionpool.py:496: in _make_request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     conn.request(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/urllib3/connection.py:388: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.endheaders()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1251: in endheaders\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._send_output(message_body, encode_chunked=encode_chunked)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:1011: in _send_output\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.send(msg)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/http/client.py:951: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.connect()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPConnection object at 0x7f6d647ddd00>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def connect(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         sock.settimeout(self.timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       sock.connect(self.unix_socket)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E       urllib3.exceptions.ProtocolError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/transport/unixconn.py:27: ProtocolError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:214: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/daemon.py:181: in version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self._result(self._get(url), json=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/utils/decorators.py:46: in inner\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return f(self, *args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:237: in _get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.get(url, **self._set_request_timeout(kwargs))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:602: in get\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return self.request(\"GET\", url, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:589: in request\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     resp = self.send(prep, **send_kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/sessions.py:703: in send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     r = adapter.send(request, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.transport.unixconn.UnixHTTPAdapter object at 0x7f6d647dd8b0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | request = <PreparedRequest [GET]>, stream = False\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | timeout = Timeout(connect=60, read=60, total=None), verify = True, cert = None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | proxies = OrderedDict()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def send(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     ):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"Sends PreparedRequest object. Returns Response object.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param stream: (optional) Whether to stream the request content.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param timeout: (optional) How long to wait for the server to send\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             data before giving up, as a float, or a :ref:`(connect timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             read timeout) <timeouts>` tuple.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :type timeout: float or tuple or urllib3 Timeout object\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param verify: (optional) Either a boolean, in which case it controls whether\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             we verify the server's TLS certificate, or a string, in which case it\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             must be a path to a CA bundle to use\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param cert: (optional) Any user-provided SSL certificate to be trusted.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :param proxies: (optional) The proxies dictionary to apply to the request.\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         :rtype: requests.Response\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         \"\"\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             conn = self.get_connection(request.url, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except LocationValueError as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise InvalidURL(e, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.cert_verify(conn, request.url, verify, cert)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         url = self.request_url(request, proxies)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         self.add_headers(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             request,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             stream=stream,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             verify=verify,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             cert=cert,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             proxies=proxies,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         chunked = not (request.body is None or \"Content-Length\" in request.headers)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         if isinstance(timeout, tuple):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 connect, read = timeout\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout = TimeoutSauce(connect=connect, read=read)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             except ValueError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 raise ValueError(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                     f\"or a single float to set both timeouts to the same value.\"\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         elif isinstance(timeout, TimeoutSauce):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             pass\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         else:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             timeout = TimeoutSauce(connect=timeout, read=timeout)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             resp = conn.urlopen(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 method=request.method,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 url=url,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 body=request.body,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 headers=request.headers,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 redirect=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 assert_same_host=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 preload_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 decode_content=False,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 retries=self.max_retries,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 timeout=timeout,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 chunked=chunked,\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except (ProtocolError, OSError) as err:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise ConnectionError(err, request=request)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           requests.exceptions.ConnectionError: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/requests/adapters.py:501: ConnectionError\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | During handling of the above exception, another exception occurred:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     @pytest.fixture(scope=\"session\", autouse=True)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def spawn_azurite():\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         print(\"Starting azurite docker container\")\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >       client = docker.from_env()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | adlfs/tests/conftest.py:74: \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:96: in from_env\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     return cls(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/client.py:45: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self.api = APIClient(*args, **kwargs)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:197: in __init__\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     self._version = self._retrieve_server_version()\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | self = <docker.api.client.APIClient object at 0x7f6d647dd3d0>\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |     def _retrieve_server_version(self):\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         try:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             return self.version(api_version=False)[\"ApiVersion\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except KeyError:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 'Invalid response from docker daemon: key \"ApiVersion\"'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 ' is missing.'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |         except Exception as e:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | >           raise DockerException(\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |                 f'Error while fetching server API version: {e}'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   |             )\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | E           docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | \n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | /opt/hostedtoolcache/Python/3.8.11/x64/lib/python3.8/site-packages/docker/api/client.py:221: DockerException\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | - generated xml file: /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-adlfs/report.xml -\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | =========================== short test summary info ============================\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_fetch_range.py::test_fetch_entire_blob - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_fetch_range.py::test_fetch_first_half - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_fetch_range.py::test_fetch_second_half - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_fetch_range.py::test_fetch_middle - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_fetch_range.py::test_fetch_length_is_none - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_loop.py::test_fs_loop - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_loop.py::test_file_loop - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_connect - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_ls - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_ls_no_listings_cache - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_ls_versioned - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_info[False] - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_info[True] - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_info_missing[does-not-exist] - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_info_missing[does-not-exist/foo] - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_info_missing[data/does_not_exist] - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_info_missing[data/root/does_not_exist] - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_time_info - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_find - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_find_missing - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_glob - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_glob_full_uri - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_open_file - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_rm - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_rm_recursive - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_rm_multiple_items - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_mkdir - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_makedir - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_makedir_rmdir - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_mkdir_rm_recursive - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_deep_paths - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_large_blob - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_large_upload_overflow - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_dask_parquet - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_metadata_write - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_put_file - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_isdir - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_isfile - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_isfile_versioned - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_isdir_cache - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_cat - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_cat_file - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_cat_file_missing - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_cat_file_versioned - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_url_versioned - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_cp_file - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_cp_file_versioned - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_exists - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_exists_directory - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_exists_versioned - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_find_with_prefix - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_strip_protocol[container/file-None] - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_strip_protocol[container/file-abfs://] - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_strip_protocol[container/file-az://] - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_strip_protocol[container/file?versionid=1234-None] - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_strip_protocol[container/file?versionid=1234-abfs://] - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_strip_protocol[container/file?versionid=1234-az://] - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_split_path[None-True-file-] - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_split_path[None-True-file-abfs://] - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_split_path[None-True-file-az://] - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_split_path[None-True-dir/file-] - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_split_path[None-True-dir/file-abfs://] - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_split_path[None-True-dir/file-az://] - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_split_path[None-False-file-] - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_split_path[None-False-file-abfs://] - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_split_path[None-False-file-az://] - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_split_path[None-False-dir/file-] - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_split_path[None-False-dir/file-abfs://] - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_split_path[None-False-dir/file-az://] - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_split_path[1970-01-01T00:00:00.0000000Z-True-file-] - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_split_path[1970-01-01T00:00:00.0000000Z-True-file-abfs://] - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_split_path[1970-01-01T00:00:00.0000000Z-True-file-az://] - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_split_path[1970-01-01T00:00:00.0000000Z-True-dir/file-] - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_split_path[1970-01-01T00:00:00.0000000Z-True-dir/file-abfs://] - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_split_path[1970-01-01T00:00:00.0000000Z-True-dir/file-az://] - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_split_path[1970-01-01T00:00:00.0000000Z-False-file-] - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_split_path[1970-01-01T00:00:00.0000000Z-False-file-abfs://] - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_split_path[1970-01-01T00:00:00.0000000Z-False-file-az://] - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_split_path[1970-01-01T00:00:00.0000000Z-False-dir/file-] - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_split_path[1970-01-01T00:00:00.0000000Z-False-dir/file-abfs://] - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_split_path[1970-01-01T00:00:00.0000000Z-False-dir/file-az://] - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_details_versioned - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_spec.py::test_get_file_versioned - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_uri_format.py::test_dask_parquet - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ERROR adlfs/tests/test_uri_format.py::test_account_name_from_url - docker.errors.DockerException: Error while fetching server API version: ('Connection aborted.', PermissionError(13, 'Permission denied'))\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | ======================== 2 skipped, 85 errors in 23.54s ========================\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \u274c  Failure - Main run tests\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests] exitcode '1': failure\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests] \u2b50 Run Post lint\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udc33  docker cp src=/tmp/act-cache/dcb7d46b-e014-4b83-b27b-c6a972e30519/act/pre-commit-action@v3.0.0/ dst=/var/run/act/actions/pre-commit-action@v3.0.0/\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/pre-commit-action@v3.0.0/] user=0 workdir=\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests] \u2b50 Run Post actions/cache@v3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-cache@v3/dist/save/index.js] user= workdir=\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::Checking zstd --quiet --version\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::1.5.0\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::zstd version: 1.5.0\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::implicitDescendants 'false'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::followSymbolicLinks 'true'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::implicitDescendants 'false'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::omitBrokenSymbolicLinks 'true'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::Search path '/home/runneradmin/.cache/pre-commit'\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::Matched: ../../../home/runneradmin/.cache/pre-commit\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::Cache Paths:\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::[\"../../../home/runneradmin/.cache/pre-commit\"]\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::Archive Path: /tmp/e8066970-22fa-4c6f-aeaa-5bd4d51eafdb/cache.tzst\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | [command]/usr/bin/tar --posix -cf cache.tzst --exclude cache.tzst -P -C /tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-adlfs --files-from manifest.txt --use-compress-program zstdmt\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::File Size: 17373030\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::Reserving Cache\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:42309/_apis/artifactcache/caches\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::Saving Cache (ID: 1)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::Upload cache\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:42309/_apis/artifactcache/caches/1\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::Upload concurrency: 4\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::Upload chunk size: 33554432\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::Awaiting all uploads\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::Uploading chunk of size 17373030 bytes at offset 0 with content range: bytes 0-17373029/*\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::Commiting cache\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Cache Size: ~17 MB (17373030 B)\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \ud83d\udcac  ::debug::Resource Url: http://130.242.72.40:42309/_apis/artifactcache/caches/1\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Cache saved successfully\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   | Cache saved with key: pre-commit-3|/opt/hostedtoolcache/Python/3.8.11/x64|3b3b576f827ba13bae217a25c6ca4c23f940683743555aa145fb4552afba228d\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \u2705  Success - Post actions/cache@v3\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests]   \u2705  Success - Post lint\n[04d1bf3c-416d-4331-b9e9-ae7c56ed3100/tests] \ud83c\udfc1  Job failed\n",
        "stderr": "Error: Job 'tests' failed\n",
        "workflow": "/tmp/ad9c0f7e-1596-11ee-8a50-bb14de238602/fsspec-adlfs/.github/workflows/tests-crawler.yml",
        "build_tool": "pytest",
        "elapsed_time": 291.56625294685364
    }
}