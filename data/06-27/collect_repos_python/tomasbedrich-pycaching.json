{
    "repository": "tomasbedrich/pycaching",
    "stars": 55,
    "language": "python",
    "size": 4519,
    "clone_url": "https://github.com/tomasbedrich/pycaching.git",
    "timestamp": "2023-07-01T09:41:39.968334Z",
    "clone_success": true,
    "number_of_actions": 2,
    "number_of_test_actions": 1,
    "actions_successful": true,
    "actions_build_tools": [
        "unknown",
        "pytest"
    ],
    "actions_test_build_tools": [
        "pytest"
    ],
    "actions_run": {
        "failed": false,
        "tests": [
            {
                "classname": "test.test_cache.TestProperties",
                "name": "test___eq__",
                "time": 0.006,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_cache.TestProperties",
                "name": "test___str__",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_cache.TestProperties",
                "name": "test_attributes",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_cache.TestProperties",
                "name": "test_author",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_cache.TestProperties",
                "name": "test_description",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_cache.TestProperties",
                "name": "test_difficulty",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_cache.TestProperties",
                "name": "test_favorites",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_cache.TestProperties",
                "name": "test_found",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_cache.TestProperties",
                "name": "test_geocaching",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_cache.TestProperties",
                "name": "test_guid",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_cache.TestProperties",
                "name": "test_hidden",
                "time": 0.021,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_cache.TestProperties",
                "name": "test_hint",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_cache.TestProperties",
                "name": "test_location",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_cache.TestProperties",
                "name": "test_name",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_cache.TestProperties",
                "name": "test_original_location",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_cache.TestProperties",
                "name": "test_pm_only",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_cache.TestProperties",
                "name": "test_size",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_cache.TestProperties",
                "name": "test_state",
                "time": 0.015,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_cache.TestProperties",
                "name": "test_status",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_cache.TestProperties",
                "name": "test_status_name",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_cache.TestProperties",
                "name": "test_summary",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_cache.TestProperties",
                "name": "test_terrain",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_cache.TestProperties",
                "name": "test_type",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_cache.TestProperties",
                "name": "test_visited",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_cache.TestProperties",
                "name": "test_waypoints",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_cache.TestProperties",
                "name": "test_wp",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_cache.TestMethods",
                "name": "test_cache_types",
                "time": 1.062,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AttributeError: 'MockHTTPResponse' object has no attribute 'close'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_cache.TestMethods",
                "name": "test_load",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AttributeError: 'MockHTTPResponse' object has no attribute 'close'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_cache.TestMethods",
                "name": "test_load_by_guid",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AttributeError: 'MockHTTPResponse' object has no attribute 'close'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_cache.TestMethods",
                "name": "test_load_log_page",
                "time": 0.004,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AttributeError: 'MockHTTPResponse' object has no attribute 'close'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_cache.TestMethods",
                "name": "test_load_logbook",
                "time": 0.003,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AttributeError: 'MockHTTPResponse' object has no attribute 'close'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_cache.TestMethods",
                "name": "test_load_quick",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AttributeError: 'MockHTTPResponse' object has no attribute 'close'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_cache.TestMethods",
                "name": "test_load_trackables",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AttributeError: 'MockHTTPResponse' object has no attribute 'close'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_cache.TestMethods",
                "name": "test_post_log",
                "time": 0.009,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AttributeError: 'MockHTTPResponse' object has no attribute 'close'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_cache.TestCacheIssues",
                "name": "test_author",
                "time": 1.11,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AttributeError: 'MockHTTPResponse' object has no attribute 'close'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_cache.TestWaypointProperties",
                "name": "test_id",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_cache.TestWaypointProperties",
                "name": "test_location",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_cache.TestWaypointProperties",
                "name": "test_note",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_cache.TestWaypointProperties",
                "name": "test_str",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_cache.TestWaypointProperties",
                "name": "test_type",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_cache.TestCacheStatus",
                "name": "test_cache_status",
                "time": 1.091,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AttributeError: 'MockHTTPResponse' object has no attribute 'close'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_cache.TestHint",
                "name": "test_hint",
                "time": 1.13,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AttributeError: 'MockHTTPResponse' object has no attribute 'close'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_geo.TestPoint",
                "name": "test_format_gc",
                "time": 1.073,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_geo.TestPoint",
                "name": "test_from_location",
                "time": 0.022,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_geo.TestPoint",
                "name": "test_from_string",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_geo.TestPoint",
                "name": "test_from_tile",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_geo.TestPoint",
                "name": "test_to_tile",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_geo.TestPolygon",
                "name": "test_bounding_box",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_geo.TestPolygon",
                "name": "test_mean_point",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_geo.TestRectangle",
                "name": "test_contains",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_geo.TestRectangle",
                "name": "test_diagonal",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_geo.TestTile",
                "name": "test_blocks",
                "time": 1.075,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_geo.TestTile",
                "name": "test_download_utfgrid",
                "time": 0.024,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AttributeError: 'MockHTTPResponse' object has no attribute 'close'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_geo.TestTile",
                "name": "test_precision",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_geo.TestBlock",
                "name": "test_determine_block_size",
                "time": 0.025,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_geo.TestBlock",
                "name": "test_get_corrected_limits",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_geo.TestBlock",
                "name": "test_middle_point",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_geo.TestBlock",
                "name": "test_points",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_geo.TestModule",
                "name": "test_to_decimal",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_geocaching.TestMethods",
                "name": "test__try_getting_cache_from_guid",
                "time": 1.072,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AttributeError: 'MockHTTPResponse' object has no attribute 'close'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_geocaching.TestMethods",
                "name": "test__try_getting_cache_from_guid_pm_only",
                "time": 0.011,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AttributeError: 'MockHTTPResponse' object has no attribute 'close'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_geocaching.TestMethods",
                "name": "test_my_dnfs",
                "time": 0.013,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AttributeError: 'MockHTTPResponse' object has no attribute 'close'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_geocaching.TestMethods",
                "name": "test_my_finds",
                "time": 0.006,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AttributeError: 'MockHTTPResponse' object has no attribute 'close'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_geocaching.TestMethods",
                "name": "test_search",
                "time": 0.044,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_geocaching.TestMethods",
                "name": "test_search_quick",
                "time": 0.009,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_geocaching.TestAdvancedSearch",
                "name": "test_caches_owned_by_geocaching_hq",
                "time": 1.042,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_geocaching.TestAdvancedSearch",
                "name": "test_search",
                "time": 0.013,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_geocaching.TestAPIMethods",
                "name": "test_recover_from_rate_limit",
                "time": 1.134,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_geocaching.TestAPIMethods",
                "name": "test_recover_from_rate_limit_without_sleep",
                "time": 0.071,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_geocaching.TestAPIMethods",
                "name": "test_search_rect",
                "time": 0.073,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_geocaching.TestShortcuts",
                "name": "test_geocode",
                "time": 1.084,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_geocaching.TestShortcuts",
                "name": "test_get_cache",
                "time": 0.018,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AttributeError: 'MockHTTPResponse' object has no attribute 'close'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_geocaching.TestShortcuts",
                "name": "test_get_cache_by_guid",
                "time": 0.009,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AttributeError: 'MockHTTPResponse' object has no attribute 'close'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_geocaching.TestShortcuts",
                "name": "test_get_trackable",
                "time": 0.024,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AttributeError: 'MockHTTPResponse' object has no attribute 'close'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_geocaching.TestShortcuts",
                "name": "test_post_log",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_log.TestLog",
                "name": "test___str__",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_log.TestLog",
                "name": "test_author",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_log.TestLog",
                "name": "test_text",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_log.TestLog",
                "name": "test_type",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_log.TestLog",
                "name": "test_visited",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_log.TestType",
                "name": "test_from_filename",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_trackable.TestProperties",
                "name": "test___eq__",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_trackable.TestProperties",
                "name": "test___str__",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_trackable.TestProperties",
                "name": "test_description",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_trackable.TestProperties",
                "name": "test_goal",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_trackable.TestProperties",
                "name": "test_location",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_trackable.TestProperties",
                "name": "test_log_page_url",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_trackable.TestProperties",
                "name": "test_name",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_trackable.TestProperties",
                "name": "test_owner",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_trackable.TestProperties",
                "name": "test_tid",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_trackable.TestProperties",
                "name": "test_type",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_trackable.TestMethods",
                "name": "test_get_KML",
                "time": 1.115,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AttributeError: 'MockHTTPResponse' object has no attribute 'close'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_trackable.TestMethods",
                "name": "test_load",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AttributeError: 'MockHTTPResponse' object has no attribute 'close'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_trackable.TestMethods",
                "name": "test_load_log_page",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AttributeError: 'MockHTTPResponse' object has no attribute 'close'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_trackable.TestMethods",
                "name": "test_post_log",
                "time": 0.001,
                "results": [
                    {
                        "result": "Error",
                        "message": "failed on setup with \"AttributeError: 'MockHTTPResponse' object has no attribute 'close'\"",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_trackable.TestIssues",
                "name": "test_load__type",
                "time": 1.05,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AttributeError: 'MockHTTPResponse' object has no attribute 'close'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_util.TestModule",
                "name": "test_format_date",
                "time": 1.045,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_util.TestModule",
                "name": "test_get_possible_attributes",
                "time": 0.072,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_util.TestModule",
                "name": "test_parse_date",
                "time": 0.016,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "test.test_util.TestModule",
                "name": "test_rot13",
                "time": 0.001,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests_new.test_geocaching",
                "name": "test_unauthorized_request",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests_new.test_geocaching",
                "name": "test_login",
                "time": 0.051,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AttributeError: 'MockHTTPResponse' object has no attribute 'close'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests_new.test_geocaching",
                "name": "test_login_bad_credentials",
                "time": 0.121,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests_new.test_geocaching",
                "name": "test_login_twice_with_valid_credentials",
                "time": 0.049,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AttributeError: 'MockHTTPResponse' object has no attribute 'close'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests_new.test_geocaching",
                "name": "test_logout_when_relogin_is_attempted_with_invalid_credentials",
                "time": 0.094,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests_new.test_geocaching",
                "name": "test_login_failed_because_of_load_credentials_failed[FileNotFoundError]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests_new.test_geocaching",
                "name": "test_login_failed_because_of_load_credentials_failed[ValueError]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests_new.test_geocaching",
                "name": "test_login_failed_because_of_load_credentials_failed[KeyError]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests_new.test_geocaching",
                "name": "test_login_failed_because_of_load_credentials_failed[OSError]",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests_new.test_geocaching",
                "name": "test_login_failed_because_of_load_credentials_failed[side_effect4]",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests_new.test_geocaching",
                "name": "test_get_logged_user",
                "time": 0.053,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AttributeError: 'MockHTTPResponse' object has no attribute 'close'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests_new.test_geocaching",
                "name": "test_logout",
                "time": 0.058,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AttributeError: 'MockHTTPResponse' object has no attribute 'close'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests_new.test_geocaching.TestLoadCredentials",
                "name": "test",
                "time": 0.008,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests_new.test_geocaching.TestLoadCredentials",
                "name": "test_with_username",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests_new.test_geocaching.TestLoadCredentials",
                "name": "test_with_nonexisting_username",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests_new.test_geocaching.TestLoadCredentials",
                "name": "test_multiuser",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests_new.test_geocaching.TestLoadCredentials",
                "name": "test_multiuser_with_username",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests_new.test_geocaching.TestLoadCredentials",
                "name": "test_multiuser_with_nonexisting_username",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests_new.test_geocaching.TestLoadCredentials",
                "name": "test_file_nonexisting",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests_new.test_geocaching.TestLoadCredentials",
                "name": "test_file_empty",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests_new.test_geocaching.TestLoadCredentials",
                "name": "test_file_multiuser_empty",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests_new.test_geocaching.TestLoadCredentials",
                "name": "test_file_multiuser_empty_item",
                "time": 0.003,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests_new.test_geocaching.TestLoadCredentials",
                "name": "test_file_string",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests_new.test_geocaching.TestLoadCredentials",
                "name": "test_file_invalid_json",
                "time": 0.002,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests_new.test_geocaching.TestLoadCredentials",
                "name": "test_password_cmd",
                "time": 0.019,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests_new.test_geocaching.TestLoadCredentials",
                "name": "test_password_cmd_invalid",
                "time": 0.013,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests_new.test_geocaching.TestLoadCredentials",
                "name": "test_password_cmd_ambiguous",
                "time": 0.004,
                "results": [
                    {
                        "result": "Passed",
                        "message": "",
                        "type": ""
                    }
                ],
                "stdout": null,
                "stderr": null
            },
            {
                "classname": "tests_new.test_shortcuts",
                "name": "test_login",
                "time": 0.061,
                "results": [
                    {
                        "result": "Failure",
                        "message": "AttributeError: 'MockHTTPResponse' object has no attribute 'close'",
                        "type": null
                    }
                ],
                "stdout": null,
                "stderr": null
            }
        ],
        "stdout": "[9f54715f-36da-4636-b710-dcccf51cd141/build] \ud83d\ude80  Start image=crawlergpt:latest\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   \ud83d\udc33  docker pull image=crawlergpt:latest platform= username= forcePull=false\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   \ud83d\udc33  docker create image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   \ud83d\udc33  docker run image=crawlergpt:latest platform= entrypoint=[\"tail\" \"-f\" \"/dev/null\"] cmd=[]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /tmp/558156d8-17ed-11ee-8a50-bb14de238602/tomasbedrich-pycaching] user=0 workdir=\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   \u2601  git clone 'https://github.com/actions/setup-python' # ref=v4\n[9f54715f-36da-4636-b710-dcccf51cd141/build] \ud83e\uddea  Matrix: map[os:ubuntu-latest python-version:3.7]\n[9f54715f-36da-4636-b710-dcccf51cd141/build] \u2b50 Run Main actions/checkout@v3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   \u2705  Success - Main actions/checkout@v3\n[9f54715f-36da-4636-b710-dcccf51cd141/build] \u2b50 Run Main Set up Python 3.7\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   \ud83d\udc33  docker cp src=/tmp/act-cache/8f8f5625-6bd2-4248-bc3f-f1f6dbc79d19/act/actions-setup-python@v4/ dst=/var/run/act/actions/actions-setup-python@v4/\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   \ud83d\udc33  docker exec cmd=[chown -R 1012:1013 /var/run/act/actions/actions-setup-python@v4/] user=0 workdir=\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   \ud83d\udc33  docker exec cmd=[node /var/run/act/actions/actions-setup-python@v4/dist/setup/index.js] user= workdir=\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   \ud83d\udcac  ::debug::Python is expected to be installed into /opt/hostedtoolcache\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   \u2753  ::group::Installed versions\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   \ud83d\udcac  ::debug::Semantic version spec of 3.7 is 3.7\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   \ud83d\udcac  ::debug::isExplicit: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   \ud83d\udcac  ::debug::explicit? false\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   \ud83d\udcac  ::debug::isExplicit: 2.7.18\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   \ud83d\udcac  ::debug::explicit? true\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   \ud83d\udcac  ::debug::isExplicit: 3.5.10\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   \ud83d\udcac  ::debug::explicit? true\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   \ud83d\udcac  ::debug::isExplicit: 3.6.14\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   \ud83d\udcac  ::debug::explicit? true\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   \ud83d\udcac  ::debug::isExplicit: 3.7.11\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   \ud83d\udcac  ::debug::explicit? true\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   \ud83d\udcac  ::debug::isExplicit: 3.8.11\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   \ud83d\udcac  ::debug::explicit? true\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   \ud83d\udcac  ::debug::isExplicit: 3.9.6\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   \ud83d\udcac  ::debug::explicit? true\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   \ud83d\udcac  ::debug::evaluating 6 versions\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   \ud83d\udcac  ::debug::matched: 3.7.11\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   \ud83d\udcac  ::debug::checking cache: /opt/hostedtoolcache/Python/3.7.11/x64\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   \ud83d\udcac  ::debug::Found tool in cache Python 3.7.11 x64\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Successfully set up CPython (3.7.11)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   \u2753  ::endgroup::\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   \u2753 add-matcher /run/act/actions/actions-setup-python@v4/.github/python.json\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   \u2705  Success - Main Set up Python 3.7\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   \u2699  ::set-env:: pythonLocation=/opt/hostedtoolcache/Python/3.7.11/x64\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   \u2699  ::set-env:: PKG_CONFIG_PATH=/opt/hostedtoolcache/Python/3.7.11/x64/lib/pkgconfig\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   \u2699  ::set-env:: Python_ROOT_DIR=/opt/hostedtoolcache/Python/3.7.11/x64\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   \u2699  ::set-env:: Python2_ROOT_DIR=/opt/hostedtoolcache/Python/3.7.11/x64\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   \u2699  ::set-env:: Python3_ROOT_DIR=/opt/hostedtoolcache/Python/3.7.11/x64\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   \u2699  ::set-env:: LD_LIBRARY_PATH=/opt/hostedtoolcache/Python/3.7.11/x64/lib\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   \u2699  ::set-output:: python-version=3.7.11\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   \u2699  ::set-output:: python-path=/opt/hostedtoolcache/Python/3.7.11/x64/bin/python\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.7.11/x64\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   \u2699  ::add-path:: /opt/hostedtoolcache/Python/3.7.11/x64/bin\n[9f54715f-36da-4636-b710-dcccf51cd141/build] \u2b50 Run Main Install dependencies\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/2] user= workdir=\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Requirement already satisfied: pip in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (21.2.4)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Collecting pip\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |   Downloading pip-23.1.2-py3-none-any.whl (2.1 MB)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Requirement already satisfied: setuptools in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (47.1.0)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Collecting setuptools\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |   Downloading setuptools-68.0.0-py3-none-any.whl (804 kB)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Collecting flit\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |   Downloading flit-3.9.0-py3-none-any.whl (49 kB)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Collecting flit_core>=3.9.0\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |   Downloading flit_core-3.9.0-py3-none-any.whl (63 kB)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Collecting requests\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |   Downloading requests-2.31.0-py3-none-any.whl (62 kB)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Collecting tomli-w\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |   Downloading tomli_w-1.0.0-py3-none-any.whl (6.0 kB)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Collecting docutils\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |   Downloading docutils-0.20.1-py3-none-any.whl (572 kB)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Collecting idna<4,>=2.5\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |   Downloading idna-3.4-py3-none-any.whl (61 kB)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Collecting charset-normalizer<4,>=2\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |   Downloading charset_normalizer-3.1.0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (171 kB)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Collecting urllib3<3,>=1.21.1\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |   Downloading urllib3-2.0.3-py3-none-any.whl (123 kB)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Collecting certifi>=2017.4.17\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |   Downloading certifi-2023.5.7-py3-none-any.whl (156 kB)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Installing collected packages: urllib3, idna, charset-normalizer, certifi, tomli-w, requests, flit-core, docutils, setuptools, pip, flit\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |   Attempting uninstall: setuptools\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     Found existing installation: setuptools 47.1.0\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     Uninstalling setuptools-47.1.0:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |       Successfully uninstalled setuptools-47.1.0\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |   Attempting uninstall: pip\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     Found existing installation: pip 21.2.4\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     Uninstalling pip-21.2.4:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |       Successfully uninstalled pip-21.2.4\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Successfully installed certifi-2023.5.7 charset-normalizer-3.1.0 docutils-0.20.1 flit-3.9.0 flit-core-3.9.0 idna-3.4 pip-23.1.2 requests-2.31.0 setuptools-68.0.0 tomli-w-1.0.0 urllib3-2.0.3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Fetching list of valid trove classifiers               I-flit.validate\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Extras to install for deps 'all': {'dev', '.none'}      I-flit.install\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Installing requirements                                 I-flit.install\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Collecting pytest~=6.2 (from -r /tmp/tmp6nnfj_ivrequirements.txt (line 1))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |   Downloading pytest-6.2.5-py3-none-any.whl (280 kB)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 280.7/280.7 kB 11.6 MB/s eta 0:00:00\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Collecting pytest-cov~=3.0 (from -r /tmp/tmp6nnfj_ivrequirements.txt (line 2))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |   Downloading pytest_cov-3.0.0-py3-none-any.whl (20 kB)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Collecting betamax~=0.8 (from -r /tmp/tmp6nnfj_ivrequirements.txt (line 3))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |   Downloading betamax-0.8.1-py2.py3-none-any.whl (39 kB)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Collecting betamax-serializers~=0.2 (from -r /tmp/tmp6nnfj_ivrequirements.txt (line 4))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |   Downloading betamax_serializers-0.2.1-py2.py3-none-any.whl (4.2 kB)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Collecting black~=22.6.0 (from -r /tmp/tmp6nnfj_ivrequirements.txt (line 5))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |   Downloading black-22.6.0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (1.4 MB)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 1.4/1.4 MB 20.1 MB/s eta 0:00:00\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Collecting flake8~=4.0 (from -r /tmp/tmp6nnfj_ivrequirements.txt (line 6))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |   Downloading flake8-4.0.1-py2.py3-none-any.whl (64 kB)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 64.1/64.1 kB 6.9 MB/s eta 0:00:00\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Collecting isort~=5.10 (from -r /tmp/tmp6nnfj_ivrequirements.txt (line 7))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |   Downloading isort-5.11.5-py3-none-any.whl (104 kB)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 104.1/104.1 kB 5.8 MB/s eta 0:00:00\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Requirement already satisfied: requests~=2.8 in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (from -r /tmp/tmp6nnfj_ivrequirements.txt (line 8)) (2.31.0)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Collecting beautifulsoup4~=4.9 (from -r /tmp/tmp6nnfj_ivrequirements.txt (line 9))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |   Downloading beautifulsoup4-4.12.2-py3-none-any.whl (142 kB)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 143.0/143.0 kB 13.7 MB/s eta 0:00:00\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Collecting geopy~=2.2.0 (from -r /tmp/tmp6nnfj_ivrequirements.txt (line 10))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |   Downloading geopy-2.2.0-py3-none-any.whl (118 kB)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 118.9/118.9 kB 4.9 MB/s eta 0:00:00\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Collecting attrs>=19.2.0 (from pytest~=6.2->-r /tmp/tmp6nnfj_ivrequirements.txt (line 1))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |   Downloading attrs-23.1.0-py3-none-any.whl (61 kB)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 61.2/61.2 kB 5.6 MB/s eta 0:00:00\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Collecting iniconfig (from pytest~=6.2->-r /tmp/tmp6nnfj_ivrequirements.txt (line 1))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |   Downloading iniconfig-2.0.0-py3-none-any.whl (5.9 kB)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Collecting packaging (from pytest~=6.2->-r /tmp/tmp6nnfj_ivrequirements.txt (line 1))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |   Downloading packaging-23.1-py3-none-any.whl (48 kB)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 48.9/48.9 kB 4.1 MB/s eta 0:00:00\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Collecting pluggy<2.0,>=0.12 (from pytest~=6.2->-r /tmp/tmp6nnfj_ivrequirements.txt (line 1))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |   Downloading pluggy-1.2.0-py3-none-any.whl (17 kB)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Collecting py>=1.8.2 (from pytest~=6.2->-r /tmp/tmp6nnfj_ivrequirements.txt (line 1))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |   Downloading py-1.11.0-py2.py3-none-any.whl (98 kB)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 98.7/98.7 kB 2.4 MB/s eta 0:00:00\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Collecting toml (from pytest~=6.2->-r /tmp/tmp6nnfj_ivrequirements.txt (line 1))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |   Downloading toml-0.10.2-py2.py3-none-any.whl (16 kB)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Collecting importlib-metadata>=0.12 (from pytest~=6.2->-r /tmp/tmp6nnfj_ivrequirements.txt (line 1))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |   Downloading importlib_metadata-6.7.0-py3-none-any.whl (22 kB)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Collecting coverage[toml]>=5.2.1 (from pytest-cov~=3.0->-r /tmp/tmp6nnfj_ivrequirements.txt (line 2))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |   Downloading coverage-7.2.7-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (225 kB)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 225.6/225.6 kB 9.1 MB/s eta 0:00:00\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Collecting click>=8.0.0 (from black~=22.6.0->-r /tmp/tmp6nnfj_ivrequirements.txt (line 5))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |   Downloading click-8.1.3-py3-none-any.whl (96 kB)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 96.6/96.6 kB 1.8 MB/s eta 0:00:00\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Collecting platformdirs>=2 (from black~=22.6.0->-r /tmp/tmp6nnfj_ivrequirements.txt (line 5))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |   Downloading platformdirs-3.8.0-py3-none-any.whl (16 kB)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Collecting pathspec>=0.9.0 (from black~=22.6.0->-r /tmp/tmp6nnfj_ivrequirements.txt (line 5))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |   Downloading pathspec-0.11.1-py3-none-any.whl (29 kB)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Collecting mypy-extensions>=0.4.3 (from black~=22.6.0->-r /tmp/tmp6nnfj_ivrequirements.txt (line 5))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |   Downloading mypy_extensions-1.0.0-py3-none-any.whl (4.7 kB)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Collecting tomli>=1.1.0 (from black~=22.6.0->-r /tmp/tmp6nnfj_ivrequirements.txt (line 5))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |   Downloading tomli-2.0.1-py3-none-any.whl (12 kB)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Collecting typing-extensions>=3.10.0.0 (from black~=22.6.0->-r /tmp/tmp6nnfj_ivrequirements.txt (line 5))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |   Downloading typing_extensions-4.7.0-py3-none-any.whl (33 kB)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Collecting typed-ast>=1.4.2 (from black~=22.6.0->-r /tmp/tmp6nnfj_ivrequirements.txt (line 5))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |   Downloading typed_ast-1.5.4-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (843 kB)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 843.7/843.7 kB 13.2 MB/s eta 0:00:00\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Collecting mccabe<0.7.0,>=0.6.0 (from flake8~=4.0->-r /tmp/tmp6nnfj_ivrequirements.txt (line 6))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |   Downloading mccabe-0.6.1-py2.py3-none-any.whl (8.6 kB)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Collecting pycodestyle<2.9.0,>=2.8.0 (from flake8~=4.0->-r /tmp/tmp6nnfj_ivrequirements.txt (line 6))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |   Downloading pycodestyle-2.8.0-py2.py3-none-any.whl (42 kB)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 42.1/42.1 kB 1.3 MB/s eta 0:00:00\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Collecting pyflakes<2.5.0,>=2.4.0 (from flake8~=4.0->-r /tmp/tmp6nnfj_ivrequirements.txt (line 6))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |   Downloading pyflakes-2.4.0-py2.py3-none-any.whl (69 kB)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |      \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 69.7/69.7 kB 5.3 MB/s eta 0:00:00\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Collecting importlib-metadata>=0.12 (from pytest~=6.2->-r /tmp/tmp6nnfj_ivrequirements.txt (line 1))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |   Downloading importlib_metadata-4.2.0-py3-none-any.whl (16 kB)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Requirement already satisfied: charset-normalizer<4,>=2 in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (from requests~=2.8->-r /tmp/tmp6nnfj_ivrequirements.txt (line 8)) (3.1.0)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Requirement already satisfied: idna<4,>=2.5 in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (from requests~=2.8->-r /tmp/tmp6nnfj_ivrequirements.txt (line 8)) (3.4)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (from requests~=2.8->-r /tmp/tmp6nnfj_ivrequirements.txt (line 8)) (2.0.3)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Requirement already satisfied: certifi>=2017.4.17 in /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages (from requests~=2.8->-r /tmp/tmp6nnfj_ivrequirements.txt (line 8)) (2023.5.7)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Collecting soupsieve>1.2 (from beautifulsoup4~=4.9->-r /tmp/tmp6nnfj_ivrequirements.txt (line 9))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |   Downloading soupsieve-2.4.1-py3-none-any.whl (36 kB)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Collecting geographiclib<2,>=1.49 (from geopy~=2.2.0->-r /tmp/tmp6nnfj_ivrequirements.txt (line 10))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |   Downloading geographiclib-1.52-py3-none-any.whl (38 kB)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Collecting zipp>=0.5 (from importlib-metadata>=0.12->pytest~=6.2->-r /tmp/tmp6nnfj_ivrequirements.txt (line 1))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |   Downloading zipp-3.15.0-py3-none-any.whl (6.8 kB)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Installing collected packages: mccabe, geographiclib, zipp, typing-extensions, typed-ast, tomli, toml, soupsieve, pyflakes, pycodestyle, py, pathspec, packaging, mypy-extensions, isort, iniconfig, geopy, coverage, platformdirs, importlib-metadata, betamax, beautifulsoup4, pluggy, flake8, click, betamax-serializers, attrs, pytest, black, pytest-cov\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Successfully installed attrs-23.1.0 beautifulsoup4-4.12.2 betamax-0.8.1 betamax-serializers-0.2.1 black-22.6.0 click-8.1.3 coverage-7.2.7 flake8-4.0.1 geographiclib-1.52 geopy-2.2.0 importlib-metadata-4.2.0 iniconfig-2.0.0 isort-5.11.5 mccabe-0.6.1 mypy-extensions-1.0.0 packaging-23.1 pathspec-0.11.1 platformdirs-3.8.0 pluggy-1.2.0 py-1.11.0 pycodestyle-2.8.0 pyflakes-2.4.0 pytest-6.2.5 pytest-cov-3.0.0 soupsieve-2.4.1 toml-0.10.2 tomli-2.0.1 typed-ast-1.5.4 typing-extensions-4.7.0 zipp-3.15.0\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | [notice] A new release of pip is available: 20.1.1 -> 23.1.2\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | [notice] To update, run: pip install --upgrade pip\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Symlinking pycaching -> /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/pycaching  I-flit.install\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   \u2705  Success - Main Install dependencies\n[9f54715f-36da-4636-b710-dcccf51cd141/build] \u2b50 Run Main isort\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | Skipped 1 files\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   \u2705  Success - Main isort\n[9f54715f-36da-4636-b710-dcccf51cd141/build] \u2b50 Run Main black\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/4] user= workdir=\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | All done! \u2728 \ud83c\udf70 \u2728\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | 21 files would be left unchanged.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   \u2705  Success - Main black\n[9f54715f-36da-4636-b710-dcccf51cd141/build] \u2b50 Run Main flake8\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/5] user= workdir=\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | 0\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   \u2705  Success - Main flake8\n[9f54715f-36da-4636-b710-dcccf51cd141/build] \u2b50 Run Main pytest\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   \ud83d\udc33  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/6] user= workdir=\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | ============================= test session starts ==============================\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | platform linux -- Python 3.7.11, pytest-6.2.5, py-1.11.0, pluggy-1.2.0\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | cachedir: .cache\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | rootdir: /tmp/558156d8-17ed-11ee-8a50-bb14de238602/tomasbedrich-pycaching, configfile: pyproject.toml, testpaths: test, tests_new\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | plugins: betamax-0.8.1, cov-3.0.0\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | collected 128 items\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | test/test_cache.py ..........................EEEEEEEEF.....FF            [ 32%]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | test/test_geo.py ..........F......                                       [ 46%]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | test/test_geocaching.py FFFF........FFF.                                 [ 58%]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | test/test_log.py ......                                                  [ 63%]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | test/test_trackable.py ..........EEEEF                                   [ 75%]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | test/test_util.py ....                                                   [ 78%]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | tests_new/test_geocaching.py .F.F......FF...............                 [ 99%]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | tests_new/test_shortcuts.py F                                            [100%]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | ==================================== ERRORS ====================================\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | ________________ ERROR at setup of TestMethods.test_cache_types ________________\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b813cd0d0>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:710: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b813cd0d0>, amt = 10240\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _raw_read(\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         self,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         amt: int | None = None,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     ) -> bytes:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Reads `amt` of bytes from the socket.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         if self._fp is None:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             return None  # type: ignore[return-value]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         fp_closed = getattr(self._fp, \"closed\", False)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         with self._error_catcher():\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             data = self._fp_read(amt) if not fp_closed else b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if amt is not None and amt != 0 and not data:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Platform-specific: Buggy versions of Python.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Close the connection when no data is returned\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 #\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This is redundant to what httplib/http.client _should_\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # already do.  However, versions of python released before\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # December 15, 2012 (http://bugs.python.org/issue16298) do\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # not properly close the connection in all cases. There is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # no harm in redundantly calling close.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 self._fp.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if (\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     self.enforce_content_length\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining is not None\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining != 0\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 ):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # This is an edge case that httplib failed to cover due\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # to concerns of backward compatibility. We're\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # addressing it here to make sure IncompleteRead is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # raised during streaming, so all calls with incorrect\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # Content-Length are caught.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   urllib3.exceptions.IncompleteRead: IncompleteRead(119086 bytes read, -10 more expected)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: IncompleteRead\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | The above exception was the direct cause of the following exception:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b813cd0d0>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E               urllib3.exceptions.ProtocolError: ('Connection broken: IncompleteRead(119086 bytes read, -10 more expected)', IncompleteRead(119086 bytes read, -10 more expected))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:727: ProtocolError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | During handling of the above exception, another exception occurred:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | cls = <class 'test.test_cache.TestMethods'>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @classmethod\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def setUpClass(cls):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         super().setUpClass()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         cls.c = Cache(cls.gc, \"GC1PAR2\")\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         with cls.recorder.use_cassette(\"cache_setup\"):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >           cls.c.load()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | test/test_cache.py:209: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/cache.py:720: in load\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     root = self.geocaching._request(self._urls[\"cache_details\"], params={\"wp\": self._wp})\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/geocaching.py:82: in _request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     res = self._session.request(method, url, **kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     resp = self.send(prep, **send_kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:725: in send\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     history = [resp for resp in gen]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:725: in <listcomp>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     history = [resp for resp in gen]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:274: in resolve_redirects\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     **adapter_kwargs,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:747: in send\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     r.content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:899: in content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self._content = b\"\".join(self.iter_content(CONTENT_CHUNK_SIZE)) or b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:816: in generate\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     yield from self.raw.stream(chunk_size, decode_content=True)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:940: in stream\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self.read(amt=amt, decode_content=decode_content)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:911: in read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self._raw_read(amt)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: in _raw_read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:130: in __exit__\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self.gen.throw(type, value, traceback)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b813cd0d0>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If no exception is thrown, we should avoid cleaning up\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # unnecessarily.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             clean_exit = True\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         finally:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If we didn't terminate cleanly, we need to throw away our\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # connection.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if not clean_exit:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # The response may not be closed but we're not going to use it\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # anymore so close it now to ensure that the connection is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # released back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if self._original_response:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   self._original_response.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   AttributeError: 'MockHTTPResponse' object has no attribute 'close'\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:740: AttributeError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | ___________________ ERROR at setup of TestMethods.test_load ____________________\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b813cd0d0>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:710: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b813cd0d0>, amt = 10240\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _raw_read(\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         self,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         amt: int | None = None,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     ) -> bytes:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Reads `amt` of bytes from the socket.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         if self._fp is None:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             return None  # type: ignore[return-value]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         fp_closed = getattr(self._fp, \"closed\", False)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         with self._error_catcher():\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             data = self._fp_read(amt) if not fp_closed else b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if amt is not None and amt != 0 and not data:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Platform-specific: Buggy versions of Python.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Close the connection when no data is returned\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 #\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This is redundant to what httplib/http.client _should_\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # already do.  However, versions of python released before\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # December 15, 2012 (http://bugs.python.org/issue16298) do\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # not properly close the connection in all cases. There is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # no harm in redundantly calling close.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 self._fp.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if (\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     self.enforce_content_length\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining is not None\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining != 0\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 ):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # This is an edge case that httplib failed to cover due\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # to concerns of backward compatibility. We're\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # addressing it here to make sure IncompleteRead is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # raised during streaming, so all calls with incorrect\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # Content-Length are caught.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   urllib3.exceptions.IncompleteRead: IncompleteRead(119086 bytes read, -10 more expected)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: IncompleteRead\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | The above exception was the direct cause of the following exception:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b813cd0d0>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E               urllib3.exceptions.ProtocolError: ('Connection broken: IncompleteRead(119086 bytes read, -10 more expected)', IncompleteRead(119086 bytes read, -10 more expected))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:727: ProtocolError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | During handling of the above exception, another exception occurred:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | cls = <class 'test.test_cache.TestMethods'>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @classmethod\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def setUpClass(cls):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         super().setUpClass()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         cls.c = Cache(cls.gc, \"GC1PAR2\")\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         with cls.recorder.use_cassette(\"cache_setup\"):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >           cls.c.load()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | test/test_cache.py:209: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/cache.py:720: in load\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     root = self.geocaching._request(self._urls[\"cache_details\"], params={\"wp\": self._wp})\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/geocaching.py:82: in _request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     res = self._session.request(method, url, **kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     resp = self.send(prep, **send_kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:725: in send\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     history = [resp for resp in gen]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:725: in <listcomp>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     history = [resp for resp in gen]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:274: in resolve_redirects\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     **adapter_kwargs,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:747: in send\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     r.content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:899: in content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self._content = b\"\".join(self.iter_content(CONTENT_CHUNK_SIZE)) or b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:816: in generate\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     yield from self.raw.stream(chunk_size, decode_content=True)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:940: in stream\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self.read(amt=amt, decode_content=decode_content)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:911: in read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self._raw_read(amt)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: in _raw_read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:130: in __exit__\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self.gen.throw(type, value, traceback)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b813cd0d0>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If no exception is thrown, we should avoid cleaning up\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # unnecessarily.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             clean_exit = True\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         finally:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If we didn't terminate cleanly, we need to throw away our\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # connection.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if not clean_exit:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # The response may not be closed but we're not going to use it\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # anymore so close it now to ensure that the connection is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # released back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if self._original_response:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   self._original_response.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   AttributeError: 'MockHTTPResponse' object has no attribute 'close'\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:740: AttributeError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _______________ ERROR at setup of TestMethods.test_load_by_guid ________________\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b813cd0d0>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:710: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b813cd0d0>, amt = 10240\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _raw_read(\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         self,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         amt: int | None = None,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     ) -> bytes:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Reads `amt` of bytes from the socket.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         if self._fp is None:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             return None  # type: ignore[return-value]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         fp_closed = getattr(self._fp, \"closed\", False)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         with self._error_catcher():\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             data = self._fp_read(amt) if not fp_closed else b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if amt is not None and amt != 0 and not data:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Platform-specific: Buggy versions of Python.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Close the connection when no data is returned\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 #\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This is redundant to what httplib/http.client _should_\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # already do.  However, versions of python released before\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # December 15, 2012 (http://bugs.python.org/issue16298) do\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # not properly close the connection in all cases. There is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # no harm in redundantly calling close.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 self._fp.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if (\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     self.enforce_content_length\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining is not None\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining != 0\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 ):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # This is an edge case that httplib failed to cover due\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # to concerns of backward compatibility. We're\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # addressing it here to make sure IncompleteRead is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # raised during streaming, so all calls with incorrect\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # Content-Length are caught.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   urllib3.exceptions.IncompleteRead: IncompleteRead(119086 bytes read, -10 more expected)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: IncompleteRead\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | The above exception was the direct cause of the following exception:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b813cd0d0>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E               urllib3.exceptions.ProtocolError: ('Connection broken: IncompleteRead(119086 bytes read, -10 more expected)', IncompleteRead(119086 bytes read, -10 more expected))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:727: ProtocolError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | During handling of the above exception, another exception occurred:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | cls = <class 'test.test_cache.TestMethods'>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @classmethod\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def setUpClass(cls):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         super().setUpClass()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         cls.c = Cache(cls.gc, \"GC1PAR2\")\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         with cls.recorder.use_cassette(\"cache_setup\"):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >           cls.c.load()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | test/test_cache.py:209: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/cache.py:720: in load\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     root = self.geocaching._request(self._urls[\"cache_details\"], params={\"wp\": self._wp})\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/geocaching.py:82: in _request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     res = self._session.request(method, url, **kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     resp = self.send(prep, **send_kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:725: in send\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     history = [resp for resp in gen]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:725: in <listcomp>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     history = [resp for resp in gen]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:274: in resolve_redirects\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     **adapter_kwargs,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:747: in send\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     r.content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:899: in content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self._content = b\"\".join(self.iter_content(CONTENT_CHUNK_SIZE)) or b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:816: in generate\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     yield from self.raw.stream(chunk_size, decode_content=True)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:940: in stream\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self.read(amt=amt, decode_content=decode_content)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:911: in read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self._raw_read(amt)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: in _raw_read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:130: in __exit__\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self.gen.throw(type, value, traceback)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b813cd0d0>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If no exception is thrown, we should avoid cleaning up\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # unnecessarily.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             clean_exit = True\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         finally:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If we didn't terminate cleanly, we need to throw away our\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # connection.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if not clean_exit:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # The response may not be closed but we're not going to use it\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # anymore so close it now to ensure that the connection is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # released back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if self._original_response:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   self._original_response.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   AttributeError: 'MockHTTPResponse' object has no attribute 'close'\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:740: AttributeError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _______________ ERROR at setup of TestMethods.test_load_log_page _______________\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b813cd0d0>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:710: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b813cd0d0>, amt = 10240\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _raw_read(\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         self,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         amt: int | None = None,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     ) -> bytes:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Reads `amt` of bytes from the socket.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         if self._fp is None:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             return None  # type: ignore[return-value]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         fp_closed = getattr(self._fp, \"closed\", False)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         with self._error_catcher():\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             data = self._fp_read(amt) if not fp_closed else b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if amt is not None and amt != 0 and not data:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Platform-specific: Buggy versions of Python.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Close the connection when no data is returned\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 #\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This is redundant to what httplib/http.client _should_\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # already do.  However, versions of python released before\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # December 15, 2012 (http://bugs.python.org/issue16298) do\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # not properly close the connection in all cases. There is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # no harm in redundantly calling close.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 self._fp.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if (\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     self.enforce_content_length\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining is not None\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining != 0\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 ):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # This is an edge case that httplib failed to cover due\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # to concerns of backward compatibility. We're\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # addressing it here to make sure IncompleteRead is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # raised during streaming, so all calls with incorrect\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # Content-Length are caught.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   urllib3.exceptions.IncompleteRead: IncompleteRead(119086 bytes read, -10 more expected)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: IncompleteRead\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | The above exception was the direct cause of the following exception:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b813cd0d0>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E               urllib3.exceptions.ProtocolError: ('Connection broken: IncompleteRead(119086 bytes read, -10 more expected)', IncompleteRead(119086 bytes read, -10 more expected))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:727: ProtocolError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | During handling of the above exception, another exception occurred:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | cls = <class 'test.test_cache.TestMethods'>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @classmethod\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def setUpClass(cls):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         super().setUpClass()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         cls.c = Cache(cls.gc, \"GC1PAR2\")\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         with cls.recorder.use_cassette(\"cache_setup\"):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >           cls.c.load()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | test/test_cache.py:209: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/cache.py:720: in load\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     root = self.geocaching._request(self._urls[\"cache_details\"], params={\"wp\": self._wp})\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/geocaching.py:82: in _request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     res = self._session.request(method, url, **kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     resp = self.send(prep, **send_kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:725: in send\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     history = [resp for resp in gen]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:725: in <listcomp>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     history = [resp for resp in gen]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:274: in resolve_redirects\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     **adapter_kwargs,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:747: in send\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     r.content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:899: in content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self._content = b\"\".join(self.iter_content(CONTENT_CHUNK_SIZE)) or b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:816: in generate\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     yield from self.raw.stream(chunk_size, decode_content=True)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:940: in stream\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self.read(amt=amt, decode_content=decode_content)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:911: in read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self._raw_read(amt)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: in _raw_read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:130: in __exit__\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self.gen.throw(type, value, traceback)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b813cd0d0>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If no exception is thrown, we should avoid cleaning up\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # unnecessarily.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             clean_exit = True\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         finally:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If we didn't terminate cleanly, we need to throw away our\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # connection.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if not clean_exit:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # The response may not be closed but we're not going to use it\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # anymore so close it now to ensure that the connection is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # released back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if self._original_response:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   self._original_response.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   AttributeError: 'MockHTTPResponse' object has no attribute 'close'\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:740: AttributeError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _______________ ERROR at setup of TestMethods.test_load_logbook ________________\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b813cd0d0>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:710: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b813cd0d0>, amt = 10240\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _raw_read(\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         self,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         amt: int | None = None,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     ) -> bytes:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Reads `amt` of bytes from the socket.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         if self._fp is None:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             return None  # type: ignore[return-value]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         fp_closed = getattr(self._fp, \"closed\", False)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         with self._error_catcher():\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             data = self._fp_read(amt) if not fp_closed else b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if amt is not None and amt != 0 and not data:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Platform-specific: Buggy versions of Python.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Close the connection when no data is returned\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 #\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This is redundant to what httplib/http.client _should_\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # already do.  However, versions of python released before\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # December 15, 2012 (http://bugs.python.org/issue16298) do\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # not properly close the connection in all cases. There is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # no harm in redundantly calling close.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 self._fp.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if (\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     self.enforce_content_length\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining is not None\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining != 0\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 ):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # This is an edge case that httplib failed to cover due\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # to concerns of backward compatibility. We're\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # addressing it here to make sure IncompleteRead is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # raised during streaming, so all calls with incorrect\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # Content-Length are caught.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   urllib3.exceptions.IncompleteRead: IncompleteRead(119086 bytes read, -10 more expected)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: IncompleteRead\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | The above exception was the direct cause of the following exception:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b813cd0d0>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E               urllib3.exceptions.ProtocolError: ('Connection broken: IncompleteRead(119086 bytes read, -10 more expected)', IncompleteRead(119086 bytes read, -10 more expected))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:727: ProtocolError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | During handling of the above exception, another exception occurred:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | cls = <class 'test.test_cache.TestMethods'>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @classmethod\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def setUpClass(cls):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         super().setUpClass()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         cls.c = Cache(cls.gc, \"GC1PAR2\")\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         with cls.recorder.use_cassette(\"cache_setup\"):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >           cls.c.load()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | test/test_cache.py:209: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/cache.py:720: in load\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     root = self.geocaching._request(self._urls[\"cache_details\"], params={\"wp\": self._wp})\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/geocaching.py:82: in _request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     res = self._session.request(method, url, **kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     resp = self.send(prep, **send_kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:725: in send\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     history = [resp for resp in gen]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:725: in <listcomp>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     history = [resp for resp in gen]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:274: in resolve_redirects\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     **adapter_kwargs,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:747: in send\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     r.content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:899: in content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self._content = b\"\".join(self.iter_content(CONTENT_CHUNK_SIZE)) or b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:816: in generate\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     yield from self.raw.stream(chunk_size, decode_content=True)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:940: in stream\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self.read(amt=amt, decode_content=decode_content)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:911: in read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self._raw_read(amt)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: in _raw_read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:130: in __exit__\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self.gen.throw(type, value, traceback)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b813cd0d0>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If no exception is thrown, we should avoid cleaning up\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # unnecessarily.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             clean_exit = True\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         finally:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If we didn't terminate cleanly, we need to throw away our\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # connection.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if not clean_exit:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # The response may not be closed but we're not going to use it\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # anymore so close it now to ensure that the connection is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # released back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if self._original_response:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   self._original_response.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   AttributeError: 'MockHTTPResponse' object has no attribute 'close'\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:740: AttributeError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | ________________ ERROR at setup of TestMethods.test_load_quick _________________\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b813cd0d0>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:710: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b813cd0d0>, amt = 10240\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _raw_read(\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         self,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         amt: int | None = None,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     ) -> bytes:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Reads `amt` of bytes from the socket.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         if self._fp is None:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             return None  # type: ignore[return-value]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         fp_closed = getattr(self._fp, \"closed\", False)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         with self._error_catcher():\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             data = self._fp_read(amt) if not fp_closed else b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if amt is not None and amt != 0 and not data:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Platform-specific: Buggy versions of Python.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Close the connection when no data is returned\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 #\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This is redundant to what httplib/http.client _should_\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # already do.  However, versions of python released before\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # December 15, 2012 (http://bugs.python.org/issue16298) do\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # not properly close the connection in all cases. There is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # no harm in redundantly calling close.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 self._fp.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if (\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     self.enforce_content_length\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining is not None\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining != 0\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 ):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # This is an edge case that httplib failed to cover due\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # to concerns of backward compatibility. We're\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # addressing it here to make sure IncompleteRead is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # raised during streaming, so all calls with incorrect\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # Content-Length are caught.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   urllib3.exceptions.IncompleteRead: IncompleteRead(119086 bytes read, -10 more expected)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: IncompleteRead\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | The above exception was the direct cause of the following exception:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b813cd0d0>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E               urllib3.exceptions.ProtocolError: ('Connection broken: IncompleteRead(119086 bytes read, -10 more expected)', IncompleteRead(119086 bytes read, -10 more expected))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:727: ProtocolError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | During handling of the above exception, another exception occurred:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | cls = <class 'test.test_cache.TestMethods'>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @classmethod\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def setUpClass(cls):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         super().setUpClass()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         cls.c = Cache(cls.gc, \"GC1PAR2\")\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         with cls.recorder.use_cassette(\"cache_setup\"):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >           cls.c.load()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | test/test_cache.py:209: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/cache.py:720: in load\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     root = self.geocaching._request(self._urls[\"cache_details\"], params={\"wp\": self._wp})\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/geocaching.py:82: in _request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     res = self._session.request(method, url, **kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     resp = self.send(prep, **send_kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:725: in send\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     history = [resp for resp in gen]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:725: in <listcomp>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     history = [resp for resp in gen]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:274: in resolve_redirects\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     **adapter_kwargs,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:747: in send\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     r.content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:899: in content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self._content = b\"\".join(self.iter_content(CONTENT_CHUNK_SIZE)) or b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:816: in generate\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     yield from self.raw.stream(chunk_size, decode_content=True)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:940: in stream\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self.read(amt=amt, decode_content=decode_content)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:911: in read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self._raw_read(amt)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: in _raw_read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:130: in __exit__\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self.gen.throw(type, value, traceback)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b813cd0d0>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If no exception is thrown, we should avoid cleaning up\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # unnecessarily.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             clean_exit = True\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         finally:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If we didn't terminate cleanly, we need to throw away our\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # connection.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if not clean_exit:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # The response may not be closed but we're not going to use it\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # anymore so close it now to ensure that the connection is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # released back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if self._original_response:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   self._original_response.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   AttributeError: 'MockHTTPResponse' object has no attribute 'close'\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:740: AttributeError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | ______________ ERROR at setup of TestMethods.test_load_trackables ______________\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b813cd0d0>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:710: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b813cd0d0>, amt = 10240\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _raw_read(\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         self,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         amt: int | None = None,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     ) -> bytes:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Reads `amt` of bytes from the socket.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         if self._fp is None:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             return None  # type: ignore[return-value]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         fp_closed = getattr(self._fp, \"closed\", False)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         with self._error_catcher():\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             data = self._fp_read(amt) if not fp_closed else b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if amt is not None and amt != 0 and not data:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Platform-specific: Buggy versions of Python.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Close the connection when no data is returned\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 #\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This is redundant to what httplib/http.client _should_\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # already do.  However, versions of python released before\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # December 15, 2012 (http://bugs.python.org/issue16298) do\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # not properly close the connection in all cases. There is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # no harm in redundantly calling close.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 self._fp.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if (\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     self.enforce_content_length\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining is not None\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining != 0\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 ):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # This is an edge case that httplib failed to cover due\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # to concerns of backward compatibility. We're\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # addressing it here to make sure IncompleteRead is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # raised during streaming, so all calls with incorrect\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # Content-Length are caught.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   urllib3.exceptions.IncompleteRead: IncompleteRead(119086 bytes read, -10 more expected)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: IncompleteRead\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | The above exception was the direct cause of the following exception:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b813cd0d0>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E               urllib3.exceptions.ProtocolError: ('Connection broken: IncompleteRead(119086 bytes read, -10 more expected)', IncompleteRead(119086 bytes read, -10 more expected))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:727: ProtocolError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | During handling of the above exception, another exception occurred:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | cls = <class 'test.test_cache.TestMethods'>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @classmethod\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def setUpClass(cls):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         super().setUpClass()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         cls.c = Cache(cls.gc, \"GC1PAR2\")\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         with cls.recorder.use_cassette(\"cache_setup\"):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >           cls.c.load()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | test/test_cache.py:209: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/cache.py:720: in load\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     root = self.geocaching._request(self._urls[\"cache_details\"], params={\"wp\": self._wp})\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/geocaching.py:82: in _request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     res = self._session.request(method, url, **kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     resp = self.send(prep, **send_kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:725: in send\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     history = [resp for resp in gen]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:725: in <listcomp>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     history = [resp for resp in gen]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:274: in resolve_redirects\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     **adapter_kwargs,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:747: in send\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     r.content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:899: in content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self._content = b\"\".join(self.iter_content(CONTENT_CHUNK_SIZE)) or b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:816: in generate\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     yield from self.raw.stream(chunk_size, decode_content=True)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:940: in stream\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self.read(amt=amt, decode_content=decode_content)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:911: in read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self._raw_read(amt)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: in _raw_read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:130: in __exit__\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self.gen.throw(type, value, traceback)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b813cd0d0>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If no exception is thrown, we should avoid cleaning up\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # unnecessarily.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             clean_exit = True\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         finally:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If we didn't terminate cleanly, we need to throw away our\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # connection.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if not clean_exit:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # The response may not be closed but we're not going to use it\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # anymore so close it now to ensure that the connection is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # released back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if self._original_response:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   self._original_response.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   AttributeError: 'MockHTTPResponse' object has no attribute 'close'\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:740: AttributeError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _________________ ERROR at setup of TestMethods.test_post_log __________________\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b813cd0d0>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:710: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b813cd0d0>, amt = 10240\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _raw_read(\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         self,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         amt: int | None = None,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     ) -> bytes:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Reads `amt` of bytes from the socket.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         if self._fp is None:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             return None  # type: ignore[return-value]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         fp_closed = getattr(self._fp, \"closed\", False)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         with self._error_catcher():\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             data = self._fp_read(amt) if not fp_closed else b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if amt is not None and amt != 0 and not data:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Platform-specific: Buggy versions of Python.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Close the connection when no data is returned\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 #\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This is redundant to what httplib/http.client _should_\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # already do.  However, versions of python released before\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # December 15, 2012 (http://bugs.python.org/issue16298) do\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # not properly close the connection in all cases. There is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # no harm in redundantly calling close.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 self._fp.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if (\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     self.enforce_content_length\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining is not None\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining != 0\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 ):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # This is an edge case that httplib failed to cover due\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # to concerns of backward compatibility. We're\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # addressing it here to make sure IncompleteRead is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # raised during streaming, so all calls with incorrect\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # Content-Length are caught.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   urllib3.exceptions.IncompleteRead: IncompleteRead(119086 bytes read, -10 more expected)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: IncompleteRead\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | The above exception was the direct cause of the following exception:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b813cd0d0>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E               urllib3.exceptions.ProtocolError: ('Connection broken: IncompleteRead(119086 bytes read, -10 more expected)', IncompleteRead(119086 bytes read, -10 more expected))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:727: ProtocolError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | During handling of the above exception, another exception occurred:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | cls = <class 'test.test_cache.TestMethods'>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @classmethod\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def setUpClass(cls):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         super().setUpClass()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         cls.c = Cache(cls.gc, \"GC1PAR2\")\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         with cls.recorder.use_cassette(\"cache_setup\"):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >           cls.c.load()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | test/test_cache.py:209: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/cache.py:720: in load\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     root = self.geocaching._request(self._urls[\"cache_details\"], params={\"wp\": self._wp})\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/geocaching.py:82: in _request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     res = self._session.request(method, url, **kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     resp = self.send(prep, **send_kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:725: in send\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     history = [resp for resp in gen]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:725: in <listcomp>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     history = [resp for resp in gen]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:274: in resolve_redirects\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     **adapter_kwargs,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:747: in send\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     r.content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:899: in content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self._content = b\"\".join(self.iter_content(CONTENT_CHUNK_SIZE)) or b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:816: in generate\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     yield from self.raw.stream(chunk_size, decode_content=True)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:940: in stream\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self.read(amt=amt, decode_content=decode_content)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:911: in read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self._raw_read(amt)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: in _raw_read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:130: in __exit__\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self.gen.throw(type, value, traceback)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b813cd0d0>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If no exception is thrown, we should avoid cleaning up\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # unnecessarily.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             clean_exit = True\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         finally:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If we didn't terminate cleanly, we need to throw away our\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # connection.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if not clean_exit:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # The response may not be closed but we're not going to use it\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # anymore so close it now to ensure that the connection is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # released back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if self._original_response:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   self._original_response.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   AttributeError: 'MockHTTPResponse' object has no attribute 'close'\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:740: AttributeError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | __________________ ERROR at setup of TestMethods.test_get_KML __________________\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b810d8a10>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:710: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b810d8a10>, amt = 10240\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _raw_read(\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         self,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         amt: int | None = None,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     ) -> bytes:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Reads `amt` of bytes from the socket.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         if self._fp is None:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             return None  # type: ignore[return-value]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         fp_closed = getattr(self._fp, \"closed\", False)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         with self._error_catcher():\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             data = self._fp_read(amt) if not fp_closed else b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if amt is not None and amt != 0 and not data:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Platform-specific: Buggy versions of Python.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Close the connection when no data is returned\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 #\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This is redundant to what httplib/http.client _should_\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # already do.  However, versions of python released before\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # December 15, 2012 (http://bugs.python.org/issue16298) do\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # not properly close the connection in all cases. There is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # no harm in redundantly calling close.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 self._fp.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if (\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     self.enforce_content_length\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining is not None\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining != 0\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 ):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # This is an edge case that httplib failed to cover due\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # to concerns of backward compatibility. We're\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # addressing it here to make sure IncompleteRead is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # raised during streaming, so all calls with incorrect\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # Content-Length are caught.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   urllib3.exceptions.IncompleteRead: IncompleteRead(50706 bytes read, -10 more expected)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: IncompleteRead\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | The above exception was the direct cause of the following exception:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b810d8a10>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E               urllib3.exceptions.ProtocolError: ('Connection broken: IncompleteRead(50706 bytes read, -10 more expected)', IncompleteRead(50706 bytes read, -10 more expected))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:727: ProtocolError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | During handling of the above exception, another exception occurred:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | cls = <class 'test.test_trackable.TestMethods'>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @classmethod\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def setUpClass(cls):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         super().setUpClass()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         cls.t = Trackable(cls.gc, \"TB1KEZ9\")\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         with cls.recorder.use_cassette(\"trackable_setup\"):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >           cls.t.load()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | test/test_trackable.py:69: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/trackable.py:187: in load\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     root = self.geocaching._request(url)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/geocaching.py:82: in _request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     res = self._session.request(method, url, **kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     resp = self.send(prep, **send_kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:747: in send\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     r.content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:899: in content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self._content = b\"\".join(self.iter_content(CONTENT_CHUNK_SIZE)) or b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:816: in generate\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     yield from self.raw.stream(chunk_size, decode_content=True)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:940: in stream\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self.read(amt=amt, decode_content=decode_content)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:911: in read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self._raw_read(amt)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: in _raw_read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:130: in __exit__\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self.gen.throw(type, value, traceback)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b810d8a10>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If no exception is thrown, we should avoid cleaning up\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # unnecessarily.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             clean_exit = True\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         finally:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If we didn't terminate cleanly, we need to throw away our\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # connection.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if not clean_exit:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # The response may not be closed but we're not going to use it\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # anymore so close it now to ensure that the connection is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # released back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if self._original_response:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   self._original_response.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   AttributeError: 'MockHTTPResponse' object has no attribute 'close'\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:740: AttributeError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | ___________________ ERROR at setup of TestMethods.test_load ____________________\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b810d8a10>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:710: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b810d8a10>, amt = 10240\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _raw_read(\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         self,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         amt: int | None = None,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     ) -> bytes:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Reads `amt` of bytes from the socket.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         if self._fp is None:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             return None  # type: ignore[return-value]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         fp_closed = getattr(self._fp, \"closed\", False)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         with self._error_catcher():\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             data = self._fp_read(amt) if not fp_closed else b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if amt is not None and amt != 0 and not data:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Platform-specific: Buggy versions of Python.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Close the connection when no data is returned\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 #\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This is redundant to what httplib/http.client _should_\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # already do.  However, versions of python released before\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # December 15, 2012 (http://bugs.python.org/issue16298) do\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # not properly close the connection in all cases. There is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # no harm in redundantly calling close.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 self._fp.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if (\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     self.enforce_content_length\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining is not None\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining != 0\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 ):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # This is an edge case that httplib failed to cover due\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # to concerns of backward compatibility. We're\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # addressing it here to make sure IncompleteRead is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # raised during streaming, so all calls with incorrect\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # Content-Length are caught.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   urllib3.exceptions.IncompleteRead: IncompleteRead(50706 bytes read, -10 more expected)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: IncompleteRead\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | The above exception was the direct cause of the following exception:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b810d8a10>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E               urllib3.exceptions.ProtocolError: ('Connection broken: IncompleteRead(50706 bytes read, -10 more expected)', IncompleteRead(50706 bytes read, -10 more expected))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:727: ProtocolError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | During handling of the above exception, another exception occurred:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | cls = <class 'test.test_trackable.TestMethods'>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @classmethod\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def setUpClass(cls):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         super().setUpClass()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         cls.t = Trackable(cls.gc, \"TB1KEZ9\")\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         with cls.recorder.use_cassette(\"trackable_setup\"):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >           cls.t.load()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | test/test_trackable.py:69: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/trackable.py:187: in load\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     root = self.geocaching._request(url)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/geocaching.py:82: in _request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     res = self._session.request(method, url, **kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     resp = self.send(prep, **send_kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:747: in send\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     r.content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:899: in content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self._content = b\"\".join(self.iter_content(CONTENT_CHUNK_SIZE)) or b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:816: in generate\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     yield from self.raw.stream(chunk_size, decode_content=True)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:940: in stream\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self.read(amt=amt, decode_content=decode_content)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:911: in read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self._raw_read(amt)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: in _raw_read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:130: in __exit__\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self.gen.throw(type, value, traceback)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b810d8a10>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If no exception is thrown, we should avoid cleaning up\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # unnecessarily.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             clean_exit = True\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         finally:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If we didn't terminate cleanly, we need to throw away our\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # connection.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if not clean_exit:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # The response may not be closed but we're not going to use it\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # anymore so close it now to ensure that the connection is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # released back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if self._original_response:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   self._original_response.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   AttributeError: 'MockHTTPResponse' object has no attribute 'close'\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:740: AttributeError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _______________ ERROR at setup of TestMethods.test_load_log_page _______________\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b810d8a10>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:710: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b810d8a10>, amt = 10240\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _raw_read(\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         self,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         amt: int | None = None,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     ) -> bytes:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Reads `amt` of bytes from the socket.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         if self._fp is None:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             return None  # type: ignore[return-value]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         fp_closed = getattr(self._fp, \"closed\", False)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         with self._error_catcher():\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             data = self._fp_read(amt) if not fp_closed else b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if amt is not None and amt != 0 and not data:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Platform-specific: Buggy versions of Python.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Close the connection when no data is returned\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 #\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This is redundant to what httplib/http.client _should_\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # already do.  However, versions of python released before\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # December 15, 2012 (http://bugs.python.org/issue16298) do\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # not properly close the connection in all cases. There is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # no harm in redundantly calling close.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 self._fp.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if (\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     self.enforce_content_length\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining is not None\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining != 0\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 ):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # This is an edge case that httplib failed to cover due\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # to concerns of backward compatibility. We're\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # addressing it here to make sure IncompleteRead is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # raised during streaming, so all calls with incorrect\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # Content-Length are caught.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   urllib3.exceptions.IncompleteRead: IncompleteRead(50706 bytes read, -10 more expected)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: IncompleteRead\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | The above exception was the direct cause of the following exception:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b810d8a10>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E               urllib3.exceptions.ProtocolError: ('Connection broken: IncompleteRead(50706 bytes read, -10 more expected)', IncompleteRead(50706 bytes read, -10 more expected))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:727: ProtocolError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | During handling of the above exception, another exception occurred:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | cls = <class 'test.test_trackable.TestMethods'>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @classmethod\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def setUpClass(cls):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         super().setUpClass()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         cls.t = Trackable(cls.gc, \"TB1KEZ9\")\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         with cls.recorder.use_cassette(\"trackable_setup\"):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >           cls.t.load()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | test/test_trackable.py:69: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/trackable.py:187: in load\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     root = self.geocaching._request(url)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/geocaching.py:82: in _request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     res = self._session.request(method, url, **kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     resp = self.send(prep, **send_kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:747: in send\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     r.content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:899: in content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self._content = b\"\".join(self.iter_content(CONTENT_CHUNK_SIZE)) or b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:816: in generate\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     yield from self.raw.stream(chunk_size, decode_content=True)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:940: in stream\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self.read(amt=amt, decode_content=decode_content)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:911: in read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self._raw_read(amt)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: in _raw_read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:130: in __exit__\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self.gen.throw(type, value, traceback)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b810d8a10>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If no exception is thrown, we should avoid cleaning up\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # unnecessarily.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             clean_exit = True\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         finally:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If we didn't terminate cleanly, we need to throw away our\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # connection.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if not clean_exit:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # The response may not be closed but we're not going to use it\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # anymore so close it now to ensure that the connection is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # released back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if self._original_response:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   self._original_response.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   AttributeError: 'MockHTTPResponse' object has no attribute 'close'\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:740: AttributeError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _________________ ERROR at setup of TestMethods.test_post_log __________________\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b810d8a10>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:710: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b810d8a10>, amt = 10240\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _raw_read(\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         self,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         amt: int | None = None,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     ) -> bytes:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Reads `amt` of bytes from the socket.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         if self._fp is None:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             return None  # type: ignore[return-value]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         fp_closed = getattr(self._fp, \"closed\", False)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         with self._error_catcher():\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             data = self._fp_read(amt) if not fp_closed else b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if amt is not None and amt != 0 and not data:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Platform-specific: Buggy versions of Python.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Close the connection when no data is returned\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 #\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This is redundant to what httplib/http.client _should_\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # already do.  However, versions of python released before\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # December 15, 2012 (http://bugs.python.org/issue16298) do\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # not properly close the connection in all cases. There is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # no harm in redundantly calling close.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 self._fp.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if (\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     self.enforce_content_length\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining is not None\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining != 0\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 ):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # This is an edge case that httplib failed to cover due\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # to concerns of backward compatibility. We're\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # addressing it here to make sure IncompleteRead is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # raised during streaming, so all calls with incorrect\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # Content-Length are caught.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   urllib3.exceptions.IncompleteRead: IncompleteRead(50706 bytes read, -10 more expected)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: IncompleteRead\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | The above exception was the direct cause of the following exception:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b810d8a10>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E               urllib3.exceptions.ProtocolError: ('Connection broken: IncompleteRead(50706 bytes read, -10 more expected)', IncompleteRead(50706 bytes read, -10 more expected))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:727: ProtocolError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | During handling of the above exception, another exception occurred:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | cls = <class 'test.test_trackable.TestMethods'>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @classmethod\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def setUpClass(cls):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         super().setUpClass()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         cls.t = Trackable(cls.gc, \"TB1KEZ9\")\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         with cls.recorder.use_cassette(\"trackable_setup\"):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >           cls.t.load()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | test/test_trackable.py:69: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/trackable.py:187: in load\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     root = self.geocaching._request(url)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/geocaching.py:82: in _request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     res = self._session.request(method, url, **kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     resp = self.send(prep, **send_kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:747: in send\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     r.content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:899: in content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self._content = b\"\".join(self.iter_content(CONTENT_CHUNK_SIZE)) or b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:816: in generate\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     yield from self.raw.stream(chunk_size, decode_content=True)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:940: in stream\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self.read(amt=amt, decode_content=decode_content)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:911: in read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self._raw_read(amt)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: in _raw_read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:130: in __exit__\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self.gen.throw(type, value, traceback)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b810d8a10>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If no exception is thrown, we should avoid cleaning up\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # unnecessarily.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             clean_exit = True\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         finally:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If we didn't terminate cleanly, we need to throw away our\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # connection.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if not clean_exit:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # The response may not be closed but we're not going to use it\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # anymore so close it now to ensure that the connection is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # released back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if self._original_response:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   self._original_response.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   AttributeError: 'MockHTTPResponse' object has no attribute 'close'\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:740: AttributeError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | =================================== FAILURES ===================================\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _________________________ TestCacheIssues.test_author __________________________\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | args = (<pycaching.cache.Cache object at 0x7f7b80f923d0>,), kwargs = {}\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <pycaching.cache.Cache object at 0x7f7b80f923d0>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @functools.wraps(func)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def wrapper(*args, **kwargs):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         self = args[0]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >           return func(*args, **kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/util.py:30: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <pycaching.cache.Cache object at 0x7f7b80f923d0>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @property\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @lazy_loaded\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def author(self):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"The cache author.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         :type: :class:`str`\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >       return self._author\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E       AttributeError: 'Cache' object has no attribute '_author'\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/cache.py:517: AttributeError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | During handling of the above exception, another exception occurred:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b81694350>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:710: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b81694350>, amt = 10240\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _raw_read(\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         self,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         amt: int | None = None,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     ) -> bytes:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Reads `amt` of bytes from the socket.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         if self._fp is None:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             return None  # type: ignore[return-value]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         fp_closed = getattr(self._fp, \"closed\", False)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         with self._error_catcher():\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             data = self._fp_read(amt) if not fp_closed else b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if amt is not None and amt != 0 and not data:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Platform-specific: Buggy versions of Python.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Close the connection when no data is returned\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 #\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This is redundant to what httplib/http.client _should_\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # already do.  However, versions of python released before\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # December 15, 2012 (http://bugs.python.org/issue16298) do\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # not properly close the connection in all cases. There is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # no harm in redundantly calling close.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 self._fp.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if (\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     self.enforce_content_length\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining is not None\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining != 0\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 ):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # This is an edge case that httplib failed to cover due\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # to concerns of backward compatibility. We're\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # addressing it here to make sure IncompleteRead is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # raised during streaming, so all calls with incorrect\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # Content-Length are caught.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   urllib3.exceptions.IncompleteRead: IncompleteRead(157473 bytes read, -10 more expected)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: IncompleteRead\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | The above exception was the direct cause of the following exception:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b81694350>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E               urllib3.exceptions.ProtocolError: ('Connection broken: IncompleteRead(157473 bytes read, -10 more expected)', IncompleteRead(157473 bytes read, -10 more expected))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:727: ProtocolError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | During handling of the above exception, another exception occurred:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <test.test_cache.TestCacheIssues testMethod=test_author>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def test_author(self):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         with self.subTest(\"normal\"):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             cache = Cache(self.gc, \"GC4808G\")\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             with self.recorder.use_cassette(\"cache_author_normal\"):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               self.assertEqual(\"Bifurka\u010dn\u00ed t\u00fdm\", cache.author)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | test/test_cache.py:421: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/util.py:33: in wrapper\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self.load()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/cache.py:720: in load\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     root = self.geocaching._request(self._urls[\"cache_details\"], params={\"wp\": self._wp})\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/geocaching.py:82: in _request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     res = self._session.request(method, url, **kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     resp = self.send(prep, **send_kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:725: in send\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     history = [resp for resp in gen]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:725: in <listcomp>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     history = [resp for resp in gen]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:274: in resolve_redirects\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     **adapter_kwargs,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:747: in send\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     r.content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:899: in content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self._content = b\"\".join(self.iter_content(CONTENT_CHUNK_SIZE)) or b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:816: in generate\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     yield from self.raw.stream(chunk_size, decode_content=True)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:940: in stream\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self.read(amt=amt, decode_content=decode_content)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:911: in read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self._raw_read(amt)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: in _raw_read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:130: in __exit__\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self.gen.throw(type, value, traceback)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b81694350>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If no exception is thrown, we should avoid cleaning up\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # unnecessarily.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             clean_exit = True\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         finally:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If we didn't terminate cleanly, we need to throw away our\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # connection.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if not clean_exit:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # The response may not be closed but we're not going to use it\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # anymore so close it now to ensure that the connection is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # released back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if self._original_response:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   self._original_response.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   AttributeError: 'MockHTTPResponse' object has no attribute 'close'\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:740: AttributeError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | ______________________ TestCacheStatus.test_cache_status _______________________\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | args = (<pycaching.cache.Cache object at 0x7f7b813c0510>,), kwargs = {}\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <pycaching.cache.Cache object at 0x7f7b813c0510>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @functools.wraps(func)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def wrapper(*args, **kwargs):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         self = args[0]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >           return func(*args, **kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/util.py:30: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <pycaching.cache.Cache object at 0x7f7b813c0510>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @property\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @lazy_loaded\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def status(self):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"The cache status (Enabled, Disabled, Archived, Unpublished, Locked).\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         :type: :class:`.cache.Status`\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >       return self._status\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E       AttributeError: 'Cache' object has no attribute '_status'\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/cache.py:424: AttributeError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | During handling of the above exception, another exception occurred:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b81113a50>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:710: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b81113a50>, amt = 10240\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _raw_read(\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         self,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         amt: int | None = None,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     ) -> bytes:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Reads `amt` of bytes from the socket.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         if self._fp is None:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             return None  # type: ignore[return-value]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         fp_closed = getattr(self._fp, \"closed\", False)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         with self._error_catcher():\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             data = self._fp_read(amt) if not fp_closed else b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if amt is not None and amt != 0 and not data:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Platform-specific: Buggy versions of Python.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Close the connection when no data is returned\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 #\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This is redundant to what httplib/http.client _should_\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # already do.  However, versions of python released before\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # December 15, 2012 (http://bugs.python.org/issue16298) do\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # not properly close the connection in all cases. There is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # no harm in redundantly calling close.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 self._fp.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if (\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     self.enforce_content_length\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining is not None\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining != 0\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 ):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # This is an edge case that httplib failed to cover due\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # to concerns of backward compatibility. We're\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # addressing it here to make sure IncompleteRead is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # raised during streaming, so all calls with incorrect\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # Content-Length are caught.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   urllib3.exceptions.IncompleteRead: IncompleteRead(117401 bytes read, -13 more expected)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: IncompleteRead\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | The above exception was the direct cause of the following exception:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b81113a50>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E               urllib3.exceptions.ProtocolError: ('Connection broken: IncompleteRead(117401 bytes read, -13 more expected)', IncompleteRead(117401 bytes read, -13 more expected))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:727: ProtocolError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | During handling of the above exception, another exception occurred:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <test.test_cache.TestCacheStatus testMethod=test_cache_status>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def test_cache_status(self):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         with self.subTest(\"Enabled\"):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             cache = Cache(self.gc, \"GC8CKQQ\")\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             with self.recorder.use_cassette(\"cache_status_enabled\"):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               self.assertEqual(Status.enabled, cache.status)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | test/test_cache.py:479: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/util.py:33: in wrapper\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self.load()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/cache.py:720: in load\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     root = self.geocaching._request(self._urls[\"cache_details\"], params={\"wp\": self._wp})\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/geocaching.py:82: in _request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     res = self._session.request(method, url, **kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     resp = self.send(prep, **send_kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:725: in send\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     history = [resp for resp in gen]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:725: in <listcomp>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     history = [resp for resp in gen]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:274: in resolve_redirects\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     **adapter_kwargs,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:747: in send\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     r.content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:899: in content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self._content = b\"\".join(self.iter_content(CONTENT_CHUNK_SIZE)) or b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:816: in generate\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     yield from self.raw.stream(chunk_size, decode_content=True)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:940: in stream\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self.read(amt=amt, decode_content=decode_content)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:911: in read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self._raw_read(amt)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: in _raw_read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:130: in __exit__\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self.gen.throw(type, value, traceback)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b81113a50>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If no exception is thrown, we should avoid cleaning up\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # unnecessarily.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             clean_exit = True\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         finally:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If we didn't terminate cleanly, we need to throw away our\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # connection.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if not clean_exit:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # The response may not be closed but we're not going to use it\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # anymore so close it now to ensure that the connection is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # released back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if self._original_response:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   self._original_response.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   AttributeError: 'MockHTTPResponse' object has no attribute 'close'\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:740: AttributeError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | ______________________________ TestHint.test_hint ______________________________\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | args = (<pycaching.cache.Cache object at 0x7f7b81044850>,), kwargs = {}\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <pycaching.cache.Cache object at 0x7f7b81044850>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @functools.wraps(func)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def wrapper(*args, **kwargs):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         self = args[0]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >           return func(*args, **kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/util.py:30: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <pycaching.cache.Cache object at 0x7f7b81044850>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @property\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @lazy_loaded\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def hint(self):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"The cache hint.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         :setter: Set a cache hint. Don't decode text, you have to use :meth:`.util.rot13` before.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         :type: :class:`str`\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >       return self._hint\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E       AttributeError: 'Cache' object has no attribute '_hint'\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/cache.py:624: AttributeError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | During handling of the above exception, another exception occurred:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b81103450>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:710: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b81103450>, amt = 10240\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _raw_read(\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         self,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         amt: int | None = None,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     ) -> bytes:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Reads `amt` of bytes from the socket.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         if self._fp is None:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             return None  # type: ignore[return-value]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         fp_closed = getattr(self._fp, \"closed\", False)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         with self._error_catcher():\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             data = self._fp_read(amt) if not fp_closed else b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if amt is not None and amt != 0 and not data:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Platform-specific: Buggy versions of Python.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Close the connection when no data is returned\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 #\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This is redundant to what httplib/http.client _should_\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # already do.  However, versions of python released before\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # December 15, 2012 (http://bugs.python.org/issue16298) do\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # not properly close the connection in all cases. There is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # no harm in redundantly calling close.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 self._fp.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if (\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     self.enforce_content_length\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining is not None\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining != 0\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 ):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # This is an edge case that httplib failed to cover due\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # to concerns of backward compatibility. We're\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # addressing it here to make sure IncompleteRead is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # raised during streaming, so all calls with incorrect\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # Content-Length are caught.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   urllib3.exceptions.IncompleteRead: IncompleteRead(120165 bytes read, -13 more expected)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: IncompleteRead\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | The above exception was the direct cause of the following exception:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b81103450>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E               urllib3.exceptions.ProtocolError: ('Connection broken: IncompleteRead(120165 bytes read, -13 more expected)', IncompleteRead(120165 bytes read, -13 more expected))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:727: ProtocolError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | During handling of the above exception, another exception occurred:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <test.test_cache.TestHint testMethod=test_hint>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def test_hint(self):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         with self.subTest(\"Lazy loading\"):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             cache = Cache(self.gc, \"GC9HJ2J\")\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             with self.recorder.use_cassette(\"cache_hint_lazy_loading\"):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               self.assertEqual(cache.hint, \"[CZ:] plot, nahore, vpravo; fotohint\\n[EN:] fence, up, right; photohint\")\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | test/test_cache.py:508: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/util.py:33: in wrapper\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self.load()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/cache.py:720: in load\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     root = self.geocaching._request(self._urls[\"cache_details\"], params={\"wp\": self._wp})\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/geocaching.py:82: in _request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     res = self._session.request(method, url, **kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     resp = self.send(prep, **send_kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:725: in send\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     history = [resp for resp in gen]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:725: in <listcomp>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     history = [resp for resp in gen]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:274: in resolve_redirects\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     **adapter_kwargs,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:747: in send\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     r.content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:899: in content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self._content = b\"\".join(self.iter_content(CONTENT_CHUNK_SIZE)) or b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:816: in generate\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     yield from self.raw.stream(chunk_size, decode_content=True)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:940: in stream\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self.read(amt=amt, decode_content=decode_content)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:911: in read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self._raw_read(amt)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: in _raw_read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:130: in __exit__\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self.gen.throw(type, value, traceback)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b81103450>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If no exception is thrown, we should avoid cleaning up\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # unnecessarily.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             clean_exit = True\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         finally:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If we didn't terminate cleanly, we need to throw away our\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # connection.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if not clean_exit:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # The response may not be closed but we're not going to use it\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # anymore so close it now to ensure that the connection is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # released back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if self._original_response:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   self._original_response.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   AttributeError: 'MockHTTPResponse' object has no attribute 'close'\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:740: AttributeError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | ________________________ TestTile.test_download_utfgrid ________________________\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b810b2bd0>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:710: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b810b2bd0>, amt = 10240\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _raw_read(\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         self,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         amt: int | None = None,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     ) -> bytes:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Reads `amt` of bytes from the socket.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         if self._fp is None:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             return None  # type: ignore[return-value]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         fp_closed = getattr(self._fp, \"closed\", False)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         with self._error_catcher():\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             data = self._fp_read(amt) if not fp_closed else b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if amt is not None and amt != 0 and not data:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Platform-specific: Buggy versions of Python.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Close the connection when no data is returned\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 #\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This is redundant to what httplib/http.client _should_\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # already do.  However, versions of python released before\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # December 15, 2012 (http://bugs.python.org/issue16298) do\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # not properly close the connection in all cases. There is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # no harm in redundantly calling close.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 self._fp.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if (\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     self.enforce_content_length\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining is not None\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining != 0\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 ):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # This is an edge case that httplib failed to cover due\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # to concerns of backward compatibility. We're\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # addressing it here to make sure IncompleteRead is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # raised during streaming, so all calls with incorrect\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # Content-Length are caught.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   urllib3.exceptions.IncompleteRead: IncompleteRead(29934 bytes read, -13268 more expected)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: IncompleteRead\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | The above exception was the direct cause of the following exception:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b810b2bd0>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E               urllib3.exceptions.ProtocolError: ('Connection broken: IncompleteRead(29934 bytes read, -13268 more expected)', IncompleteRead(29934 bytes read, -13268 more expected))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:727: ProtocolError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | During handling of the above exception, another exception occurred:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <test.test_geo.TestTile testMethod=test_download_utfgrid>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def test_download_utfgrid(self):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"Test if downloading a UTFGrid passes without errors\"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         with self.recorder.use_cassette(\"geo_point_utfgrid\"):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             with self.subTest(\"not getting .png tile first\"):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               self.tile._download_utfgrid()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | test/test_geo.py:190: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/geo.py:334: in _download_utfgrid\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     return self._download_utfgrid(get_png=True)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/geo.py:324: in _download_utfgrid\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self.geocaching._request(self._urls[\"tile\"], params=params, expect=\"raw\")\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/geocaching.py:82: in _request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     res = self._session.request(method, url, **kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     resp = self.send(prep, **send_kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:725: in send\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     history = [resp for resp in gen]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:725: in <listcomp>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     history = [resp for resp in gen]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:274: in resolve_redirects\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     **adapter_kwargs,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:747: in send\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     r.content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:899: in content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self._content = b\"\".join(self.iter_content(CONTENT_CHUNK_SIZE)) or b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:816: in generate\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     yield from self.raw.stream(chunk_size, decode_content=True)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:940: in stream\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self.read(amt=amt, decode_content=decode_content)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:911: in read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self._raw_read(amt)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: in _raw_read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:130: in __exit__\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self.gen.throw(type, value, traceback)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b810b2bd0>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If no exception is thrown, we should avoid cleaning up\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # unnecessarily.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             clean_exit = True\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         finally:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If we didn't terminate cleanly, we need to throw away our\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # connection.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if not clean_exit:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # The response may not be closed but we're not going to use it\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # anymore so close it now to ensure that the connection is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # released back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if self._original_response:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   self._original_response.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   AttributeError: 'MockHTTPResponse' object has no attribute 'close'\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:740: AttributeError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | ________________ TestMethods.test__try_getting_cache_from_guid _________________\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b811b9f10>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:710: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b811b9f10>, amt = 10240\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _raw_read(\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         self,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         amt: int | None = None,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     ) -> bytes:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Reads `amt` of bytes from the socket.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         if self._fp is None:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             return None  # type: ignore[return-value]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         fp_closed = getattr(self._fp, \"closed\", False)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         with self._error_catcher():\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             data = self._fp_read(amt) if not fp_closed else b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if amt is not None and amt != 0 and not data:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Platform-specific: Buggy versions of Python.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Close the connection when no data is returned\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 #\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This is redundant to what httplib/http.client _should_\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # already do.  However, versions of python released before\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # December 15, 2012 (http://bugs.python.org/issue16298) do\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # not properly close the connection in all cases. There is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # no harm in redundantly calling close.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 self._fp.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if (\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     self.enforce_content_length\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining is not None\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining != 0\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 ):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # This is an edge case that httplib failed to cover due\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # to concerns of backward compatibility. We're\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # addressing it here to make sure IncompleteRead is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # raised during streaming, so all calls with incorrect\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # Content-Length are caught.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   urllib3.exceptions.IncompleteRead: IncompleteRead(83904 bytes read, -30 more expected)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: IncompleteRead\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | The above exception was the direct cause of the following exception:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b811b9f10>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E               urllib3.exceptions.ProtocolError: ('Connection broken: IncompleteRead(83904 bytes read, -30 more expected)', IncompleteRead(83904 bytes read, -30 more expected))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:727: ProtocolError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | During handling of the above exception, another exception occurred:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <test.test_geocaching.TestMethods testMethod=test__try_getting_cache_from_guid>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def test__try_getting_cache_from_guid(self):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         # get \"normal\" cache from guidpage\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         with self.recorder.use_cassette(\"geocaching__try_getting_cache_from_guid\"):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >           cache = self.gc._try_getting_cache_from_guid(\"15ad3a3d-92c1-4f7c-b273-60937bcc2072\")\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | test/test_geocaching.py:74: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/geocaching.py:464: in _try_getting_cache_from_guid\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     return self.get_cache(guid=guid)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/geocaching.py:430: in get_cache\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     return self._cache_from_guid(guid)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/geocaching.py:455: in _cache_from_guid\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     print_page = self._request(Cache._urls[\"print_page\"], params={\"guid\": guid})\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/geocaching.py:82: in _request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     res = self._session.request(method, url, **kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     resp = self.send(prep, **send_kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:747: in send\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     r.content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:899: in content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self._content = b\"\".join(self.iter_content(CONTENT_CHUNK_SIZE)) or b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:816: in generate\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     yield from self.raw.stream(chunk_size, decode_content=True)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:940: in stream\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self.read(amt=amt, decode_content=decode_content)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:911: in read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self._raw_read(amt)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: in _raw_read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:130: in __exit__\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self.gen.throw(type, value, traceback)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b811b9f10>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If no exception is thrown, we should avoid cleaning up\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # unnecessarily.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             clean_exit = True\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         finally:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If we didn't terminate cleanly, we need to throw away our\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # connection.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if not clean_exit:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # The response may not be closed but we're not going to use it\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # anymore so close it now to ensure that the connection is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # released back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if self._original_response:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   self._original_response.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   AttributeError: 'MockHTTPResponse' object has no attribute 'close'\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:740: AttributeError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | ____________ TestMethods.test__try_getting_cache_from_guid_pm_only _____________\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b81199cd0>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:710: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b81199cd0>, amt = 10240\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _raw_read(\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         self,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         amt: int | None = None,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     ) -> bytes:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Reads `amt` of bytes from the socket.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         if self._fp is None:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             return None  # type: ignore[return-value]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         fp_closed = getattr(self._fp, \"closed\", False)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         with self._error_catcher():\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             data = self._fp_read(amt) if not fp_closed else b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if amt is not None and amt != 0 and not data:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Platform-specific: Buggy versions of Python.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Close the connection when no data is returned\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 #\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This is redundant to what httplib/http.client _should_\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # already do.  However, versions of python released before\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # December 15, 2012 (http://bugs.python.org/issue16298) do\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # not properly close the connection in all cases. There is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # no harm in redundantly calling close.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 self._fp.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if (\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     self.enforce_content_length\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining is not None\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining != 0\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 ):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # This is an edge case that httplib failed to cover due\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # to concerns of backward compatibility. We're\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # addressing it here to make sure IncompleteRead is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # raised during streaming, so all calls with incorrect\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # Content-Length are caught.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   urllib3.exceptions.IncompleteRead: IncompleteRead(15885 bytes read, -10 more expected)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: IncompleteRead\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | The above exception was the direct cause of the following exception:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b81199cd0>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E               urllib3.exceptions.ProtocolError: ('Connection broken: IncompleteRead(15885 bytes read, -10 more expected)', IncompleteRead(15885 bytes read, -10 more expected))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:727: ProtocolError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | During handling of the above exception, another exception occurred:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <test.test_geocaching.TestMethods testMethod=test__try_getting_cache_from_guid_pm_only>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def test__try_getting_cache_from_guid_pm_only(self):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         # get PMonly cache from GC code (doesn't load any information)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         with self.recorder.use_cassette(\"geocaching__try_getting_cache_from_guid_pm_only\"):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               cache_pm = self.gc._try_getting_cache_from_guid(\"328927c1-aa8c-4e0d-bf59-31f1ce44d990\")\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | test/test_geocaching.py:81: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/geocaching.py:464: in _try_getting_cache_from_guid\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     return self.get_cache(guid=guid)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/geocaching.py:430: in get_cache\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     return self._cache_from_guid(guid)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/geocaching.py:455: in _cache_from_guid\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     print_page = self._request(Cache._urls[\"print_page\"], params={\"guid\": guid})\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/geocaching.py:82: in _request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     res = self._session.request(method, url, **kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     resp = self.send(prep, **send_kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:747: in send\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     r.content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:899: in content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self._content = b\"\".join(self.iter_content(CONTENT_CHUNK_SIZE)) or b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:816: in generate\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     yield from self.raw.stream(chunk_size, decode_content=True)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:940: in stream\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self.read(amt=amt, decode_content=decode_content)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:911: in read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self._raw_read(amt)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: in _raw_read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:130: in __exit__\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self.gen.throw(type, value, traceback)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b81199cd0>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If no exception is thrown, we should avoid cleaning up\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # unnecessarily.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             clean_exit = True\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         finally:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If we didn't terminate cleanly, we need to throw away our\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # connection.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if not clean_exit:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # The response may not be closed but we're not going to use it\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # anymore so close it now to ensure that the connection is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # released back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if self._original_response:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   self._original_response.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   AttributeError: 'MockHTTPResponse' object has no attribute 'close'\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:740: AttributeError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | ___________________________ TestMethods.test_my_dnfs ___________________________\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b810aa110>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:710: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b810aa110>, amt = 10240\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _raw_read(\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         self,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         amt: int | None = None,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     ) -> bytes:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Reads `amt` of bytes from the socket.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         if self._fp is None:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             return None  # type: ignore[return-value]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         fp_closed = getattr(self._fp, \"closed\", False)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         with self._error_catcher():\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             data = self._fp_read(amt) if not fp_closed else b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if amt is not None and amt != 0 and not data:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Platform-specific: Buggy versions of Python.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Close the connection when no data is returned\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 #\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This is redundant to what httplib/http.client _should_\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # already do.  However, versions of python released before\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # December 15, 2012 (http://bugs.python.org/issue16298) do\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # not properly close the connection in all cases. There is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # no harm in redundantly calling close.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 self._fp.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if (\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     self.enforce_content_length\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining is not None\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining != 0\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 ):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # This is an edge case that httplib failed to cover due\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # to concerns of backward compatibility. We're\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # addressing it here to make sure IncompleteRead is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # raised during streaming, so all calls with incorrect\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # Content-Length are caught.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   urllib3.exceptions.IncompleteRead: IncompleteRead(17577 bytes read, -10 more expected)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: IncompleteRead\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | The above exception was the direct cause of the following exception:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b810aa110>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E               urllib3.exceptions.ProtocolError: ('Connection broken: IncompleteRead(17577 bytes read, -10 more expected)', IncompleteRead(17577 bytes read, -10 more expected))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:727: ProtocolError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | During handling of the above exception, another exception occurred:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <test.test_geocaching.TestMethods testMethod=test_my_dnfs>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def test_my_dnfs(self):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         with self.recorder.use_cassette(\"geocaching_my_dnfs\"):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >           dnfs = list(self.gc.my_dnfs(3))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | test/test_geocaching.py:22: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/geocaching.py:483: in my_logs\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     cache_table = self._request(url).find(class_=\"Table\")\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/geocaching.py:82: in _request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     res = self._session.request(method, url, **kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     resp = self.send(prep, **send_kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:747: in send\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     r.content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:899: in content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self._content = b\"\".join(self.iter_content(CONTENT_CHUNK_SIZE)) or b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:816: in generate\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     yield from self.raw.stream(chunk_size, decode_content=True)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:940: in stream\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self.read(amt=amt, decode_content=decode_content)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:911: in read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self._raw_read(amt)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: in _raw_read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:130: in __exit__\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self.gen.throw(type, value, traceback)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b810aa110>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If no exception is thrown, we should avoid cleaning up\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # unnecessarily.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             clean_exit = True\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         finally:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If we didn't terminate cleanly, we need to throw away our\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # connection.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if not clean_exit:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # The response may not be closed but we're not going to use it\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # anymore so close it now to ensure that the connection is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # released back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if self._original_response:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   self._original_response.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   AttributeError: 'MockHTTPResponse' object has no attribute 'close'\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:740: AttributeError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | __________________________ TestMethods.test_my_finds ___________________________\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b81392bd0>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:710: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b81392bd0>, amt = 10240\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _raw_read(\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         self,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         amt: int | None = None,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     ) -> bytes:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Reads `amt` of bytes from the socket.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         if self._fp is None:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             return None  # type: ignore[return-value]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         fp_closed = getattr(self._fp, \"closed\", False)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         with self._error_catcher():\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             data = self._fp_read(amt) if not fp_closed else b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if amt is not None and amt != 0 and not data:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Platform-specific: Buggy versions of Python.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Close the connection when no data is returned\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 #\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This is redundant to what httplib/http.client _should_\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # already do.  However, versions of python released before\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # December 15, 2012 (http://bugs.python.org/issue16298) do\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # not properly close the connection in all cases. There is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # no harm in redundantly calling close.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 self._fp.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if (\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     self.enforce_content_length\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining is not None\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining != 0\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 ):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # This is an edge case that httplib failed to cover due\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # to concerns of backward compatibility. We're\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # addressing it here to make sure IncompleteRead is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # raised during streaming, so all calls with incorrect\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # Content-Length are caught.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   urllib3.exceptions.IncompleteRead: IncompleteRead(17577 bytes read, -10 more expected)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: IncompleteRead\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | The above exception was the direct cause of the following exception:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b81392bd0>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E               urllib3.exceptions.ProtocolError: ('Connection broken: IncompleteRead(17577 bytes read, -10 more expected)', IncompleteRead(17577 bytes read, -10 more expected))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:727: ProtocolError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | During handling of the above exception, another exception occurred:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <test.test_geocaching.TestMethods testMethod=test_my_finds>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def test_my_finds(self):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         with self.recorder.use_cassette(\"geocaching_my_finds\"):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >           finds = list(self.gc.my_finds(3))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | test/test_geocaching.py:15: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/geocaching.py:483: in my_logs\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     cache_table = self._request(url).find(class_=\"Table\")\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/geocaching.py:82: in _request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     res = self._session.request(method, url, **kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     resp = self.send(prep, **send_kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:747: in send\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     r.content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:899: in content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self._content = b\"\".join(self.iter_content(CONTENT_CHUNK_SIZE)) or b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:816: in generate\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     yield from self.raw.stream(chunk_size, decode_content=True)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:940: in stream\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self.read(amt=amt, decode_content=decode_content)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:911: in read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self._raw_read(amt)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: in _raw_read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:130: in __exit__\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self.gen.throw(type, value, traceback)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b81392bd0>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If no exception is thrown, we should avoid cleaning up\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # unnecessarily.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             clean_exit = True\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         finally:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If we didn't terminate cleanly, we need to throw away our\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # connection.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if not clean_exit:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # The response may not be closed but we're not going to use it\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # anymore so close it now to ensure that the connection is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # released back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if self._original_response:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   self._original_response.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   AttributeError: 'MockHTTPResponse' object has no attribute 'close'\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:740: AttributeError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _________________________ TestShortcuts.test_get_cache _________________________\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | args = (<pycaching.cache.Cache object at 0x7f7b80e68910>,), kwargs = {}\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <pycaching.cache.Cache object at 0x7f7b80e68910>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @functools.wraps(func)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def wrapper(*args, **kwargs):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         self = args[0]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >           return func(*args, **kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/util.py:30: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <pycaching.cache.Cache object at 0x7f7b80e68910>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @property\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @lazy_loaded\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def name(self):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"A human readable name of cache.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         :type: :class:`str`\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >       return self._name\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E       AttributeError: 'Cache' object has no attribute '_name'\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/cache.py:328: AttributeError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | During handling of the above exception, another exception occurred:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b810a6c10>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:710: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b810a6c10>, amt = 10240\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _raw_read(\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         self,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         amt: int | None = None,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     ) -> bytes:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Reads `amt` of bytes from the socket.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         if self._fp is None:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             return None  # type: ignore[return-value]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         fp_closed = getattr(self._fp, \"closed\", False)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         with self._error_catcher():\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             data = self._fp_read(amt) if not fp_closed else b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if amt is not None and amt != 0 and not data:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Platform-specific: Buggy versions of Python.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Close the connection when no data is returned\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 #\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This is redundant to what httplib/http.client _should_\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # already do.  However, versions of python released before\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # December 15, 2012 (http://bugs.python.org/issue16298) do\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # not properly close the connection in all cases. There is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # no harm in redundantly calling close.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 self._fp.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if (\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     self.enforce_content_length\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining is not None\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining != 0\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 ):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # This is an edge case that httplib failed to cover due\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # to concerns of backward compatibility. We're\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # addressing it here to make sure IncompleteRead is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # raised during streaming, so all calls with incorrect\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # Content-Length are caught.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   urllib3.exceptions.IncompleteRead: IncompleteRead(165219 bytes read, -10 more expected)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: IncompleteRead\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | The above exception was the direct cause of the following exception:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b810a6c10>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E               urllib3.exceptions.ProtocolError: ('Connection broken: IncompleteRead(165219 bytes read, -10 more expected)', IncompleteRead(165219 bytes read, -10 more expected))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:727: ProtocolError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | During handling of the above exception, another exception occurred:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <test.test_geocaching.TestShortcuts testMethod=test_get_cache>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def test_get_cache(self):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         with self.recorder.use_cassette(\"geocaching_shortcut_getcache\"):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             c = self.gc.get_cache(\"GC4808G\")\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >           self.assertEqual(\"Nekonecne ticho\", c.name)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | test/test_geocaching.py:225: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/util.py:33: in wrapper\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self.load()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/cache.py:720: in load\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     root = self.geocaching._request(self._urls[\"cache_details\"], params={\"wp\": self._wp})\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/geocaching.py:82: in _request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     res = self._session.request(method, url, **kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     resp = self.send(prep, **send_kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:725: in send\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     history = [resp for resp in gen]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:725: in <listcomp>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     history = [resp for resp in gen]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:274: in resolve_redirects\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     **adapter_kwargs,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:747: in send\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     r.content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:899: in content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self._content = b\"\".join(self.iter_content(CONTENT_CHUNK_SIZE)) or b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:816: in generate\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     yield from self.raw.stream(chunk_size, decode_content=True)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:940: in stream\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self.read(amt=amt, decode_content=decode_content)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:911: in read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self._raw_read(amt)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: in _raw_read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:130: in __exit__\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self.gen.throw(type, value, traceback)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b810a6c10>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If no exception is thrown, we should avoid cleaning up\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # unnecessarily.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             clean_exit = True\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         finally:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If we didn't terminate cleanly, we need to throw away our\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # connection.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if not clean_exit:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # The response may not be closed but we're not going to use it\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # anymore so close it now to ensure that the connection is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # released back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if self._original_response:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   self._original_response.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   AttributeError: 'MockHTTPResponse' object has no attribute 'close'\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:740: AttributeError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _____________________ TestShortcuts.test_get_cache_by_guid _____________________\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b81419b90>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:710: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b81419b90>, amt = 10240\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _raw_read(\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         self,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         amt: int | None = None,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     ) -> bytes:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Reads `amt` of bytes from the socket.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         if self._fp is None:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             return None  # type: ignore[return-value]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         fp_closed = getattr(self._fp, \"closed\", False)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         with self._error_catcher():\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             data = self._fp_read(amt) if not fp_closed else b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if amt is not None and amt != 0 and not data:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Platform-specific: Buggy versions of Python.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Close the connection when no data is returned\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 #\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This is redundant to what httplib/http.client _should_\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # already do.  However, versions of python released before\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # December 15, 2012 (http://bugs.python.org/issue16298) do\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # not properly close the connection in all cases. There is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # no harm in redundantly calling close.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 self._fp.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if (\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     self.enforce_content_length\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining is not None\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining != 0\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 ):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # This is an edge case that httplib failed to cover due\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # to concerns of backward compatibility. We're\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # addressing it here to make sure IncompleteRead is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # raised during streaming, so all calls with incorrect\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # Content-Length are caught.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   urllib3.exceptions.IncompleteRead: IncompleteRead(83903 bytes read, -30 more expected)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: IncompleteRead\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | The above exception was the direct cause of the following exception:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b81419b90>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E               urllib3.exceptions.ProtocolError: ('Connection broken: IncompleteRead(83903 bytes read, -30 more expected)', IncompleteRead(83903 bytes read, -30 more expected))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:727: ProtocolError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | During handling of the above exception, another exception occurred:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <test.test_geocaching.TestShortcuts testMethod=test_get_cache_by_guid>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def test_get_cache_by_guid(self):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         with self.recorder.use_cassette(\"geocaching_shortcut_getcache_by_guid\"):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >           cache = self.gc.get_cache(guid=\"15ad3a3d-92c1-4f7c-b273-60937bcc2072\")\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | test/test_geocaching.py:229: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/geocaching.py:430: in get_cache\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     return self._cache_from_guid(guid)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/geocaching.py:455: in _cache_from_guid\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     print_page = self._request(Cache._urls[\"print_page\"], params={\"guid\": guid})\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/geocaching.py:82: in _request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     res = self._session.request(method, url, **kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     resp = self.send(prep, **send_kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:747: in send\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     r.content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:899: in content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self._content = b\"\".join(self.iter_content(CONTENT_CHUNK_SIZE)) or b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:816: in generate\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     yield from self.raw.stream(chunk_size, decode_content=True)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:940: in stream\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self.read(amt=amt, decode_content=decode_content)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:911: in read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self._raw_read(amt)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: in _raw_read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:130: in __exit__\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self.gen.throw(type, value, traceback)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b81419b90>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If no exception is thrown, we should avoid cleaning up\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # unnecessarily.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             clean_exit = True\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         finally:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If we didn't terminate cleanly, we need to throw away our\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # connection.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if not clean_exit:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # The response may not be closed but we're not going to use it\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # anymore so close it now to ensure that the connection is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # released back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if self._original_response:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   self._original_response.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   AttributeError: 'MockHTTPResponse' object has no attribute 'close'\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:740: AttributeError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _______________________ TestShortcuts.test_get_trackable _______________________\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | args = (<pycaching.trackable.Trackable object at 0x7f7b813fef50>,), kwargs = {}\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <pycaching.trackable.Trackable object at 0x7f7b813fef50>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @functools.wraps(func)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def wrapper(*args, **kwargs):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         self = args[0]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >           return func(*args, **kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/util.py:30: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <pycaching.trackable.Trackable object at 0x7f7b813fef50>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @property\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @lazy_loaded\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def name(self):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"A human readable trackable name.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         :type: :class:`str`\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >       return self._name\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E       AttributeError: 'Trackable' object has no attribute '_name'\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/trackable.py:81: AttributeError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | During handling of the above exception, another exception occurred:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b814582d0>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:710: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b814582d0>, amt = 10240\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _raw_read(\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         self,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         amt: int | None = None,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     ) -> bytes:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Reads `amt` of bytes from the socket.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         if self._fp is None:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             return None  # type: ignore[return-value]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         fp_closed = getattr(self._fp, \"closed\", False)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         with self._error_catcher():\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             data = self._fp_read(amt) if not fp_closed else b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if amt is not None and amt != 0 and not data:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Platform-specific: Buggy versions of Python.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Close the connection when no data is returned\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 #\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This is redundant to what httplib/http.client _should_\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # already do.  However, versions of python released before\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # December 15, 2012 (http://bugs.python.org/issue16298) do\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # not properly close the connection in all cases. There is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # no harm in redundantly calling close.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 self._fp.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if (\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     self.enforce_content_length\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining is not None\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining != 0\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 ):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # This is an edge case that httplib failed to cover due\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # to concerns of backward compatibility. We're\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # addressing it here to make sure IncompleteRead is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # raised during streaming, so all calls with incorrect\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # Content-Length are caught.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   urllib3.exceptions.IncompleteRead: IncompleteRead(50708 bytes read, -10 more expected)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: IncompleteRead\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | The above exception was the direct cause of the following exception:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b814582d0>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E               urllib3.exceptions.ProtocolError: ('Connection broken: IncompleteRead(50708 bytes read, -10 more expected)', IncompleteRead(50708 bytes read, -10 more expected))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:727: ProtocolError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | During handling of the above exception, another exception occurred:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <test.test_geocaching.TestShortcuts testMethod=test_get_trackable>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def test_get_trackable(self):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         with self.recorder.use_cassette(\"geocaching_shortcut_gettrackable\"):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             t = self.gc.get_trackable(\"TB1KEZ9\")\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >           self.assertEqual(\"Lilagul #2: SwedenHawk Geocoin\", t.name)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | test/test_geocaching.py:235: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/util.py:33: in wrapper\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self.load()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/trackable.py:187: in load\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     root = self.geocaching._request(url)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/geocaching.py:82: in _request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     res = self._session.request(method, url, **kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     resp = self.send(prep, **send_kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:747: in send\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     r.content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:899: in content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self._content = b\"\".join(self.iter_content(CONTENT_CHUNK_SIZE)) or b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:816: in generate\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     yield from self.raw.stream(chunk_size, decode_content=True)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:940: in stream\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self.read(amt=amt, decode_content=decode_content)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:911: in read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self._raw_read(amt)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: in _raw_read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:130: in __exit__\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self.gen.throw(type, value, traceback)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b814582d0>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If no exception is thrown, we should avoid cleaning up\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # unnecessarily.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             clean_exit = True\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         finally:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If we didn't terminate cleanly, we need to throw away our\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # connection.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if not clean_exit:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # The response may not be closed but we're not going to use it\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # anymore so close it now to ensure that the connection is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # released back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if self._original_response:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   self._original_response.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   AttributeError: 'MockHTTPResponse' object has no attribute 'close'\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:740: AttributeError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | __________________________ TestIssues.test_load__type __________________________\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | args = (<pycaching.trackable.Trackable object at 0x7f7b8168dcd0>,), kwargs = {}\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <pycaching.trackable.Trackable object at 0x7f7b8168dcd0>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @functools.wraps(func)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def wrapper(*args, **kwargs):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         self = args[0]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >           return func(*args, **kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/util.py:30: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <pycaching.trackable.Trackable object at 0x7f7b8168dcd0>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @property\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @lazy_loaded\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def type(self):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"The trackable type.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         A type depends on the trackable icon. It can be either \"Travel Bug Dog Tag\" or specific\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             geocoin name, eg. \"Adventure Race Hracholusky 2015 Geocoin\".\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         :type: :class:`str`\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >       return self._type\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E       AttributeError: 'Trackable' object has no attribute '_type'\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/trackable.py:152: AttributeError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | During handling of the above exception, another exception occurred:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b810bd490>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:710: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b810bd490>, amt = 10240\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _raw_read(\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         self,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         amt: int | None = None,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     ) -> bytes:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Reads `amt` of bytes from the socket.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         if self._fp is None:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             return None  # type: ignore[return-value]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         fp_closed = getattr(self._fp, \"closed\", False)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         with self._error_catcher():\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             data = self._fp_read(amt) if not fp_closed else b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if amt is not None and amt != 0 and not data:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Platform-specific: Buggy versions of Python.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Close the connection when no data is returned\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 #\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This is redundant to what httplib/http.client _should_\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # already do.  However, versions of python released before\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # December 15, 2012 (http://bugs.python.org/issue16298) do\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # not properly close the connection in all cases. There is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # no harm in redundantly calling close.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 self._fp.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if (\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     self.enforce_content_length\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining is not None\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining != 0\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 ):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # This is an edge case that httplib failed to cover due\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # to concerns of backward compatibility. We're\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # addressing it here to make sure IncompleteRead is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # raised during streaming, so all calls with incorrect\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # Content-Length are caught.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   urllib3.exceptions.IncompleteRead: IncompleteRead(47211 bytes read, -10 more expected)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: IncompleteRead\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | The above exception was the direct cause of the following exception:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b810bd490>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E               urllib3.exceptions.ProtocolError: ('Connection broken: IncompleteRead(47211 bytes read, -10 more expected)', IncompleteRead(47211 bytes read, -10 more expected))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:727: ProtocolError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | During handling of the above exception, another exception occurred:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <test.test_trackable.TestIssues testMethod=test_load__type>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def test_load__type(self):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         with self.subTest(\"existing\"):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             trackable = Trackable(self.gc, \"TB1KEZ9\")\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             with self.recorder.use_cassette(\"trackable_load__existing_type\"):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               self.assertEqual(\"SwedenHawk Geocoin\", trackable.type)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | test/test_trackable.py:156: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/util.py:33: in wrapper\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self.load()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/trackable.py:187: in load\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     root = self.geocaching._request(url)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/geocaching.py:82: in _request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     res = self._session.request(method, url, **kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     resp = self.send(prep, **send_kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:747: in send\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     r.content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:899: in content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self._content = b\"\".join(self.iter_content(CONTENT_CHUNK_SIZE)) or b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:816: in generate\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     yield from self.raw.stream(chunk_size, decode_content=True)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:940: in stream\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self.read(amt=amt, decode_content=decode_content)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:911: in read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self._raw_read(amt)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: in _raw_read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:130: in __exit__\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self.gen.throw(type, value, traceback)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b810bd490>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If no exception is thrown, we should avoid cleaning up\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # unnecessarily.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             clean_exit = True\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         finally:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If we didn't terminate cleanly, we need to throw away our\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # connection.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if not clean_exit:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # The response may not be closed but we're not going to use it\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # anymore so close it now to ensure that the connection is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # released back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if self._original_response:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   self._original_response.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   AttributeError: 'MockHTTPResponse' object has no attribute 'close'\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:740: AttributeError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | __________________________________ test_login __________________________________\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b80fc7f90>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:710: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b80fc7f90>, amt = 10240\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _raw_read(\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         self,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         amt: int | None = None,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     ) -> bytes:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Reads `amt` of bytes from the socket.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         if self._fp is None:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             return None  # type: ignore[return-value]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         fp_closed = getattr(self._fp, \"closed\", False)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         with self._error_catcher():\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             data = self._fp_read(amt) if not fp_closed else b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if amt is not None and amt != 0 and not data:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Platform-specific: Buggy versions of Python.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Close the connection when no data is returned\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 #\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This is redundant to what httplib/http.client _should_\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # already do.  However, versions of python released before\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # December 15, 2012 (http://bugs.python.org/issue16298) do\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # not properly close the connection in all cases. There is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # no harm in redundantly calling close.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 self._fp.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if (\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     self.enforce_content_length\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining is not None\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining != 0\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 ):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # This is an edge case that httplib failed to cover due\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # to concerns of backward compatibility. We're\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # addressing it here to make sure IncompleteRead is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # raised during streaming, so all calls with incorrect\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # Content-Length are caught.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   urllib3.exceptions.IncompleteRead: IncompleteRead(214050 bytes read, -40 more expected)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: IncompleteRead\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | The above exception was the direct cause of the following exception:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b80fc7f90>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E               urllib3.exceptions.ProtocolError: ('Connection broken: IncompleteRead(214050 bytes read, -40 more expected)', IncompleteRead(214050 bytes read, -40 more expected))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:727: ProtocolError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | During handling of the above exception, another exception occurred:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | geocaching = <pycaching.geocaching.Geocaching object at 0x7f7b81198090>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def test_login(geocaching):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >       geocaching.login(USERNAME, PASSWORD)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | tests_new/test_geocaching.py:22: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/geocaching.py:148: in login\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     after_login_page = self._request(self._urls[\"login_page\"], method=\"POST\", data=post, login_check=False)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/geocaching.py:82: in _request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     res = self._session.request(method, url, **kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     resp = self.send(prep, **send_kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:725: in send\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     history = [resp for resp in gen]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:725: in <listcomp>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     history = [resp for resp in gen]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:274: in resolve_redirects\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     **adapter_kwargs,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:747: in send\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     r.content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:899: in content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self._content = b\"\".join(self.iter_content(CONTENT_CHUNK_SIZE)) or b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:816: in generate\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     yield from self.raw.stream(chunk_size, decode_content=True)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:940: in stream\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self.read(amt=amt, decode_content=decode_content)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:911: in read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self._raw_read(amt)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: in _raw_read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:130: in __exit__\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self.gen.throw(type, value, traceback)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b80fc7f90>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If no exception is thrown, we should avoid cleaning up\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # unnecessarily.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             clean_exit = True\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         finally:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If we didn't terminate cleanly, we need to throw away our\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # connection.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if not clean_exit:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # The response may not be closed but we're not going to use it\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # anymore so close it now to ensure that the connection is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # released back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if self._original_response:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   self._original_response.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   AttributeError: 'MockHTTPResponse' object has no attribute 'close'\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:740: AttributeError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | ___________________ test_login_twice_with_valid_credentials ____________________\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b81220ed0>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:710: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b81220ed0>, amt = 10240\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _raw_read(\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         self,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         amt: int | None = None,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     ) -> bytes:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Reads `amt` of bytes from the socket.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         if self._fp is None:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             return None  # type: ignore[return-value]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         fp_closed = getattr(self._fp, \"closed\", False)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         with self._error_catcher():\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             data = self._fp_read(amt) if not fp_closed else b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if amt is not None and amt != 0 and not data:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Platform-specific: Buggy versions of Python.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Close the connection when no data is returned\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 #\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This is redundant to what httplib/http.client _should_\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # already do.  However, versions of python released before\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # December 15, 2012 (http://bugs.python.org/issue16298) do\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # not properly close the connection in all cases. There is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # no harm in redundantly calling close.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 self._fp.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if (\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     self.enforce_content_length\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining is not None\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining != 0\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 ):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # This is an edge case that httplib failed to cover due\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # to concerns of backward compatibility. We're\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # addressing it here to make sure IncompleteRead is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # raised during streaming, so all calls with incorrect\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # Content-Length are caught.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   urllib3.exceptions.IncompleteRead: IncompleteRead(214050 bytes read, -40 more expected)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: IncompleteRead\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | The above exception was the direct cause of the following exception:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b81220ed0>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E               urllib3.exceptions.ProtocolError: ('Connection broken: IncompleteRead(214050 bytes read, -40 more expected)', IncompleteRead(214050 bytes read, -40 more expected))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:727: ProtocolError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | During handling of the above exception, another exception occurred:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | geocaching = <pycaching.geocaching.Geocaching object at 0x7f7b810f9d90>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def test_login_twice_with_valid_credentials(geocaching):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >       geocaching.login(USERNAME, PASSWORD)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | tests_new/test_geocaching.py:34: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/geocaching.py:148: in login\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     after_login_page = self._request(self._urls[\"login_page\"], method=\"POST\", data=post, login_check=False)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/geocaching.py:82: in _request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     res = self._session.request(method, url, **kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     resp = self.send(prep, **send_kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:725: in send\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     history = [resp for resp in gen]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:725: in <listcomp>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     history = [resp for resp in gen]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:274: in resolve_redirects\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     **adapter_kwargs,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:747: in send\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     r.content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:899: in content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self._content = b\"\".join(self.iter_content(CONTENT_CHUNK_SIZE)) or b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:816: in generate\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     yield from self.raw.stream(chunk_size, decode_content=True)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:940: in stream\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self.read(amt=amt, decode_content=decode_content)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:911: in read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self._raw_read(amt)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: in _raw_read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:130: in __exit__\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self.gen.throw(type, value, traceback)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b81220ed0>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If no exception is thrown, we should avoid cleaning up\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # unnecessarily.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             clean_exit = True\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         finally:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If we didn't terminate cleanly, we need to throw away our\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # connection.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if not clean_exit:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # The response may not be closed but we're not going to use it\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # anymore so close it now to ensure that the connection is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # released back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if self._original_response:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   self._original_response.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   AttributeError: 'MockHTTPResponse' object has no attribute 'close'\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:740: AttributeError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _____________________________ test_get_logged_user _____________________________\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b80fa4350>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:710: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b80fa4350>, amt = 10240\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _raw_read(\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         self,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         amt: int | None = None,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     ) -> bytes:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Reads `amt` of bytes from the socket.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         if self._fp is None:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             return None  # type: ignore[return-value]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         fp_closed = getattr(self._fp, \"closed\", False)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         with self._error_catcher():\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             data = self._fp_read(amt) if not fp_closed else b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if amt is not None and amt != 0 and not data:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Platform-specific: Buggy versions of Python.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Close the connection when no data is returned\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 #\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This is redundant to what httplib/http.client _should_\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # already do.  However, versions of python released before\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # December 15, 2012 (http://bugs.python.org/issue16298) do\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # not properly close the connection in all cases. There is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # no harm in redundantly calling close.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 self._fp.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if (\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     self.enforce_content_length\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining is not None\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining != 0\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 ):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # This is an edge case that httplib failed to cover due\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # to concerns of backward compatibility. We're\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # addressing it here to make sure IncompleteRead is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # raised during streaming, so all calls with incorrect\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # Content-Length are caught.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   urllib3.exceptions.IncompleteRead: IncompleteRead(214050 bytes read, -40 more expected)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: IncompleteRead\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | The above exception was the direct cause of the following exception:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b80fa4350>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E               urllib3.exceptions.ProtocolError: ('Connection broken: IncompleteRead(214050 bytes read, -40 more expected)', IncompleteRead(214050 bytes read, -40 more expected))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:727: ProtocolError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | During handling of the above exception, another exception occurred:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | geocaching = <pycaching.geocaching.Geocaching object at 0x7f7b81193710>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def test_get_logged_user(geocaching):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >       geocaching.login(USERNAME, PASSWORD)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | tests_new/test_geocaching.py:56: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/geocaching.py:148: in login\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     after_login_page = self._request(self._urls[\"login_page\"], method=\"POST\", data=post, login_check=False)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/geocaching.py:82: in _request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     res = self._session.request(method, url, **kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     resp = self.send(prep, **send_kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:725: in send\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     history = [resp for resp in gen]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:725: in <listcomp>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     history = [resp for resp in gen]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:274: in resolve_redirects\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     **adapter_kwargs,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:747: in send\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     r.content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:899: in content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self._content = b\"\".join(self.iter_content(CONTENT_CHUNK_SIZE)) or b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:816: in generate\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     yield from self.raw.stream(chunk_size, decode_content=True)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:940: in stream\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self.read(amt=amt, decode_content=decode_content)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:911: in read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self._raw_read(amt)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: in _raw_read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:130: in __exit__\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self.gen.throw(type, value, traceback)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b80fa4350>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If no exception is thrown, we should avoid cleaning up\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # unnecessarily.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             clean_exit = True\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         finally:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If we didn't terminate cleanly, we need to throw away our\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # connection.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if not clean_exit:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # The response may not be closed but we're not going to use it\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # anymore so close it now to ensure that the connection is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # released back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if self._original_response:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   self._original_response.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   AttributeError: 'MockHTTPResponse' object has no attribute 'close'\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:740: AttributeError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _________________________________ test_logout __________________________________\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b8165f950>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:710: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b8165f950>, amt = 10240\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _raw_read(\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         self,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         amt: int | None = None,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     ) -> bytes:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Reads `amt` of bytes from the socket.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         if self._fp is None:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             return None  # type: ignore[return-value]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         fp_closed = getattr(self._fp, \"closed\", False)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         with self._error_catcher():\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             data = self._fp_read(amt) if not fp_closed else b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if amt is not None and amt != 0 and not data:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Platform-specific: Buggy versions of Python.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Close the connection when no data is returned\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 #\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This is redundant to what httplib/http.client _should_\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # already do.  However, versions of python released before\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # December 15, 2012 (http://bugs.python.org/issue16298) do\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # not properly close the connection in all cases. There is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # no harm in redundantly calling close.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 self._fp.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if (\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     self.enforce_content_length\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining is not None\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining != 0\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 ):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # This is an edge case that httplib failed to cover due\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # to concerns of backward compatibility. We're\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # addressing it here to make sure IncompleteRead is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # raised during streaming, so all calls with incorrect\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # Content-Length are caught.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   urllib3.exceptions.IncompleteRead: IncompleteRead(214050 bytes read, -40 more expected)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: IncompleteRead\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | The above exception was the direct cause of the following exception:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b8165f950>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E               urllib3.exceptions.ProtocolError: ('Connection broken: IncompleteRead(214050 bytes read, -40 more expected)', IncompleteRead(214050 bytes read, -40 more expected))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:727: ProtocolError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | During handling of the above exception, another exception occurred:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | geocaching = <pycaching.geocaching.Geocaching object at 0x7f7b8166e190>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def test_logout(geocaching):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >       geocaching.login(USERNAME, PASSWORD)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | tests_new/test_geocaching.py:61: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/geocaching.py:148: in login\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     after_login_page = self._request(self._urls[\"login_page\"], method=\"POST\", data=post, login_check=False)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/geocaching.py:82: in _request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     res = self._session.request(method, url, **kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     resp = self.send(prep, **send_kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:725: in send\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     history = [resp for resp in gen]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:725: in <listcomp>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     history = [resp for resp in gen]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:274: in resolve_redirects\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     **adapter_kwargs,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:747: in send\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     r.content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:899: in content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self._content = b\"\".join(self.iter_content(CONTENT_CHUNK_SIZE)) or b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:816: in generate\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     yield from self.raw.stream(chunk_size, decode_content=True)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:940: in stream\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self.read(amt=amt, decode_content=decode_content)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:911: in read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self._raw_read(amt)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: in _raw_read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:130: in __exit__\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self.gen.throw(type, value, traceback)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b8165f950>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If no exception is thrown, we should avoid cleaning up\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # unnecessarily.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             clean_exit = True\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         finally:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If we didn't terminate cleanly, we need to throw away our\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # connection.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if not clean_exit:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # The response may not be closed but we're not going to use it\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # anymore so close it now to ensure that the connection is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # released back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if self._original_response:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   self._original_response.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   AttributeError: 'MockHTTPResponse' object has no attribute 'close'\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:740: AttributeError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | __________________________________ test_login __________________________________\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b80e04dd0>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:710: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b80e04dd0>, amt = 10240\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _raw_read(\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         self,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         amt: int | None = None,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     ) -> bytes:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Reads `amt` of bytes from the socket.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         if self._fp is None:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             return None  # type: ignore[return-value]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         fp_closed = getattr(self._fp, \"closed\", False)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         with self._error_catcher():\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             data = self._fp_read(amt) if not fp_closed else b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if amt is not None and amt != 0 and not data:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Platform-specific: Buggy versions of Python.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # Close the connection when no data is returned\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 #\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This is redundant to what httplib/http.client _should_\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # already do.  However, versions of python released before\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # December 15, 2012 (http://bugs.python.org/issue16298) do\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # not properly close the connection in all cases. There is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # no harm in redundantly calling close.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 self._fp.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if (\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     self.enforce_content_length\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining is not None\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     and self.length_remaining != 0\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 ):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # This is an edge case that httplib failed to cover due\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # to concerns of backward compatibility. We're\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # addressing it here to make sure IncompleteRead is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # raised during streaming, so all calls with incorrect\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # Content-Length are caught.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   urllib3.exceptions.IncompleteRead: IncompleteRead(214050 bytes read, -40 more expected)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: IncompleteRead\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | The above exception was the direct cause of the following exception:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b80e04dd0>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >               raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E               urllib3.exceptions.ProtocolError: ('Connection broken: IncompleteRead(214050 bytes read, -40 more expected)', IncompleteRead(214050 bytes read, -40 more expected))\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:727: ProtocolError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | During handling of the above exception, another exception occurred:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | betamax_session = <requests.sessions.Session object at 0x7f7b8134cb50>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def test_login(betamax_session: requests.Session):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         real_init = Geocaching.__init__\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         def fake_init(self_, unused_argument=None):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             real_init(self_, session=betamax_session)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         # patching with the fake init method above to insert our session into the Geocaching object for testing\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         with patch.object(Geocaching, \"__init__\", new=fake_init):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >           pycaching.login(USERNAME, PASSWORD)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | tests_new/test_shortcuts.py:18: \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/__init__.py:18: in login\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     g.login(username, password)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/geocaching.py:148: in login\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     after_login_page = self._request(self._urls[\"login_page\"], method=\"POST\", data=post, login_check=False)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | pycaching/geocaching.py:82: in _request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     res = self._session.request(method, url, **kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:589: in request\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     resp = self.send(prep, **send_kwargs)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:725: in send\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     history = [resp for resp in gen]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:725: in <listcomp>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     history = [resp for resp in gen]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:274: in resolve_redirects\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     **adapter_kwargs,\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/sessions.py:747: in send\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     r.content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:899: in content\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self._content = b\"\".join(self.iter_content(CONTENT_CHUNK_SIZE)) or b\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/requests/models.py:816: in generate\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     yield from self.raw.stream(chunk_size, decode_content=True)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:940: in stream\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self.read(amt=amt, decode_content=decode_content)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:911: in read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     data = self._raw_read(amt)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:835: in _raw_read\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     raise IncompleteRead(self._fp_bytes_read, self.length_remaining)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/contextlib.py:130: in __exit__\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     self.gen.throw(type, value, traceback)\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | self = <urllib3.response.HTTPResponse object at 0x7f7b80e04dd0>\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @contextmanager\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def _error_catcher(self) -> typing.Generator[None, None, None]:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         Catch low-level python exceptions, instead re-raising urllib3\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         variants, so that low-level exceptions are not leaked in the\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         high-level api.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         On exit, release the connection back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         \"\"\"\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         clean_exit = False\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             try:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 yield\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except SocketTimeout as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Ideally we'd like to include the url in the ReadTimeoutError but\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # there is yet no clean way to get at it from this context.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except BaseSSLError as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # FIXME: Is there a better way to differentiate between SSLErrors?\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if \"read operation timed out\" not in str(e):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     # SSL errors related to framing/MAC get wrapped and reraised here\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                     raise SSLError(e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ReadTimeoutError(self._pool, None, \"Read timed out.\") from e  # type: ignore[arg-type]\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             except (HTTPException, OSError) as e:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # This includes IncompleteRead.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 raise ProtocolError(f\"Connection broken: {e!r}\", e) from e\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If no exception is thrown, we should avoid cleaning up\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # unnecessarily.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             clean_exit = True\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |         finally:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # If we didn't terminate cleanly, we need to throw away our\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             # connection.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |             if not clean_exit:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # The response may not be closed but we're not going to use it\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # anymore so close it now to ensure that the connection is\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 # released back to the pool.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |                 if self._original_response:\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | >                   self._original_response.close()\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | E                   AttributeError: 'MockHTTPResponse' object has no attribute 'close'\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | /opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/urllib3/response.py:740: AttributeError\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | =============================== warnings summary ===============================\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | test/test_cache.py::TestProperties::test_state\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |   /tmp/558156d8-17ed-11ee-8a50-bb14de238602/tomasbedrich-pycaching/pycaching/cache.py:406: FutureWarning: Call to deprecated function state.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     @lazy_loaded\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | test/test_geocaching.py::TestMethods::test_search_quick\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |   /tmp/558156d8-17ed-11ee-8a50-bb14de238602/tomasbedrich-pycaching/pycaching/geocaching.py:285: FutureWarning: Call to deprecated function search_quick.\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   |     def search_quick(self, area):\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | \n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | -- Docs: https://docs.pytest.org/en/stable/warnings.html\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | - generated xml file: /tmp/558156d8-17ed-11ee-8a50-bb14de238602/tomasbedrich-pycaching/report.xml -\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   | ============ 17 failed, 99 passed, 2 warnings, 12 errors in 26.75s =============\n[9f54715f-36da-4636-b710-dcccf51cd141/build]   \u274c  Failure - Main pytest\n[9f54715f-36da-4636-b710-dcccf51cd141/build] exitcode '1': failure\n[9f54715f-36da-4636-b710-dcccf51cd141/build] \ud83c\udfc1  Job failed\n",
        "stderr": "Error: Job 'build' failed\n",
        "workflow": {
            "path": "/tmp/558156d8-17ed-11ee-8a50-bb14de238602/tomasbedrich-pycaching/.github/workflows/ci-crawler.yml",
            "type": "pytest"
        },
        "workflow_name": "9f54715f-36da-4636-b710-dcccf51cd141",
        "build_tool": "pytest",
        "elapsed_time": 299.7096018791199
    }
}